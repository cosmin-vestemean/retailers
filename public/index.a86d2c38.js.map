{"mappings":"ACAA,QAAQ,GAAG,CAAC,oBAGZ,MAAM,EAAS,GAAG,yBACZ,EAAS,WACT,EAAe,SAAS,QAAQ,CAAC,GAEvC,EAAO,SAAS,CAAC,GAEjB,EAAO,GAAG,CAAC,OAAQ,EAAa,OAAO,CAAC,QAAS,CAC/C,QAAS,CAAC,cAAe,eAAgB,YAAY,CACrD,OAAQ,CAAC,eAAe,AAC1B,GAEA,EAAO,GAAG,CAAC,WAAY,EAAa,OAAO,CAAC,YAAa,CACvD,QAAS,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,SAAS,AACjE,GAEA,EAAO,GAAG,CAAC,yBAA0B,EAAa,OAAO,CAAC,0BAA2B,CACnF,QAAS,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,SAAS,AACjE,GAEA,EAAO,GAAG,CAAC,mBAAoB,EAAa,OAAO,CAAC,oBAAqB,CACvE,QAAS,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,SAAS,AACjE,GAEA,EAAO,GAAG,CAAC,sBAAuB,EAAa,OAAO,CAAC,uBAAwB,CAC7E,QAAS,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,SAAS,AACjE,GAEA,EAAO,GAAG,CAAC,cAAe,EAAa,OAAO,CAAC,eAAgB,CAC7D,QAAS,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,SAAS,AACjE,GAEA,EAAO,GAAG,CAAC,cAAe,EAAa,OAAO,CAAC,eAAgB,CAC7D,QAAS,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,SAAS,AACjE,GAEA,EAAO,GAAG,CAAC,aAAc,EAAa,OAAO,CAAC,cAAe,CAC3D,QAAS,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,SAAS,AACjE,GAEA,EAAO,GAAG,CAAC,eAAgB,EAAa,OAAO,CAAC,gBAAiB,CAC/D,QAAS,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,SAAS,AACjE,GAEA,EAAO,GAAG,CAAC,eAAgB,EAAa,OAAO,CAAC,gBAAiB,CAC/D,QAAS,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,SAAS,AACjE,GAGA,EAAO,GAAG,CAAC,gBAAiB,EAAa,OAAO,CAAC,iBAAkB,CACjE,QAAS,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,SAAS,AACjE,GAEA,EAAO,OAAO,CAAC,QAAQ,EAAE,CAAC,eAAgB,AAAC,IACzC,QAAQ,GAAG,CAAC,eAAgB,EAC9B,GAs/BA,AA/QA,WAEE,IAAI,EACJ,GAAI,CACF,EAAuB,SAAS,aAAa,OAAO,CAAC,iBACvD,CAAE,MAAO,EAAK,CACZ,QAAQ,GAAG,CAAC,GACZ,MACF,CACA,EACG,OAAO,CAAC,0BACR,IAAI,CAAC,CACJ,MAAO,CACL,cAAe,CACjB,CACF,GACC,IAAI,CAAC,AAAC,IACL,QAAQ,GAAG,CAAC,GACZ,IAAI,EAAQ,SAAS,cAAc,CAAC,iBACpC,EAAI,IAAI,CAAC,OAAO,CAAC,AAAC,IAChB,IAAI,EAAM,EAAM,SAAS,GACrB,EAAQ,EAAI,UAAU,GACtB,EAAQ,EAAI,UAAU,GACtB,EAAQ,EAAI,UAAU,GACtB,EAAQ,EAAI,UAAU,GACtB,EAAQ,EAAI,UAAU,GACtB,EAAQ,EAAI,UAAU,EAC1B,CAAA,EAAM,SAAS,CAAG,CAAC,kBAAkB,EAAE,EAAK,sBAAsB,CAAC,uDAAuD,EAAE,EAAK,KAAK,CAAC,IAAI,CAAC,CAC5I,EAAM,SAAS,CAAG,CAAC,mBAAmB,EAAE,EAAK,sBAAsB,CAAC,wDAAwD,EAAE,EAAK,MAAM,CAAC,IAAI,CAAC,CAC/I,EAAM,SAAS,CAAG,CAAC,yBAAyB,EAAE,EAAK,sBAAsB,CAAC,8DAA8D,EAAE,EAAK,YAAY,CAAC,IAAI,CAAC,CACjK,EAAM,SAAS,CAAG,CAAC,0BAA0B,EAAE,EAAK,sBAAsB,CAAC,+DAA+D,EAAE,EAAK,aAAa,CAAC,IAAI,CAAC,CACpK,EAAM,SAAS,CAAG,CAAC,iEAAiE,EAAE,EAAK,sBAAsB,CAAC,kBAAkB,CAAC,CAErI,EAAM,SAAS,EAAI,CAAC,kEAAkE,EAAE,EAAK,sBAAsB,CAAC,gBAAgB,CAAC,CAErI,EAAM,SAAS,EAAI,CAAC,8EAA8E,EAAE,EAAK,sBAAsB,CAAC,iBAAiB,CAAC,CAElJ,EAAM,SAAS,CAAG,EAAK,sBAAsB,CAE7C,EAAM,KAAK,CAAC,OAAO,CAAG,OAEtB,EAAM,SAAS,CAAG,wBACpB,EACF,EACJ,IAw6EA,SAAS,gBAAgB,CAAC,UAAW,SAAU,CAAK,EAClD,IAAI,EAAQ,SAAS,cAAc,CAAC,iBACnB,CAAA,UAAb,EAAM,GAAG,EACX,EAAM,SAAS,CAAC,MAAM,CAAC,YAE3B,GAGA,OAAO,MAAM,CAAG,WACd,IAAI,EAAS,CAAC,CACd,CAAA,EAAO,KAAQ,CAAG,CAAC,EACnB,EAAO,KAAQ,CAAC,QAAW,CACzB,mDAAqD,aAAa,OAAO,CAAC,iBAC5E,EACG,OAAO,CAAC,cACR,IAAI,CAAC,GACL,IAAI,CAAC,AAAC,IACD,EAAI,IAAI,EAIV,CAAA,AADmB,SAAS,cAAc,CAAC,gBAC9B,SAAS,CAAG,EAAI,IAAI,AAAJ,CAEjC,EACJ","sources":["<anon>","src/client.js"],"sourcesContent":["console.log(\"Client.js loaded\");\n//const socket = io('https://retailers-ac9953f6caca.herokuapp.com')\nconst socket = io(\"www.retailers.acct.ro\");\nconst client = feathers();\nconst socketClient = feathers.socketio(socket);\nclient.configure(socketClient);\nclient.use(\"sftp\", socketClient.service(\"sftp\"), {\n    methods: [\n        \"downloadXml\",\n        \"storeXmlInDB\",\n        \"uploadXml\"\n    ],\n    events: [\n        \"uploadResult\"\n    ]\n});\nclient.use(\"storeXml\", socketClient.service(\"storeXml\"), {\n    methods: [\n        \"find\",\n        \"get\",\n        \"create\",\n        \"update\",\n        \"patch\",\n        \"remove\"\n    ]\n});\nclient.use(\"CCCDOCUMENTES1MAPPINGS\", socketClient.service(\"CCCDOCUMENTES1MAPPINGS\"), {\n    methods: [\n        \"find\",\n        \"get\",\n        \"create\",\n        \"update\",\n        \"patch\",\n        \"remove\"\n    ]\n});\nclient.use(\"CCCXMLS1MAPPINGS\", socketClient.service(\"CCCXMLS1MAPPINGS\"), {\n    methods: [\n        \"find\",\n        \"get\",\n        \"create\",\n        \"update\",\n        \"patch\",\n        \"remove\"\n    ]\n});\nclient.use(\"CCCRETAILERSCLIENTS\", socketClient.service(\"CCCRETAILERSCLIENTS\"), {\n    methods: [\n        \"find\",\n        \"get\",\n        \"create\",\n        \"update\",\n        \"patch\",\n        \"remove\"\n    ]\n});\nclient.use(\"connectToS1\", socketClient.service(\"connectToS1\"), {\n    methods: [\n        \"find\",\n        \"get\",\n        \"create\",\n        \"update\",\n        \"patch\",\n        \"remove\"\n    ]\n});\nclient.use(\"setDocument\", socketClient.service(\"setDocument\"), {\n    methods: [\n        \"find\",\n        \"get\",\n        \"create\",\n        \"update\",\n        \"patch\",\n        \"remove\"\n    ]\n});\nclient.use(\"getDataset\", socketClient.service(\"getDataset\"), {\n    methods: [\n        \"find\",\n        \"get\",\n        \"create\",\n        \"update\",\n        \"patch\",\n        \"remove\"\n    ]\n});\nclient.use(\"getS1ObjData\", socketClient.service(\"getS1ObjData\"), {\n    methods: [\n        \"find\",\n        \"get\",\n        \"create\",\n        \"update\",\n        \"patch\",\n        \"remove\"\n    ]\n});\nclient.use(\"getS1SqlData\", socketClient.service(\"getS1SqlData\"), {\n    methods: [\n        \"find\",\n        \"get\",\n        \"create\",\n        \"update\",\n        \"patch\",\n        \"remove\"\n    ]\n});\n//getInvoiceDom\nclient.use(\"getInvoiceDom\", socketClient.service(\"getInvoiceDom\"), {\n    methods: [\n        \"find\",\n        \"get\",\n        \"create\",\n        \"update\",\n        \"patch\",\n        \"remove\"\n    ]\n});\nclient.service(\"sftp\").on(\"uploadResult\", (data1)=>{\n    console.log(\"uploadResult\", data1);\n});\nvar url = \"\", username = \"\", passphrase = \"\", privateKey = \"\", fingerprint = \"\";\nfunction getRetailerConfData() {\n    var localStorageRetailer1;\n    try {\n        localStorageRetailer1 = parseInt(localStorage.getItem(\"trdr_retailer\"));\n    } catch (err) {\n        console.log(err);\n    }\n    client.service(\"CCCSFTP\").find({\n        query: {\n            TRDR_RETAILER: localStorageRetailer1\n        }\n    }).then((res)=>{\n        console.log(res);\n        //URL\n        document.getElementById(\"URL\").value = res.data[0].URL;\n        //PORT\n        document.getElementById(\"PORT\").value = res.data[0].PORT;\n        //USERNAME\n        document.getElementById(\"USERNAME\").value = res.data[0].USERNAME;\n        //PASSPHRASE\n        document.getElementById(\"PASSPHRASE\").value = res.data[0].PASSPHRASE;\n        privateKey = res.data[0].PRIVATEKEY;\n        document.getElementById(\"FINGERPRINT\").value = res.data[0].FINGERPRINT;\n        document.getElementById(\"TRDR_RETAILER\").value = res.data[0].TRDR_RETAILER;\n        //INITIALDIRIN\n        document.getElementById(\"INITIALDIRIN\").value = res.data[0].INITIALDIRIN;\n        //INITIALDIROUT\n        document.getElementById(\"INITIALDIROUT\").value = res.data[0].INITIALDIROUT;\n    });\n}\nfunction setRetailerId(trdr, urlLogo) {\n    localStorage.setItem(\"trdr_retailer\", trdr);\n    localStorage.setItem(\"logo_retailer\", urlLogo);\n    console.log(\"Retailer id set to \", parseInt(localStorage.getItem(\"trdr_retailer\")));\n}\nfunction updateRetailerConfData() {\n    //URL\n    url = document.getElementById(\"URL\").value;\n    //PORT\n    port = document.getElementById(\"PORT\").value;\n    //USERNAME\n    username = document.getElementById(\"USERNAME\").value;\n    //PASSPHRASE\n    passphrase = document.getElementById(\"PASSPHRASE\").value;\n    //FINGERPRINT\n    fingerprint = document.getElementById(\"FINGERPRINT\").value;\n    //TRDR_RETAILER\n    trdr_retailer = document.getElementById(\"TRDR_RETAILER\").value;\n    //INITIALDIRIN\n    initialdirin = document.getElementById(\"INITIALDIRIN\").value;\n    //INITIALDIROUT\n    initialdirout = document.getElementById(\"INITIALDIROUT\").value;\n    client.service(\"CCCSFTP\").update({\n        query: {\n            TRDR_RETAILER: trdr_retailer\n        }\n    }, data = {\n        URL: url,\n        PORT: port,\n        USERNAME: username,\n        PASSPHRASE: passphrase,\n        FINGERPRINT: fingerprint,\n        INITIALDIRIN: initialdirin,\n        INITIALDIROUT: initialdirout\n    }).then((res)=>{\n        console.log(res);\n    });\n}\nasync function getRetailerXMLData(retailer) {\n    return new Promise((resolve, reject)=>{\n        client.service(\"CCCSFTPXML\").find({\n            query: {\n                TRDR_RETAILER: retailer,\n                $limit: 200,\n                $sort: {\n                    XMLDATE: -1\n                }\n            }\n        }).then((res)=>{\n            resolve(res);\n        });\n    });\n}\nfunction getClientConfData() {\n    //CCCRETAILERSCLIENTS\n    client.service(\"CCCRETAILERSCLIENTS\").find({\n        query: {\n            TRDR_CLIENT: 1\n        }\n    }).then((res)=>{\n        //WSURL\n        document.getElementById(\"WSURL\").value = res.data[0].WSURL;\n        //LOGINCOMPANY\n        document.getElementById(\"LOGINCOMPANY\").value = res.data[0].COMPANY;\n        //BRANCH\n        document.getElementById(\"LOGINBRANCH\").value = res.data[0].BRANCH;\n        //LOGINUSER\n        document.getElementById(\"LOGINUSER\").value = res.data[0].WSUSER;\n        //LOGINPASS\n        document.getElementById(\"LOGINPASSWORD\").value = res.data[0].WSPASS;\n    });\n}\n//config_retailer section\nfunction openTab(evt, tabName) {\n    var i, x, tablinks;\n    x = document.getElementsByClassName(\"content-tab\");\n    for(i = 0; i < x.length; i++)x[i].style.display = \"none\";\n    tablinks = document.getElementsByClassName(\"tab\");\n    for(i = 0; i < x.length; i++)tablinks[i].className = tablinks[i].className.replace(\" is-active\", \"\");\n    document.getElementById(tabName).style.display = \"block\";\n    evt.currentTarget.className += \" is-active\";\n}\nfunction loadFile(event) {\n    var xml = event.target.files[0];\n    var reader = new FileReader();\n    reader.onload = function(e) {\n        var textArea = document.getElementById(\"xmlTextArea\");\n        textArea.value = e.target.result;\n        //loop iterates through the xml file and displays the content in the console\n        var parser = new DOMParser();\n        var xmlDoc = parser.parseFromString(e.target.result, \"text/xml\");\n        //get main node from select id \"xmlRoot\"\n        var mainNode = document.getElementById(\"xmlRoot\").value;\n        var x = xmlDoc.getElementsByTagName(mainNode);\n        //loop recursivly through all nodes from main node \"Order\" and create an object with the values\n        var obj = xml2json(x[0]);\n        console.log(\"xml2json\", obj);\n        //get node name for lines; select id \"delimitareLinieDocument\"\n        var linesNode = document.getElementById(\"delimitareLinieDocument\").value;\n        //cut obj in two parts: header and lines; lines are in an array (obj.OrderLine)\n        var header = {};\n        var lines = [];\n        console.log(\"header\", header);\n        for(var i in obj)if (i == linesNode && obj[i].length > 0 && typeof obj[i] === \"object\") lines = obj[i];\n        else header[i] = obj[i];\n        var table = document.getElementById(\"xmlAsTable\");\n        //delete innerHTML\n        table.innerHTML = \"\";\n        //add thead\n        addTableHeader(table);\n        var headerArrayOfObjects = [];\n        var linesArrayOfObjects = [];\n        recurse(header, [], mainNode, \"#FFFAFC\", \"#0a0a0a\", headerArrayOfObjects);\n        addRowsToTable(headerArrayOfObjects);\n        //recurse first line, no point to recurse through all lines, it's a reference for all lines\n        recurse(lines[0], [], mainNode + \"/\" + linesNode, \"#eff5fb\", \"#0a0a0a\", linesArrayOfObjects);\n        addRowsToTable(linesArrayOfObjects);\n    };\n    try {\n        reader.readAsText(xml);\n    } catch (err) {\n        console.log(err);\n    }\n}\nfunction addTableHeader(table) {\n    var thead = table.createTHead();\n    var row = thead.insertRow();\n    var cell0 = document.createElement(\"th\");\n    cell0.innerHTML = \"XML Ord.\";\n    cell0.className = \"xmlOrder\";\n    row.appendChild(cell0);\n    var cell1 = document.createElement(\"th\");\n    row.appendChild(cell1);\n    cell1.innerHTML = \"Pick\";\n    //text orientation up\n    //cell1.style.writingMode = 'vertical-rl'\n    //cell1.style.textOrientation = 'upright'\n    var cell2 = document.createElement(\"th\");\n    row.appendChild(cell2);\n    cell2.innerHTML = \"Req.\";\n    //same\n    //cell2.style.writingMode = 'vertical-rl'\n    //cell2.style.textOrientation = 'upright'\n    var cell3 = document.createElement(\"th\");\n    row.appendChild(cell3);\n    cell3.innerHTML = \"XML Path\";\n    var cell4 = document.createElement(\"th\");\n    row.appendChild(cell4);\n    cell4.innerHTML = \"S1 Table 1\";\n    var cell5 = document.createElement(\"th\");\n    row.appendChild(cell5);\n    cell5.innerHTML = \"S1 Field 1\";\n    var cell6 = document.createElement(\"th\");\n    row.appendChild(cell6);\n    cell6.innerHTML = \"S1 Table 2\";\n    var cell7 = document.createElement(\"th\");\n    row.appendChild(cell7);\n    cell7.innerHTML = \"S1 Field 2\";\n    var cell8 = document.createElement(\"th\");\n    row.appendChild(cell8);\n    cell8.innerHTML = \"SQL\";\n    var cell9 = document.createElement(\"th\");\n    row.appendChild(cell9);\n    cell9.innerHTML = \"Value\";\n    //add column Observatii\n    var cell10 = document.createElement(\"th\");\n    row.appendChild(cell10);\n    cell10.innerHTML = \"Observatii\";\n    //make it prety and sticky\n    thead.style.backgroundColor = \"#e6e6e6\";\n    thead.style.fontWeight = \"bold\";\n    thead.style.zIndex = \"1\";\n    //add hideUnselectedRows button on another row\n    row = thead.insertRow();\n    cell1 = document.createElement(\"th\");\n    row.appendChild(cell1);\n    cell1.colSpan = 10;\n    cell1.innerHTML = `<button id=\"hideUnselectedRows\" class=\"button is-small is-info\" onclick=\"hideUnselectedRows()\">Show/Hide unselected rows</button>`;\n    //add 4 buttons on the same row; on click hide/show cells: 1. S1 Table 2, S1 Field 2, 2. Value, 3. Observatii\n    cell1.innerHTML += `<button id=\"hideS1Table2S1Field2\" class=\"button is-small is-info ml-2\" onclick=\"showHideCell(['S1 Table 2', 'S1 Field 2'], document.getElementById('xmlAsTable'))\">Show/Hide Table 2</button>`;\n    cell1.innerHTML += `<button id=\"hideValue\" class=\"button is-small is-info ml-2\" onclick=\"showHideCell(['Value'], document.getElementById('xmlAsTable'))\">Show/Hide Value</button>`;\n    cell1.innerHTML += `<button id=\"hideObservatii\" class=\"button is-small is-info ml-2\" onclick=\"showHideCell(['Observatii'], document.getElementById('xmlAsTable'))\">Show/Hide Observatii</button>`;\n    //hide/show all the above buttons\n    cell1.innerHTML += `<button id=\"hideShowAll\" class=\"button is-small is-info ml-2\" onclick=\"showHideCell(['S1 Table 2', 'S1 Field 2', 'Value', 'Observatii'], document.getElementById('xmlAsTable'))\">Hide all</button>`;\n    //add saveMapping button on the same row\n    cell1.innerHTML += `<button class=\"button is-small is-success ml-2\" onclick=\"saveMapping()\">Save mapping</button>`;\n}\nfunction showHideCell(cellsByName, table) {\n    //show hide cells in table\n    var rowCount = table.rows.length;\n    var cells = [];\n    //look in thead for cells with name in cellsByName and retain index of cells\n    var thead = table.tHead;\n    var row = thead.rows[0];\n    for(var i = 0; i < row.cells.length; i++)if (cellsByName.indexOf(row.cells[i].innerHTML) > -1) cells.push(i);\n    //search by index in tbody and show/hide cells\n    for(var i = 0; i < rowCount; i++){\n        var row = table.rows[i];\n        for(var j = 0; j < cells.length; j++){\n            var cell = row.cells[cells[j]];\n            try {\n                if (cell.style.display == \"none\") cell.style.display = \"\";\n                else cell.style.display = \"none\";\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    }\n}\nfunction recurse(obj, parent, root, color, color1, result) {\n    //recurse through the object and add rows to result\n    for(var i in obj)if (obj[i] !== null && typeof obj[i] === \"object\") {\n        //detect if it is an array\n        if (Array.isArray(obj[i])) {\n            //change color for entire array\n            recurse(obj[i], parent.concat(i), root, color, \"#3850b7\", result);\n            //recurse first element of array\n            recurse(obj[i][0], parent.concat(i), root, color, \"#cc0f35\", result);\n        } else recurse(obj[i], parent.concat(i), root, color, color1, result);\n    } else //add row to table xmlAsTable\n    result.push({\n        obj,\n        parent,\n        root,\n        i,\n        color,\n        color1\n    });\n}\nfunction addRowsToTable(arr) {\n    var table = document.getElementById(\"xmlAsTable\");\n    //if body doesn't exist create it otherwise get it\n    var tbody = table.tBodies[0] ? table.tBodies[0] : table.createTBody();\n    arr.forEach((item)=>{\n        var obj = item.obj;\n        var parent = item.parent;\n        var root = item.root;\n        var i = item.i;\n        var color = item.color;\n        var color1 = item.color1;\n        var row = tbody.insertRow();\n        //root as class name\n        row.className = root;\n        var xmlOrder = row.insertCell();\n        //class\n        xmlOrder.className = \"xmlOrder\";\n        xmlOrder.innerHTML = 0;\n        var remains = row.insertCell();\n        var mandatory = row.insertCell();\n        var xmlPath = row.insertCell();\n        var s1Tbl1 = row.insertCell();\n        var s1Fld1 = row.insertCell();\n        var s1Tbl2 = row.insertCell();\n        var s1Fld2 = row.insertCell();\n        var sql = row.insertCell();\n        var value = row.insertCell();\n        //add column Observatii\n        var cell10 = row.insertCell();\n        //BuyerCustomerParty/PostalAddress/AdditionalStreetName\n        var xmlJoinBySlash = parent && parent.length > 0 ? parent.join(\"/\") + \"/\" + i : i;\n        //Order_BuyerCustomerParty_PostalAddress_AdditionalStreetName\n        var xmlJoinByUnderscore = parent && parent.length > 0 ? root + \"_\" + parent.join(\"_\") + \"_\" + i : root + \"_\" + i;\n        //add column with checkbox \"Remaining\"\n        var input1 = document.createElement(\"input\");\n        input1.type = \"checkbox\";\n        input1.name = xmlJoinByUnderscore + \"_Remaining\";\n        input1.className = \"remaining checkbox is-small\" //important, used in hideUnselectedRows()\n        ;\n        input1.id = xmlJoinByUnderscore + \"_Remaining\";\n        remains.appendChild(input1);\n        remains.onclick = function() {\n            //change color for entire row\n            var row = this.parentNode;\n            if (this.childNodes[0].checked) row.style.backgroundColor = \"#e6ffe6\";\n            else row.style.backgroundColor = \"white\";\n        };\n        //add column with checkbox \"Mandatory\"\n        var input2 = document.createElement(\"input\");\n        input2.type = \"checkbox\";\n        input2.name = xmlJoinByUnderscore + \"_Mandatory\";\n        input2.id = xmlJoinByUnderscore + \"_Mandatory\";\n        input2.className = \"mandatory checkbox is-small\";\n        mandatory.appendChild(input2);\n        //xmlPath\n        //if too long word wrap, rember it one word\n        xmlPath.style.maxWidth = \"300px\";\n        //wrap\n        xmlPath.style.wordWrap = \"break-word\";\n        xmlPath.innerHTML = root + \"/\" + xmlJoinBySlash;\n        xmlPath.className = \"xmlPath\";\n        //xmlPath.style.paddingLeft = parent.length * 10 + 'px'\n        //s1Tbl1\n        var input3 = document.createElement(\"input\");\n        input3.type = \"text\";\n        input3.name = xmlJoinByUnderscore + \"_S1Table1\";\n        input3.id = xmlJoinByUnderscore + \"_S1Table1\";\n        input3.className = \"input is-small\";\n        input3.value = \"\";\n        input3.placeholder = \"S1 table\";\n        s1Tbl1.appendChild(input3);\n        //s1Fld1\n        var input4 = document.createElement(\"input\");\n        input4.type = \"text\";\n        input4.name = xmlJoinByUnderscore + \"_S1Field1\";\n        input4.id = xmlJoinByUnderscore + \"_S1Field1\";\n        input4.className = \"input is-small\";\n        input4.value = \"\";\n        input4.placeholder = \"S1 field\";\n        s1Fld1.appendChild(input4);\n        //s1Tbl2\n        var input5 = document.createElement(\"input\");\n        input5.type = \"text\";\n        input5.name = xmlJoinByUnderscore + \"_S1Table2\";\n        input5.id = xmlJoinByUnderscore + \"_S1Table2\";\n        input5.className = \"input is-small\";\n        input5.value = \"\";\n        input5.placeholder = \"S1 table\";\n        s1Tbl2.appendChild(input5);\n        //s1Fld2\n        var input6 = document.createElement(\"input\");\n        input6.type = \"text\";\n        input6.name = xmlJoinByUnderscore + \"_S1Field2\";\n        input6.id = xmlJoinByUnderscore + \"_S1Field2\";\n        input6.className = \"input is-small\";\n        input6.value = \"\";\n        input6.placeholder = \"S1 field\";\n        s1Fld2.appendChild(input6);\n        //Value\n        value.innerHTML = obj[i];\n        //add sql textarea field\n        var input7 = document.createElement(\"textarea\");\n        //1 row\n        input7.rows = 1;\n        input7.id = xmlJoinByUnderscore + \"_Sql\";\n        input7.className = \"textarea is-small\";\n        input7.rows = 1;\n        input7.value = \"\";\n        input7.placeholder = \"SQL\";\n        input7.spellcheck = false;\n        input7.style.width = \"300px\";\n        sql.appendChild(input7);\n        //add column Observatii\n        var input8 = document.createElement(\"textarea\");\n        input8.rows = 1;\n        input8.id = xmlJoinByUnderscore + \"_Observatii\";\n        input8.className = \"textarea is-small\";\n        input8.rows = 1;\n        input8.value = \"\";\n        input8.placeholder = \"Observatii\";\n        input8.spellcheck = false;\n        input8.style.width = \"300px\";\n        cell10.appendChild(input8);\n        //add onclick event to row\n        row.onclick = function() {\n            var table = document.getElementById(\"xmlAsTable\");\n            var rowCount = table.rows.length;\n            for(var i = 1; i < rowCount; i++)table.rows[i].className = \"\";\n            this.className = \"is-selected\";\n        };\n        row.style.backgroundColor = color;\n        row.style.color = color1;\n    });\n}\nfunction xml2json(node) {\n    var result = {};\n    if (node.hasAttributes()) {\n        result[\"__attributes\"] = {};\n        var attrs = node.attributes;\n        for(var i = 0; i < attrs.length; i++)result[\"__attributes\"][attrs[i].nodeName] = attrs[i].nodeValue;\n    }\n    if (node.hasChildNodes()) {\n        var children = node.childNodes;\n        for(var i = 0; i < children.length; i++){\n            var child = children[i];\n            if (child.nodeType == 1) {\n                if (child.childNodes.length == 1 && child.firstChild.nodeType == 3) {\n                    // text value\n                    //result[child.nodeName] = child.firstChild.nodeValue\n                    var objAttrs = {};\n                    if (child.hasAttributes()) {\n                        var attrs = child.attributes;\n                        for(var j = 0; j < attrs.length; j++)objAttrs[\"__\" + attrs[j].nodeName] = attrs[j].nodeValue;\n                        objAttrs[child.nodeName] = child.firstChild.nodeValue;\n                        //console.log('objAttrs', objAttrs)\n                        //result[child.nodeName] = objAttrs\n                        result[child.nodeName] = xml2json(child);\n                        //add child.firstChild.nodeValue as a property to result[child.nodeName]\n                        result[child.nodeName][\"__value\"] = child.firstChild.nodeValue;\n                    } else result[child.nodeName] = child.firstChild.nodeValue;\n                } else // sub-object\n                if (typeof result[child.nodeName] == \"undefined\") result[child.nodeName] = xml2json(child);\n                else {\n                    //array\n                    if (typeof result[child.nodeName].push == \"undefined\") {\n                        var old = result[child.nodeName];\n                        result[child.nodeName] = [];\n                        result[child.nodeName].push(old);\n                        console.log(\"old\", old);\n                    }\n                    result[child.nodeName].push(xml2json(child));\n                    console.log(\"array\", child.nodeName);\n                }\n            }\n        }\n    }\n    return result;\n}\nfunction addRow() {\n    var table = document.getElementById(\"documente\");\n    var row = table.insertRow();\n    var cell1 = row.insertCell();\n    var cell2 = row.insertCell();\n    var cell3 = row.insertCell();\n    var cell4 = row.insertCell();\n    cell1.innerHTML = `<input id = \"FPRMS${table.rows.length}\" class=\"input\" type=\"text\" placeholder=\"FPRMS\" />`;\n    cell2.innerHTML = `<input id = \"SERIES${table.rows.length}\" class=\"input\" type=\"text\" placeholder=\"SERIES\" />`;\n    cell3.innerHTML = `<input id = \"INITIALDIRIN${table.rows.length}\" class=\"input\" type=\"text\" placeholder=\"INITIALDIRIN\" />`;\n    cell4.innerHTML = `<input id = \"INITIALDIROUT${table.rows.length}\" class=\"input\" type=\"text\" placeholder=\"INITIALDIROUT\" />`;\n    var cell5 = row.insertCell();\n    cell5.className = \"CCCDOCUMENTES1MAPPINGS\";\n    cell5.innerHTML = table.rows.length;\n    //hide it\n    cell5.style.display = \"none\";\n    //add actions column\n    var cell6 = row.insertCell();\n    cell6.innerHTML += `<button class=\"button is-small is-danger m-2\" onclick=\"deleteRow()\">Delete</button>`;\n    cell6.innerHTML += `<button class=\"button is-small is-info m-2\" onclick=\"loadMapping()\">Load</button>`;\n    //add class is-selected to current row\n    row.className = \"is-selected\";\n    //add onclick event to row\n    row.onclick = function() {\n        var table = document.getElementById(\"documente\");\n        var rowCount = table.rows.length;\n        for(var i = 1; i < rowCount; i++)table.rows[i].className = \"\";\n        this.className = \"is-selected\";\n    };\n}\nfunction deleteRow() {\n    var table = document.getElementById(\"documente\");\n    var rowCount = table.rows.length;\n    table.deleteRow(rowCount - 1);\n}\nfunction hideUnselectedRows() {\n    //if caption is \"Hide unselected rows\" change it to \"Show all rows\" and viceversa\n    var caption = document.getElementById(\"hideUnselectedRows\").innerHTML;\n    if (caption == \"Hide unselected rows\") document.getElementById(\"hideUnselectedRows\").innerHTML = \"Show all rows\";\n    else document.getElementById(\"hideUnselectedRows\").innerHTML = \"Hide unselected rows\";\n    var table = document.getElementById(\"xmlAsTable\");\n    var tbody = table.tBodies[0];\n    var rowCount = tbody.rows.length;\n    if (caption == \"Show all rows\") {\n        for(var i = 1; i < rowCount; i++){\n            var row = tbody.rows[i];\n            row.style.display = \"\";\n        }\n        return;\n    } else for(var i = 1; i < rowCount; i++){\n        var row = tbody.rows[i];\n        var input = row.cells[0].childNodes[0];\n        if (input.checked) row.style.display = \"\";\n        else row.style.display = \"none\";\n    }\n}\nfunction saveMapping() {\n    //SET CAPTION TO \"SHOW ALL ROWS\"\n    document.getElementById(\"hideUnselectedRows\").innerHTML = \"Show all rows\";\n    hideUnselectedRows();\n    if (!validateMappings()) return;\n    //get current row from table documente and add class is-selected\n    var currentDoc = getDocument();\n    //verify if currentDoc already exists in database table CCCDOCUMENTES1MAPPINGS\n    client.service(\"CCCDOCUMENTES1MAPPINGS\").find({\n        query: {\n            FPRMS: currentDoc.FPRMS,\n            SERIES: currentDoc.SERIES\n        }\n    }).then((res)=>{\n        console.log(res);\n        if (res.data.length > 0) {\n            //ask user if he wants to overwrite the existing mapping\n            var answer = confirm(\"Mapping already exists. Do you want to overwrite it?\");\n            if (answer) //check if it has children in table CCCXMLS1MAPPINGS\n            client.service(\"CCCXMLS1MAPPINGS\").find({\n                query: {\n                    CCCDOCUMENTES1MAPPINGS: res.data[0].CCCDOCUMENTES1MAPPINGS\n                }\n            }).then(async (res)=>{\n                console.log(\"for delete\", res);\n                try {\n                    await deleteMapping(res.data[0].CCCDOCUMENTES1MAPPINGS);\n                } catch (err) {\n                    console.log(err);\n                }\n                insertNewMapping(currentDoc);\n            });\n            else return;\n        } else insertNewMapping(currentDoc);\n    });\n}\nfunction insertNewMapping(currentDoc) {\n    //insert currentDoc in database table CCCDOCUMENTES1MAPPINGS\n    client.service(\"CCCDOCUMENTES1MAPPINGS\").create(currentDoc).then((res)=>{\n        console.log(res);\n        var mappings = getSelectedMappingData();\n        var cccdocumentes1Mappings = res.CCCDOCUMENTES1MAPPINGS;\n        mappings.forEach((item)=>{\n            item[\"CCCDOCUMENTES1MAPPINGS\"] = cccdocumentes1Mappings;\n        });\n        console.log(\"mappings\", mappings);\n        for(var i = 0; i < mappings.length; i++)client.service(\"CCCXMLS1MAPPINGS\").create(mappings[i]).then((res)=>{\n        //console.log('response', res)\n        });\n    });\n}\nfunction getDocument() {\n    var table = document.getElementById(\"documente\");\n    var rowCount = table.rows.length;\n    var row = table.rows[rowCount - 1];\n    row.className = \"is-selected\";\n    //find cell in row with class CCCDOCUMENTES1MAPPINGS\n    var cell = row.getElementsByClassName(\"CCCDOCUMENTES1MAPPINGS\")[0];\n    var CCCDOCUMENTES1MAPPINGS = cell.innerHTML;\n    console.log(\"CCCDOCUMENTES1MAPPINGS\", CCCDOCUMENTES1MAPPINGS);\n    //save row data in an object\n    var currentDoc = {};\n    currentDoc[\"SOSOURCE\"] = 1351;\n    currentDoc[\"FPRMS\"] = parseInt(document.getElementById(\"FPRMS\" + CCCDOCUMENTES1MAPPINGS.toString()).value);\n    currentDoc[\"SERIES\"] = parseInt(document.getElementById(\"SERIES\" + CCCDOCUMENTES1MAPPINGS.toString()).value);\n    currentDoc[\"INITIALDIRIN\"] = document.getElementById(\"INITIALDIRIN\" + CCCDOCUMENTES1MAPPINGS.toString()).value;\n    currentDoc[\"INITIALDIROUT\"] = document.getElementById(\"INITIALDIROUT\" + CCCDOCUMENTES1MAPPINGS.toString()).value;\n    currentDoc[\"TRDR_RETAILER\"] = parseInt(document.getElementById(\"TRDR_RETAILER\").value);\n    currentDoc[\"TRDR_CLIENT\"] = 1;\n    console.log(currentDoc);\n    return currentDoc;\n}\nfunction getSelectedMappingData() {\n    if (!validateMappings()) return;\n    var table = document.getElementById(\"xmlAsTable\");\n    var rowCount = table.rows.length;\n    var mapping = [];\n    for(var i = 1; i < rowCount; i++){\n        var row = table.rows[i];\n        var input = row.cells[1].childNodes[0];\n        if (input.checked) {\n            var obj = {};\n            /* obj['XMLNODE'] =\r\n        row.className.toLowerCase().indexOf('line') > -1\r\n          ? row.className + '/' + row.cells[2].innerHTML\r\n          : row.cells[2].innerHTML */ obj[\"XMLNODE\"] = row.cells[3].innerHTML;\n            //cells 3, 4, 5, 6 have an input type text field inside, get the value from input instead of innerHTML\n            obj[\"S1TABLE1\"] = document.getElementById(row.cells[4].childNodes[0].id).value;\n            obj[\"S1FIELD1\"] = document.getElementById(row.cells[5].childNodes[0].id).value;\n            if (document.getElementById(row.cells[6].childNodes[0].id).value) obj[\"S1TABLE2\"] = document.getElementById(row.cells[6].childNodes[0].id).value;\n            if (document.getElementById(row.cells[7].childNodes[0].id).value) obj[\"S1FIELD2\"] = document.getElementById(row.cells[7].childNodes[0].id).value;\n            obj[\"MANDATORY\"] = row.cells[2].childNodes[0].checked ? 1 : 0;\n            //sql\n            obj[\"SQL\"] = document.getElementById(row.cells[8].childNodes[0].id).value;\n            //Observatii\n            obj[\"OBSERVATII\"] = document.getElementById(row.cells[10].childNodes[0].id).value;\n            //add XMLORDER\n            obj[\"XMLORDER\"] = parseFloat(row.cells[0].innerHTML);\n            mapping.push(obj);\n        }\n    }\n    return mapping;\n}\nfunction validateMappings() {\n    /* var docTable = document.getElementById('documenteBody')\r\n  //get selected row from table documente\r\n  //find cell with input starting with initialdirin\r\n  var cell = docTable.rows[docTable.rows.length - 1].querySelector('input[id^=\"INITIALDIRIN\"]')\r\n  var hasInitialDirIn = cell.value ? true : false\r\n  console.log('hasInitialDirIn', hasInitialDirIn)\r\n  var table = document.getElementById('xmlAsTable')\r\n  //get tbody\r\n  var tbody = table.tBodies[0]\r\n  var rowCount = tbody.rows.length\r\n  var countSelectedRows = 0\r\n  for (var i = 1; i < rowCount; i++) {\r\n    var row = tbody.rows[i]\r\n    var input = row.cells[0].childNodes[0]\r\n    if (input.checked) {\r\n      countSelectedRows++\r\n      if (hasInitialDirIn && !document.getElementById(row.cells[3].childNodes[0].id).value) {\r\n        alert('Please fill in first S1 table field')\r\n        return false\r\n      }\r\n      if (hasInitialDirIn && !document.getElementById(row.cells[4].childNodes[0].id).value) {\r\n        alert('Please fill in first S1 field field')\r\n        return false\r\n      }\r\n    }\r\n  }\r\n  if (countSelectedRows == 0) {\r\n    alert('Please select at least one row')\r\n    return false\r\n  } */ return true;\n}\nfunction loadListaDocumente() {\n    //get all documents from database table CCCDOCUMENTES1MAPPINGS\n    var localStorageRetailer1;\n    try {\n        localStorageRetailer1 = parseInt(localStorage.getItem(\"trdr_retailer\"));\n    } catch (err) {\n        console.log(err);\n        return;\n    }\n    client.service(\"CCCDOCUMENTES1MAPPINGS\").find({\n        query: {\n            TRDR_RETAILER: localStorageRetailer1\n        }\n    }).then((res)=>{\n        console.log(res);\n        var table = document.getElementById(\"documenteBody\");\n        res.data.forEach((item)=>{\n            var row = table.insertRow();\n            var cell1 = row.insertCell();\n            var cell2 = row.insertCell();\n            var cell3 = row.insertCell();\n            var cell4 = row.insertCell();\n            var cell5 = row.insertCell();\n            var cell6 = row.insertCell();\n            cell1.innerHTML = `<input id = \"FPRMS${item.CCCDOCUMENTES1MAPPINGS}\" class=\"input\" type=\"text\" placeholder=\"FPRMS\" value=\"${item.FPRMS}\" />`;\n            cell2.innerHTML = `<input id = \"SERIES${item.CCCDOCUMENTES1MAPPINGS}\" class=\"input\" type=\"text\" placeholder=\"SERIES\" value=\"${item.SERIES}\" />`;\n            cell3.innerHTML = `<input id = \"INITIALDIRIN${item.CCCDOCUMENTES1MAPPINGS}\" class=\"input\" type=\"text\" placeholder=\"INITIALDIRIN\" value=\"${item.INITIALDIRIN}\" />`;\n            cell4.innerHTML = `<input id = \"INITIALDIROUT${item.CCCDOCUMENTES1MAPPINGS}\" class=\"input\" type=\"text\" placeholder=\"INITIALDIROUT\" value=\"${item.INITIALDIROUT}\" />`;\n            cell5.innerHTML = `<button class=\"button is-danger is-small\" onclick=\"deleteMapping(${item.CCCDOCUMENTES1MAPPINGS})\">Delete</button>`;\n            //button for loading xml mappings for current document\n            cell5.innerHTML += `<button class=\"button is-info is-small ml-2\" onclick=\"loadMapping(${item.CCCDOCUMENTES1MAPPINGS})\">Load</button>`;\n            //add button for loading from another document from table documente\n            cell5.innerHTML += `<button class=\"button is-info is-small ml-2\" onclick=\"copyFromAnotherDocument(${item.CCCDOCUMENTES1MAPPINGS})\">Clone</button>`;\n            //cell6 hidden CCCDOCUMENTES1MAPPINGS, no input\n            cell6.innerHTML = item.CCCDOCUMENTES1MAPPINGS;\n            //hide cell6\n            cell6.style.display = \"none\";\n            //name cell6\n            cell6.className = \"CCCDOCUMENTES1MAPPINGS\";\n        });\n    });\n}\nasync function deleteMapping(id) {\n    //ask user if he wants to delete the mapping\n    var answer = confirm(\"Are you sure you want to delete this mapping?\");\n    if (!answer) return;\n    //delete from table CCCXMLS1MAPPINGS then CCCDOCUMENTES1MAPPINGS; wait for each transaction to complete\n    await client.service(\"CCCXMLS1MAPPINGS\").remove(null, {\n        query: {\n            CCCDOCUMENTES1MAPPINGS: id\n        }\n    }).then((res)=>{\n        console.log(res);\n    });\n    await client.service(\"CCCDOCUMENTES1MAPPINGS\").remove(id).then((res)=>{\n        console.log(res);\n    });\n}\nfunction loadMapping(id) {\n    //add mappings from db into xmlAsTable table id\n    //get all mappings from table CCCXMLS1MAPPINGS\n    client.service(\"CCCXMLS1MAPPINGS\").find({\n        query: {\n            CCCDOCUMENTES1MAPPINGS: id,\n            $sort: {\n                XMLORDER: 1\n            }\n        }\n    }).then((res)=>{\n        console.log(res);\n        //get all rows from xmlAsTable\n        var table = document.getElementById(\"xmlAsTable\");\n        //if xmlAsTable has rows, delete the ones with the same item.XMLNODE in the third column\n        res.data.forEach((item)=>{\n            var rowCount = table.rows.length;\n            for(var i = 1; i < rowCount; i++){\n                var row = table.rows[i];\n                if (row.cells.length && row.cells.length > 5 && row.cells[2].innerHTML == item.XMLNODE) {\n                    table.deleteRow(i);\n                    break;\n                }\n            }\n        });\n        //add rows from db and create xml dom\n        //Order is the main node\n        //id res length is 0, return\n        if (res.data.length == 0) {\n            //no data message\n            var row = table.insertRow();\n            var cell = row.insertCell();\n            cell.innerHTML = \"No data\";\n            cell.colSpan = 9;\n            cell.style.textAlign = \"center\";\n            return;\n        } else //thead if doesn't exist\n        if (!table.tHead) addTableHeader(table);\n        //create tbody\n        addTableBody(table, res.data);\n        //add xml dom to xmlTextArea\n        addXmlDomToTextArea(res.data);\n    });\n}\nfunction addTableBody(table, data1) {\n    //if body doesn't exist create it otherwise get it\n    var tbody = table.tBodies[0] ? table.tBodies[0] : table.createTBody();\n    data1.forEach((item)=>{\n        //add rows\n        var row = tbody.insertRow();\n        //add cells\n        //xml order\n        var xmlOrder = row.insertCell();\n        xmlOrder.innerHTML = item.XMLORDER;\n        xmlOrder.className = \"xmlOrder\";\n        var pick = row.insertCell();\n        var req = row.insertCell();\n        var xmlPath = row.insertCell();\n        var s1Tbl1 = row.insertCell();\n        var s1Fld1 = row.insertCell();\n        var s1Tbl2 = row.insertCell();\n        var s1Fld2 = row.insertCell();\n        var sql = row.insertCell();\n        var value = row.insertCell();\n        var observatii = row.insertCell();\n        //add checkbox for pick\n        var input1 = document.createElement(\"input\");\n        input1.type = \"checkbox\";\n        input1.name = item.XMLNODE + \"_Remaining\";\n        input1.className = \"remaining checkbox is-small\" //important, used in hideUnselectedRows()\n        ;\n        input1.id = item.XMLNODE + \"_Remaining\";\n        input1.checked = true;\n        pick.appendChild(input1);\n        pick.onclick = function() {\n            //change color for entire row\n            var row = this.parentNode;\n            if (this.childNodes[0].checked) row.style.backgroundColor = \"#e6ffe6\";\n            else row.style.backgroundColor = \"white\";\n        };\n        //add checkbox for req\n        var input2 = document.createElement(\"input\");\n        input2.type = \"checkbox\";\n        input2.name = item.XMLNODE + \"_Mandatory\";\n        input2.id = item.XMLNODE + \"_Mandatory\";\n        input2.className = \"mandatory checkbox is-small\";\n        input2.checked = item.MANDATORY == 1 ? true : false;\n        req.appendChild(input2);\n        //xmlPath\n        //if too long word wrap, rember it one word\n        xmlPath.style.maxWidth = \"300px\";\n        //wrap\n        xmlPath.style.wordWrap = \"break-word\";\n        xmlPath.innerHTML = item.XMLNODE;\n        xmlPath.className = \"xmlPath\";\n        //s1Tbl1\n        var input3 = document.createElement(\"input\");\n        input3.type = \"text\";\n        input3.name = item.XMLNODE + \"_S1Table1\";\n        input3.id = item.XMLNODE + \"_S1Table1\";\n        input3.className = \"input is-small\";\n        input3.value = item.S1TABLE1;\n        input3.placeholder = \"S1 table\";\n        s1Tbl1.appendChild(input3);\n        //s1Fld1\n        var input4 = document.createElement(\"input\");\n        input4.type = \"text\";\n        input4.name = item.XMLNODE + \"_S1Field1\";\n        input4.id = item.XMLNODE + \"_S1Field1\";\n        input4.className = \"input is-small\";\n        input4.value = item.S1FIELD1;\n        input4.placeholder = \"S1 field\";\n        s1Fld1.appendChild(input4);\n        //s1Tbl2\n        var input5 = document.createElement(\"input\");\n        input5.type = \"text\";\n        input5.name = item.XMLNODE + \"_S1Table2\";\n        input5.id = item.XMLNODE + \"_S1Table2\";\n        input5.className = \"input is-small\";\n        input5.value = item.S1TABLE2;\n        input5.placeholder = \"S1 table\";\n        s1Tbl2.appendChild(input5);\n        //s1Fld2\n        var input6 = document.createElement(\"input\");\n        input6.type = \"text\";\n        input6.name = item.XMLNODE + \"_S1Field2\";\n        input6.id = item.XMLNODE + \"_S1Field2\";\n        input6.className = \"input is-small\";\n        input6.value = item.S1FIELD2;\n        input6.placeholder = \"S1 field\";\n        s1Fld2.appendChild(input6);\n        //Value\n        value.innerHTML = \"\";\n        //add sql textarea field\n        var input7 = document.createElement(\"textarea\");\n        //1 row\n        input7.rows = 1;\n        input7.id = item.XMLNODE + \"_Sql\";\n        input7.className = \"textarea is-small\";\n        input7.value = item.SQL;\n        input7.placeholder = \"SQL\";\n        input7.spellcheck = false;\n        input7.style.width = \"300px\";\n        sql.appendChild(input7);\n        //add observatii textarea field\n        var input8 = document.createElement(\"textarea\");\n        //1 row\n        input8.rows = 1;\n        input8.id = item.XMLNODE + \"_Observatii\";\n        input8.className = \"textarea is-small\";\n        input8.value = item.OBSERVATII;\n        input8.placeholder = \"Observatii\";\n        input8.spellcheck = false;\n        input8.style.width = \"300px\";\n        observatii.appendChild(input8);\n        //color row so it can be easily identified\n        row.style.backgroundColor = \"whitesmoke\";\n    });\n}\nfunction addXmlDomToTextArea(data1) {\n    //create xml dom\n    var xmlDom = document.implementation.createDocument(\"\", \"\", null);\n    var root = xmlDom.createElement(document.getElementById(\"xmlRoot\").value);\n    xmlDom.appendChild(root);\n    data1.forEach((item)=>{\n        var xmlNodes = item.XMLNODE.split(\"/\");\n        //add xml elements to xml dom\n        var root = xmlDom.documentElement //Order or...\n        ;\n        for(var i = 0; i < xmlNodes.length; i++){\n            var node;\n            //verify if node already exists\n            if (root.getElementsByTagName(xmlNodes[i]).length > 0) {\n                node = root.getElementsByTagName(xmlNodes[i])[0];\n                root.appendChild(node);\n                root = node;\n            } else try {\n                node = xmlDom.createElement(xmlNodes[i]);\n                root.appendChild(node);\n                root = node;\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    });\n    //add xml dom to xmlTextArea\n    var xmlTextArea = document.getElementById(\"xmlTextArea\");\n    xmlTextArea.value = xmlDom.documentElement.outerHTML;\n}\nloadListaDocumente();\nfunction searchTable(tableId, searchBoxId) {\n    // Declare variables\n    var input, filter, table, tr, td, i, txtValue;\n    input = document.getElementById(searchBoxId);\n    filter = input.value.toUpperCase();\n    table = document.getElementById(tableId);\n    //search third column\n    tr = table.getElementsByTagName(\"tr\");\n    // Loop through all table rows, and hide those who don't match the search query\n    for(i = 0; i < tr.length; i++){\n        td = tr[i].getElementsByTagName(\"td\")[2];\n        if (td) {\n            txtValue = td.textContent || td.innerText;\n            if (txtValue.toUpperCase().indexOf(filter) > -1) tr[i].style.display = \"\";\n            else tr[i].style.display = \"none\";\n        }\n    }\n}\nasync function sendOrder(xml, xmlFilename, xmlDate, retailer) {\n    return await createOrderJSONRefactored(xml, 1351, 701, 7012, xmlFilename, xmlDate, retailer);\n}\nasync function createOrderJSONRefactored(xml, sosource, fprms, series, xmlFilename, xmlDate, retailer) {\n    //use await instead of promises\n    //get a token for s1 connection\n    var res = await client.service(\"CCCRETAILERSCLIENTS\").find({\n        query: {\n            TRDR_CLIENT: 1\n        }\n    });\n    console.log(\"date logare\", res);\n    var url = res.data[0].WSURL;\n    var username = res.data[0].WSUSER;\n    var password = res.data[0].WSPASS;\n    var res = await client.service(\"connectToS1\").find({\n        query: {\n            url: url,\n            username: username,\n            password: password\n        }\n    });\n    console.log(\"connectToS1\", res);\n    var token = res.token;\n    //get CCCDOCUMENTES1MAPPINGS for sourcCCCDOCUMENTES1MAPPINGSe, fprms, series\n    var res = await client.service(\"CCCDOCUMENTES1MAPPINGS\").find({\n        query: {\n            SOSOURCE: sosource,\n            FPRMS: fprms,\n            SERIES: series,\n            TRDR_RETAILER: retailer\n        }\n    });\n    console.log(\"CCCDOCUMENTES1MAPPINGS\", res);\n    var CCCDOCUMENTES1MAPPINGS = res.data[0].CCCDOCUMENTES1MAPPINGS;\n    //get CCCXMLS1MAPPINGS for CCCDOCUMENTES1MAPPINGS\n    var res = await client.service(\"CCCXMLS1MAPPINGS\").find({\n        query: {\n            CCCDOCUMENTES1MAPPINGS: CCCDOCUMENTES1MAPPINGS\n        }\n    });\n    console.log(\"CCCXMLS1MAPPINGS\", res);\n    var CCCXMLS1MAPPINGS = res.data;\n    //create json order\n    var jsonOrder = {};\n    jsonOrder[\"service\"] = \"setData\";\n    jsonOrder[\"clientID\"] = token;\n    jsonOrder[\"appId\"] = 1001;\n    jsonOrder[\"OBJECT\"] = \"SALDOC\";\n    jsonOrder[\"FORM\"] = \"EFIntegrareRetailers\";\n    //find distinct S1TABLE1, for grouping data\n    var distinctS1TABLE1 = [];\n    CCCXMLS1MAPPINGS.forEach((item)=>{\n        if (distinctS1TABLE1.indexOf(item.S1TABLE1) == -1) distinctS1TABLE1.push(item.S1TABLE1);\n    });\n    console.log(\"distinctS1TABLE1\", distinctS1TABLE1);\n    //create jsonOrder['DATA']\n    var DATA = {};\n    //create jsonOrder['DATA'][distinct]\n    distinctS1TABLE1.forEach((item)=>{\n        DATA[item] = [];\n    });\n    //add data to jsonOrder['DATA'][distinct]\n    CCCXMLS1MAPPINGS.forEach((item)=>{\n        var xmlVals = getValFromXML(xml, item.XMLNODE);\n        xmlVals.forEach((xmlVal)=>{\n            var val = 0;\n            if (item.SQL) //SQL: select trdbranch from trdbranch where trdr=12334 and cccs1dxgln='{value}'\n            //{value} is the value from xml for current node\n            //execute sql\n            /*\r\n              executeSQL(sql).then((res) => {\r\n                console.log('res', res)\r\n                val = res.data[0][item.S1FIELD1]\r\n              })\r\n              */ val = {\n                SQL: item.SQL,\n                value: xmlVal\n            };\n            else val = xmlVal;\n            var obj = {};\n            obj[item.S1FIELD1] = val;\n            DATA[item.S1TABLE1].push(obj);\n        });\n    });\n    jsonOrder[\"DATA\"] = DATA;\n    console.log(\"jsonOrder\", jsonOrder);\n    //for each value containing an object, replace it with the returned getDataset value from the object\n    //for ex: {SQL: \"select trdbranch from trdbranch where trdr=12334 and cccs1dxgln='{value}'\"}\n    //replace it with the client.service('getDataset').find({SQL: \"select trdbranch from trdbranch where trdr=12334 and cccs1dxgln='{value}'\"})\n    //parse jsonOrder['DATA'] to get all objects\n    var objects = [];\n    for(var key in jsonOrder[\"DATA\"])jsonOrder[\"DATA\"][key].forEach((item)=>{\n        objects.push(item);\n    });\n    console.log(\"objects\", objects);\n    var errors = [], errors2 = [];\n    //if object has an object with a key SQL, replace it with the returned getDataset value from the object\n    for(var i = 0; i < objects.length; i++){\n        var item = objects[i];\n        for(var key in item){\n            if (typeof item[key] == \"object\") {\n                if (item[key].SQL) {\n                    console.log(\"SQL\", item[key].SQL);\n                    console.log(\"xml Value\", item[key].value);\n                    //replace item[key] with the returned getDataset value from the object\n                    //set params' query\n                    var params = {};\n                    params[\"query\"] = {};\n                    params[\"query\"][\"sqlQuery\"] = item[key].SQL;\n                    //replace {value} with xml value\n                    params[\"query\"][\"sqlQuery\"] = params[\"query\"][\"sqlQuery\"].replace(\"{value}\", item[key].value);\n                    var res = await client.service(\"getDataset\").find(params);\n                    console.log(\"getDataset\", JSON.stringify(res));\n                    if (res.data) item[key] = res.data;\n                    else {\n                        //1. xml > dom\n                        var parser = new DOMParser();\n                        var xmlDoc = parser.parseFromString(xml, \"text/xml\");\n                        /*2.1. example\r\n            <Item><Description>Litter without roof Stefanplast Sprint Corner Plus, Blue, 40x56x h 14</Description><BuyersItemIdentification>8003507968158</BuyersItemIdentification><SellersItemIdentification>MF.06759</SellersItemIdentification><StandardItemIdentification>8003507968158</StandardItemIdentification><AdditionalItemIdentification>DeliveryDate:2023-10-03</AdditionalItemIdentification><AdditionalItemIdentification>LineStatus:valid</AdditionalItemIdentification><AdditionalItemIdentification>ClientConfirmationStatus:confirmed</AdditionalItemIdentification></Item>\r\n            */ //2.2. xpath: find node with item[key].value and coresponing sibling \"Description\"\n                        var xpath = `//*[contains(text(), '${item[key].value}')]`;\n                        console.log(\"xpath\", xpath, \"key\", key, \"value\", item[key].value, \"sql\", item[key].SQL);\n                        var nodes = xmlDoc.evaluate(xpath, xmlDoc, null, XPathResult.ANY_TYPE, null);\n                        console.log(\"nodes\", nodes);\n                        errors2.push({\n                            key: key,\n                            value: item[key].value,\n                            sql: item[key].SQL,\n                            xpath: xpath,\n                            nodes: nodes\n                        });\n                        try {\n                            var node = nodes.iterateNext();\n                            //2.3. get sibling \"Description\"\n                            var description = node.parentNode.getElementsByTagName(\"Description\")[0].innerHTML;\n                            //2.4. get sibling \"BuyersItemIdentification\"\n                            var BuyersItemIdentification = node.parentNode.getElementsByTagName(\"BuyersItemIdentification\")[0].innerHTML;\n                            //make error message fiendly\n                            errors.push(`Error in converting code ${item[key].value} to S1 value.\\nDescription: ${description},\\nBuyersItemIdentification: ${BuyersItemIdentification}`);\n                        } catch (err) {\n                            console.log(err);\n                            errors.push(`Error in converting code ${item[key].value} to S1 value.`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (errors.length > 0) alert(errors.join(\"\\n\\n\"));\n    if (errors2.length > 0) {\n        console.log(\"errors2\", errors2);\n        return {\n            success: false,\n            errors: errors2\n        };\n    }\n    //match mtrl with price and qty1 in an object in itelines array\n    var itelines = jsonOrder[\"DATA\"][\"ITELINES\"];\n    //select distinct fieldnames from itelines\n    var fieldNames = [];\n    itelines.forEach((item)=>{\n        for(var key in item)if (fieldNames.indexOf(key) == -1) fieldNames.push(key);\n    });\n    //create n distinct arrays for each fieldname\n    var arrays = {};\n    fieldNames.forEach((item)=>{\n        arrays[item] = [];\n    });\n    //add values to arrays\n    itelines.forEach((item)=>{\n        for(var key in item)arrays[key].push(item[key]);\n    });\n    //create itelines array\n    var itelines = [];\n    //create objects with fieldnames and values\n    for(var i = 0; i < arrays[fieldNames[0]].length; i++){\n        var obj = {};\n        for(var j = 0; j < fieldNames.length; j++)obj[fieldNames[j]] = arrays[fieldNames[j]][i];\n        itelines.push(obj);\n    }\n    //add itelines to jsonOrder['DATA']\n    jsonOrder[\"DATA\"][\"ITELINES\"] = itelines;\n    distinctS1TABLE1.forEach((item)=>{\n        //except itelines\n        if (item != \"ITELINES\") {\n            var obj = {};\n            jsonOrder[\"DATA\"][item].forEach((item2)=>{\n                for(var key in item2)obj[key] = item2[key];\n            });\n            jsonOrder[\"DATA\"][item] = [\n                obj\n            ];\n        }\n    });\n    //add series and trdr to SALDOC\n    jsonOrder[\"DATA\"][\"SALDOC\"][0][\"SERIES\"] = series;\n    //TRDR_RETAILER\n    localStorageRetailer = parseInt(localStorage.getItem(\"trdr_retailer\"));\n    jsonOrder[\"DATA\"][\"SALDOC\"][0][\"TRDR\"] = localStorageRetailer;\n    console.log(\"jsonOrder\", jsonOrder);\n    //send order to server\n    await sendOrderToServer(jsonOrder, xmlFilename, xmlDate, retailer);\n    return {\n        success: true\n    };\n}\nasync function sendOrderToServer(jsonOrder, xmlFilename, xmlDate, retailer) {\n    //1. url, username and password returnd from call to service CCCRETAILERSCLIENTS\n    //2. server new service: app.use('connectToS1', new connectToS1ServiceClass()) return connection token to use in axios call\n    //3. call setDocument service with jsonOrder and token\n    //1. url, username and password returnd from call to service CCCRETAILERSCLIENTS\n    await client.service(\"CCCRETAILERSCLIENTS\").find({\n        query: {\n            TRDR_CLIENT: 1\n        }\n    }).then(async (res)=>{\n        console.log(\"date logare\", res);\n        //2. server new service: app.use('connectToS1', new connectToS1ServiceClass()) return connection token to use in axios call\n        var url = res.data[0].WSURL;\n        var username = res.data[0].WSUSER;\n        var password = res.data[0].WSPASS;\n        await client.service(\"connectToS1\").find({\n            query: {\n                url: url,\n                username: username,\n                password: password\n            }\n        }).then(async (res)=>{\n            console.log(res);\n            console.log(\"s1 token\", res.token);\n            //replace jsonOrder clientID with token\n            jsonOrder[\"clientID\"] = res.token;\n            console.log(\"jsonOrder\", jsonOrder);\n            console.log(\"url\", url);\n            await client.service(\"setDocument\").create(jsonOrder).then((res)=>{\n                console.log(res);\n                if (res.success == true) {\n                    alert(\"Order sent to S1, order internal number: \" + res.id);\n                    //update CCCSFTPXML with order internal number as findoc\n                    client.service(\"CCCSFTPXML\").patch(null, {\n                        FINDOC: parseInt(res.id)\n                    }, {\n                        query: {\n                            XMLFILENAME: xmlFilename,\n                            XMLDATE: xmlDate,\n                            TRDR_RETAILER: retailer\n                        }\n                    }).then((res)=>{\n                        console.log(\"CCCSFTPXML patch\", res);\n                        //refresh xml table\n                        displayXmlDataForRetailer(retailer);\n                    });\n                } else alert(\"Error: \" + res.error);\n            });\n        });\n    });\n}\nfunction getValFromXML(xml, node) {\n    //Xpath\n    var dom = new DOMParser().parseFromString(xml, \"text/xml\");\n    var doc = dom.documentElement;\n    //console.log('getValFromXML', doc)\n    //node value by xpath\n    var iterator = dom.evaluate(node, doc, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\n    console.log(\"getValFromXML\", iterator);\n    var matchingNodes = [];\n    try {\n        let thisNode = iterator.iterateNext();\n        while(thisNode){\n            // console.log(thisNode.textContent)\n            matchingNodes.push(thisNode.textContent);\n            thisNode = iterator.iterateNext();\n        }\n    } catch (e) {\n        console.error(`Error: Document tree modified during iteration ${e}`);\n    }\n    return matchingNodes;\n}\nasync function fetchXMLFromRemoteServer() {\n    //1. localStorage.getItem('trdr_retailer')\n    //2. client.service('sftp').downloadXml({}, { query: { retailer: localStorage.getItem('trdr_retailer') } })\n    //3. client.service('sftp').storeXmlInDB({}, { query: { retailer: localStorage.getItem('trdr_retailer') } })\n    //4. displayXmlDataForRetailer(localStorage.getItem('trdr_retailer'))\"\n    //5. change document.getElementById('preluareComenziBtn') text according to stage of process\n    var retailer;\n    try {\n        retailer = parseInt(localStorage.getItem(\"trdr_retailer\"));\n    } catch (err) {\n        alert(\"Please select a retailer\");\n        console.log(\"Please select a retailer\");\n        return;\n    }\n    //change button text\n    document.getElementById(\"preluareComenziBtn\").innerHTML = \"Please wait...\";\n    //1. localStorage.getItem('trdr_retailer')\n    //2. client.service('sftp').downloadXml({}, { query: { retailer: localStorage.getItem('trdr_retailer') } })\n    await client.service(\"sftp\").downloadXml({}, {\n        query: {\n            retailer: retailer\n        }\n    }).then((res)=>{\n        console.log(\"downloadXml\", res);\n    });\n    //3. client.service('sftp').storeXmlInDB({}, { query: { retailer: localStorage.getItem('trdr_retailer') } })\n    await client.service(\"sftp\").storeXmlInDB({}, {\n        query: {\n            retailer: retailer\n        }\n    }).then((res)=>{\n        console.log(\"storeXmlInDB\", res);\n    });\n    //4. displayXmlDataForRetailer(localStorage.getItem('trdr_retailer'))\"\n    await displayXmlDataForRetailer(retailer);\n    //5. change document.getElementById('preluareComenziBtn') text according to stage of process\n    document.getElementById(\"preluareComenziBtn\").innerHTML = \"Preluare comenzi\";\n}\nasync function displayXmlDataForRetailer(retailer) {\n    //localStorage.getItem('trdr_retailer')\n    await getRetailerXMLData(retailer).then((data1)=>{\n        console.log(\"getRetailerXMLData\", data1);\n        //get the table body\n        const xmlTableBody = document.getElementById(\"xmlTableBody\");\n        //empty the table body\n        xmlTableBody.innerHTML = \"\";\n        //loop through the data\n        data1.data.forEach(async (xml)=>{\n            //create a new row\n            var row = xmlTableBody.insertRow();\n            //insert the cells\n            var humanDate = new Date(xml.XMLDATE).toLocaleString();\n            row.insertCell().innerHTML = humanDate;\n            //row.insertCell().innerHTML = xml.XMLFILENAME ? xml.XMLFILENAME : ''\n            var filenameCell = row.insertCell();\n            filenameCell.innerHTML = xml.XMLFILENAME ? xml.XMLFILENAME : \"\";\n            row.insertCell().innerHTML = '<textarea class=\"textarea is-small is-info\" rows=\"10\" cols=\"50\">' + xml.XMLDATA + \"</textarea>\";\n            //spellcheck=\"false\"\n            row.cells[2].spellcheck = false;\n            //row.insertCell().innerHTML = xml.JSONDATA\n            var parser = new DOMParser();\n            var xmlDoc = parser.parseFromString(xml.XMLDATA, \"text/xml\");\n            //parse xml to dom and find <AccountingCustomerParty> something <PartyName> node\n            var partyName = xmlDoc.getElementsByTagName(\"AccountingCustomerParty\")[0] ? xmlDoc.getElementsByTagName(\"AccountingCustomerParty\")[0].getElementsByTagName(\"PartyName\")[0] : null;\n            //get /Order/ID value\n            var orderId = getValFromXML(xml.XMLDATA, \"/Order/ID\")[0];\n            //if exists append to cell xmlfilename\n            if (orderId) filenameCell.innerHTML += '<br><span class=\"tag is-info is-light\">' + orderId + \"</span>\";\n            row.insertCell().innerHTML = partyName ? partyName.innerHTML : \"\";\n            //create the actions cell\n            var actionsCell = row.insertCell();\n            //create the buttons\n            var saveButton = document.createElement(\"button\");\n            saveButton.innerHTML = \"Save\";\n            saveButton.className = \"button is-small is-info ml-2\";\n            saveButton.onclick = function() {\n                //save the xml to file\n                var xmlBlob = new Blob([\n                    xml.XMLDATA\n                ], {\n                    type: \"text/xml\"\n                });\n                var xmlURL = window.URL.createObjectURL(xmlBlob);\n                var tempLink = document.createElement(\"a\");\n                tempLink.href = xmlURL;\n                tempLink.setAttribute(\"download\", xml.XMLFILENAME);\n                tempLink.click();\n            };\n            var copyButton = document.createElement(\"button\");\n            copyButton.innerHTML = \"Copy\";\n            copyButton.className = \"button is-small is-primary ml-2\";\n            copyButton.onclick = function() {\n                //copy the xml to clipboard\n                navigator.clipboard.writeText(xml.XMLDATA).then(function() {\n                    alert(\"copied\");\n                }, function(err) {\n                    console.error(\"Async: Could not copy text: \", err);\n                });\n            };\n            var deleteButton = document.createElement(\"button\");\n            deleteButton.innerHTML = \"Delete\";\n            deleteButton.className = \"button is-small is-danger ml-2\";\n            deleteButton.onclick = function() {\n                alert(\"delete\");\n            };\n            //send order\n            var sendOrderButton = document.createElement(\"button\");\n            sendOrderButton.innerHTML = xml.FINDOC ? \"Order sent\" : \"Send order\";\n            sendOrderButton.className = \"button is-small is-success ml-2\";\n            sendOrderButton.onclick = async function() {\n                //daca am findoc nu mai trimit\n                if (!xml.FINDOC) {\n                    sendOrderButton.innerHTML = \"Sending...\";\n                    var response = await sendOrder(xml.XMLDATA, xml.XMLFILENAME, xml.XMLDATE, retailer);\n                    if (response.success == false) {\n                        //show no of errors\n                        var errorMsg = \"\";\n                        errorMsg += \"Errors: \" + response.errors.length + \"\\n\\n\";\n                        for(var i = 0; i < response.errors.length; i++){\n                            var error = response.errors[i];\n                            //{ key: key, value: item[key].value, sql: item[key].SQL, xpath: xpath, nodes: nodes }\n                            //if error.sql contains \"from trdbranch\" then the title of error is Sucursala\n                            if (error.sql.indexOf(\"from trdbranch\") > -1) error.title = \"Sucursala\";\n                            //display title\n                            errorMsg += i + 1 + \".\" + error.title + \"\\n\";\n                            //count title characters and add dashes under it\n                            for(var j = 0; j < error.title.length; j++)errorMsg += \"-\";\n                            errorMsg += \"\\n\";\n                            errorMsg += `Error in converting ${error.key} code ${error.value} to S1 value.\\nSQL: ${error.sql},\\nNodes: ${error.nodes.iterateNext().parentNode.innerHTML}\\n\\n`;\n                            sendOrderButton.innerHTML = \"See errors\";\n                            //add text area with errors beneath the buttons\n                            var textarea = document.createElement(\"textarea\");\n                            textarea.rows = 10;\n                            textarea.cols = 50;\n                            textarea.innerHTML = errorMsg;\n                            actionsCell.appendChild(textarea);\n                            //no spellcheck\n                            textarea.spellcheck = false;\n                            //class\n                            textarea.className = \"textarea is-small is-danger\";\n                        }\n                        return;\n                    } else sendOrderButton.innerHTML = \"Order sent\";\n                } else alert(\"Already sent\");\n            };\n            //append the buttons to the actions cell\n            actionsCell.appendChild(saveButton);\n            actionsCell.appendChild(copyButton);\n            actionsCell.appendChild(deleteButton);\n            actionsCell.appendChild(sendOrderButton);\n            //add cell for findoc\n            var findoc = row.insertCell();\n            //add class for findoc\n            findoc.className = \"findoc\";\n            //if findoc is not null, add a green tick, else add a red cross; big icons\n            if (xml.FINDOC) findoc.innerHTML = '<i class=\"fas fa-xl fa-check-circle has-text-success\"></i><br><br>' + xml.FINDOC;\n            else {\n                //verify if order was sent but not confirmed\n                //get Order > ID value from XMLDATA and search in SALDOC table by processSqlAsDataset\n                var orderId = getValFromXML(xml.XMLDATA, \"/Order/ID\")[0];\n                console.log(\"orderId\", orderId);\n                //get order from SALDOC\n                var params = {};\n                params[\"query\"] = {};\n                params[\"query\"][\"sqlQuery\"] = `select findoc from findoc where sosource=1351 and trdr=${retailer} and num04='${orderId}'`;\n                var res = await client.service(\"getDataset\").find(params);\n                console.log(\"getDataset\", JSON.stringify(res));\n                if (res.data) {\n                    findoc.innerHTML = '<i class=\"fas fa-xl fa-check-circle has-text-success\"></i><br><br>' + res.data;\n                    //update CCCSFTPXML with order internal number as findoc\n                    client.service(\"CCCSFTPXML\").patch(null, {\n                        FINDOC: parseInt(res.data)\n                    }, {\n                        query: {\n                            XMLFILENAME: xml.XMLFILENAME,\n                            XMLDATE: xml.XMLDATE,\n                            TRDR_RETAILER: retailer\n                        }\n                    }).then((res)=>{\n                        console.log(\"CCCSFTPXML patch\", res);\n                    });\n                    //button text\n                    sendOrderButton.innerHTML = \"Order sent\";\n                } else {\n                    findoc.innerHTML = '<i class=\"fas fa-xl fa-times-circle has-text-danger\"></i>';\n                    //add a checkbox to actions cell\n                    var input = document.createElement(\"input\");\n                    input.type = \"checkbox\";\n                    input.name = xml.XMLFILENAME;\n                    input.id = xml.XMLFILENAME;\n                    input.className = \"checkbox is-small ml-2\";\n                    actionsCell.appendChild(input);\n                }\n            }\n        });\n    });\n}\nfunction copyFromAnotherDocument(id) {\n    alert(\"to be implemented\");\n}\nasync function fetchDocsFromS1WS(sosource, fprms, series) {\n    var trdr;\n    try {\n        trdr = parseInt(localStorage.getItem(\"trdr_retailer\"));\n    } catch (err) {\n        alert(\"Please select a retailer\");\n        console.log(\"Please select a retailer\");\n        return;\n    }\n    console.log(\"trdr\", trdr);\n    //Open tab facturi\n    document.getElementById(\"facturi_link\").click();\n    var daysOlder = document.getElementById(\"daysOlder\").value;\n    client.service(\"getS1SqlData\").find({\n        query: {\n            clientID: await client.service(\"connectToS1\").find().then((result)=>{\n                return result.token;\n            }),\n            appID: \"1001\",\n            SqlName: \"Retailers_Index_Docs\",\n            trdr: trdr,\n            sosource: sosource,\n            fprms: fprms,\n            series: series,\n            daysOlder: daysOlder\n        }\n    }).then(async (result)=>{\n        console.debug(JSON.stringify(result, null, 2));\n        displayDocsForRetailers(result, trdr, sosource, fprms, series);\n    });\n}\nfunction displayDocsForRetailers(result, trdr, sosource, fprms, series) {\n    /*\r\n      response like {\r\n  \"success\": true,\r\n  \"totalcount\": 1,\r\n  \"rows\": [\r\n    {\r\n      \"findoc\": \"1236204\"\r\n      \"trndate\": \"2023-09-20 00:00:00\",\r\n      \"fincode\": \"FAEX-PF-16625\",\r\n      \"sumamnt\": \"1888.45\"\r\n    }\r\n    ]\r\n  }\r\n      */ const tbody = document.getElementById(\"facturiTableBody\");\n    tbody.innerHTML = \"\";\n    if (result.success == false) {\n        var tr = tbody.insertRow();\n        var td = tr.insertCell();\n        td.innerHTML = \"Error: \" + result.error;\n        td.colSpan = 3;\n        td.style.textAlign = \"center\";\n        return;\n    }\n    if (result.totalcount == 0) {\n        var tr = tbody.insertRow();\n        var td = tr.insertCell();\n        td.innerHTML = \"No data\";\n        td.colSpan = 6;\n        td.style.textAlign = \"center\";\n        td.style.color = \"red\";\n        td.style.fontWeight = \"bold\";\n        td.style.fontSize = \"20px\";\n        return;\n    }\n    result.rows.forEach((row)=>{\n        var tr = tbody.insertRow();\n        var findoc = tr.insertCell();\n        findoc.innerHTML = row.findoc;\n        //hide findoc\n        findoc.style.display = \"none\";\n        var trndate = tr.insertCell();\n        //trndate.innerHTML = row.trndate\n        //check for ' 00:00:00'\n        if (row.trndate.indexOf(\" 00:00:00\") > -1) trndate.innerHTML = row.trndate.replace(\" 00:00:00\", \"\");\n        else trndate.innerHTML = row.trndate;\n        var fincode = tr.insertCell();\n        //add row.fincode and a empty text input all inlined; input text has unique id\n        fincode.innerHTML = row.fincode + '<input type=\"text\" id=\"' + row.fincode + '_postfix\" class=\"input is-small ml-2\" style=\"width: 100px;\">';\n        var sumamnt = tr.insertCell();\n        sumamnt.innerHTML = row.sumamnt;\n        //create actions cell\n        var actions = tr.insertCell();\n        //create xml button\n        var button2 = document.createElement(\"button\");\n        button2.className = \"button is-small is-info ml-2\";\n        button2.innerHTML = \"Create XML\";\n        button2.onclick = async function() {\n            /* var domObj = await createXML(row.findoc, trdr, sosource, fprms, series)\r\n      //wait for domObj\r\n      while (domObj == undefined) {\r\n        await new Promise((resolve) => setTimeout(resolve, 1000))\r\n      }\r\n      console.log('domObj', domObj)\r\n      //var domObj = await cheatGetXmlFromS1(row.findoc)\r\n      if (domObj.trimis == true) {\r\n        alert('Factura a fost deja trimisa')\r\n        return\r\n      }*/ const domObj = await cheatGetXmlFromS1(row.findoc);\n            /*\r\n      if (domObj.trimis == false) { */ //add cell and textarea\n            var textarea = document.createElement(\"textarea\");\n            textarea.className = \"textarea is-small\";\n            textarea.rows = 10;\n            textarea.cols = 50;\n            textarea.innerHTML = domObj.dom;\n            //no spellcheck\n            textarea.spellcheck = false;\n            //add cell\n            var td = tr.insertCell();\n            td.appendChild(textarea);\n        //}\n        };\n        actions.appendChild(button2);\n        //save xml button\n        var button3 = document.createElement(\"button\");\n        button3.className = \"button is-small is-primary ml-2\";\n        button3.innerHTML = \"Save XML\";\n        button3.onclick = async function() {\n            //const xml = await createXML(row.findoc, trdr, sosource, fprms, series)\n            const domObj = await cheatGetXmlFromS1(row.findoc);\n            if (domObj.trimis == true) {\n                alert(\"Factura a fost deja trimisa\");\n                return;\n            } else {\n                const xml = domObj.dom;\n                domObj.filename = getNewFilenamePostfix(domObj.filename, row);\n                //save the xml to file\n                var xmlBlob = new Blob([\n                    xml\n                ], {\n                    type: \"text/xml\"\n                });\n                var xmlURL = window.URL.createObjectURL(xmlBlob);\n                var tempLink = document.createElement(\"a\");\n                tempLink.href = xmlURL;\n                tempLink.setAttribute(\"download\", domObj.filename + \".xml\");\n                tempLink.click();\n            }\n        };\n        actions.appendChild(button3);\n        var button = document.createElement(\"button\");\n        button.className = \"button is-small is-success ml-2\";\n        //set id\n        button.id = row.findoc + \"_sendInvoice\";\n        button.innerHTML = \"Send Invoice\";\n        button.onclick = async function() {\n            sendAndMark(row, tr, button.id);\n        };\n        actions.appendChild(button);\n        //add cell trimis\n        var trimis = tr.insertCell();\n        //add class for trimis\n        trimis.className = \"trimis\";\n        //trimis.innerHTML = row.CCCXMLSendDate\n        if (row.CCCXMLSendDate) {\n            trimis.innerHTML = '<i class=\"fas fa-xl fa-check-circle has-text-success\"></i>  ' + row.CCCXMLSendDate;\n            //add link to trimis cell for resending invoice with overrideTrimis = true\n            var resend = document.createElement(\"a\");\n            resend.innerHTML = \"Resend\";\n            resend.className = \"button is-small is-danger ml-2\";\n            resend.onclick = async function() {\n                //ask if sure\n                var r = confirm(\"Resend invoice?\");\n                if (r == true) sendAndMark(row, tr, button.id, true);\n            };\n            trimis.appendChild(resend);\n        } else trimis.innerHTML = '<i class=\"fas fa-xl fa-times-circle has-text-danger\"></i>';\n    });\n}\nasync function sendAndMark(row, tr, elemId, overrideTrimis = false) {\n    //send invoice\n    var button = document.getElementById(elemId);\n    var domObj = await cheatGetXmlFromS1(row.findoc);\n    if (domObj.trimis == true && overrideTrimis == false) {\n        alert(\"Factura a fost deja trimisa\");\n        return;\n    }\n    //update btn caption to sending\n    //font awesome spinner\n    button.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i>Sending...';\n    //alter domObj filename with postfix\n    domObj.filename = getNewFilenamePostfix(domObj.filename, row);\n    await sendInvoice(row.findoc, domObj, overrideTrimis).then(async (response)=>{\n        //update btn caption to sent\n        button.innerHTML = \"Sent\";\n        console.log(\"response\", response);\n        var xml = response.xml;\n        var success = response.success;\n        if (success == true) {\n            //add cell and textarea\n            var textarea = document.createElement(\"textarea\");\n            textarea.className = \"textarea is-small\";\n            textarea.rows = 10;\n            textarea.cols = 50;\n            textarea.innerHTML = xml;\n            //no spellcheck\n            textarea.spellcheck = false;\n            //add cell\n            var td = tr.insertCell();\n            td.appendChild(textarea);\n        }\n        var body = {};\n        body[\"service\"] = \"setData\";\n        body[\"clientID\"] = await client.service(\"connectToS1\").find().then((result)=>{\n            return result.token;\n        });\n        body[\"appId\"] = \"1001\";\n        body[\"OBJECT\"] = \"SALDOC\";\n        body[\"FORM\"] = \"EFIntegrareRetailers\";\n        body[\"KEY\"] = row.findoc;\n        body[\"DATA\"] = {};\n        body[\"DATA\"][\"MTRDOC\"] = [\n            {\n                CCCXMLSendDate: new Date().toISOString().slice(0, 19).replace(\"T\", \" \")\n            }\n        ];\n        console.log(\"body\", body);\n        await client.service(\"setDocument\").create(body).then((res)=>{\n            console.log(res);\n        }).catch((err)=>{\n            console.log(err);\n        });\n    });\n    //update btn caption to sent\n    button.innerHTML = \"Sent Invoice\";\n    //find cell class=\"trimis\" in current row and add date now and green check\n    var trimis = tr.getElementsByClassName(\"trimis\")[0];\n    trimis.innerHTML = '<i class=\"fas fa-xl fa-check-circle has-text-success\"></i>  ' + new Date().toISOString().slice(0, 19).replace(\"T\", \" \");\n}\nasync function sendInvoice(findoc, domObj, overrideTrimis = false) {\n    var response = {\n        success: false,\n        xml: \"\"\n    };\n    var localStorageRetailer1;\n    try {\n        localStorageRetailer1 = parseInt(localStorage.getItem(\"trdr_retailer\"));\n    } catch (err) {\n        alert(\"Please select a retailer\");\n        return;\n    }\n    console.log(\"localStorageRetailer\", localStorageRetailer1);\n    if (domObj.trimis == false || overrideTrimis == true) {\n        //uploadXml service\n        var xml = domObj.dom;\n        var filename = domObj.filename;\n        await client.service(\"sftp\").uploadXml({\n            findoc: findoc,\n            xml: xml,\n            filename: filename\n        }, {\n            query: {\n                retailer: localStorageRetailer1\n            }\n        }).then((res)=>{\n            console.log(\"sftp uploadXml\", res);\n            if (res && Object.keys(res).length > 0 && Object.hasOwnProperty.call(res, \"success\")) {\n                if (res.success == true) {\n                    alert(\"Factura fost trimisa cu succes sub denumirea \" + res.filename + \" (\" + res.findoc + \")\");\n                    response = {\n                        success: true,\n                        xml: xml\n                    };\n                } else {\n                    alert(\"Eroare la trimiterea facturii\");\n                    response = {\n                        success: false,\n                        xml: xml\n                    };\n                }\n            } else {\n                alert(\"No response from server\");\n                response = {\n                    success: false,\n                    xml: xml\n                };\n            }\n        });\n    } else {\n        alert(\"Factura a fost deja trimisa\");\n        response = {\n            success: false,\n            xml: xml\n        };\n    }\n    return response;\n}\nfunction getNewFilenamePostfix(filename, row) {\n    var postfixElem = document.getElementById(row.fincode + \"_postfix\");\n    var posfixVal = \"\";\n    try {\n        posfixVal = postfixElem.value;\n        console.log(\"posfix\", posfixVal);\n    } catch (err) {\n        console.log(\"no postfix\");\n    }\n    //filename like INVOIC_17713_VAT_RO25190857.xml; split before_vat then add postfix then add _vat...\n    var split = filename.split(\"_\");\n    //get INVOIC_17713 then add _postfix then add _VAT...\n    var newFilename = posfixVal ? split[0] + \"_\" + split[1] + posfixVal + \"_\" + split[2] + \"_\" + split[3] : filename;\n    return newFilename;\n}\nasync function createLOCATEINFO(trdr, sosource, fprms, series) {\n    //scenariul 2\n    //get distinct S1TABLE1, for grouping data\n    //get xml mappings for trdr, sosource, fprms, series from cccdocumentes1mappings\n    //get CCCDOCUMENTES1MAPPINGS for trdr_retailer, source, fprms, series\n    var res = await client.service(\"CCCDOCUMENTES1MAPPINGS\").find({\n        query: {\n            TRDR_RETAILER: trdr,\n            SOSOURCE: sosource,\n            FPRMS: fprms,\n            SERIES: series\n        }\n    });\n    var CCCDOCUMENTES1MAPPINGS = res.data[0].CCCDOCUMENTES1MAPPINGS;\n    //get CCCXMLS1MAPPINGS for CCCDOCUMENTES1MAPPINGS\n    var res = await client.service(\"CCCXMLS1MAPPINGS\").find({\n        query: {\n            CCCDOCUMENTES1MAPPINGS: CCCDOCUMENTES1MAPPINGS\n        }\n    });\n    console.log(\"CCCXMLS1MAPPINGS\", res);\n    var CCCXMLS1MAPPINGS = res.data;\n    var distinctS1TABLE1 = [];\n    CCCXMLS1MAPPINGS.forEach((item)=>{\n        if (item.S1TABLE1 && distinctS1TABLE1.indexOf(item.S1TABLE1) == -1) distinctS1TABLE1.push(item.S1TABLE1);\n    });\n    var distinctS1TABLE2 = [];\n    CCCXMLS1MAPPINGS.forEach((item)=>{\n        if (item.S1TABLE2 && distinctS1TABLE2.indexOf(item.S1TABLE2) == -1) distinctS1TABLE2.push(item.S1TABLE2);\n    });\n    //create LOCATEINFO\n    var LOCATEINFO = \"\";\n    distinctS1TABLE1.forEach((item)=>{\n        var S1TABLE1 = item;\n        var S1FIELD1 = \"\";\n        CCCXMLS1MAPPINGS.forEach((item)=>{\n            if (item.S1TABLE1 && item.S1FIELD1 && item.S1TABLE1 == S1TABLE1) {\n                //if item.S1FIELD1 is not already in S1FIELD1\n                const split = S1FIELD1.split(\",\");\n                var wordExists = false;\n                split.every((item2)=>{\n                    if (item2 == item.S1FIELD1) {\n                        wordExists = true;\n                        return false;\n                    }\n                    return true;\n                });\n                if (!wordExists) S1FIELD1 += item.S1FIELD1 + \",\";\n            }\n        });\n        S1FIELD1 = S1FIELD1.slice(0, -1);\n        LOCATEINFO += S1TABLE1 + \":\" + S1FIELD1 + \";\";\n    });\n    distinctS1TABLE2.forEach((item)=>{\n        var S1TABLE2 = item;\n        var S1FIELD2 = \"\";\n        CCCXMLS1MAPPINGS.forEach((item)=>{\n            if (item.S1TABLE2 && item.S1FIELD2 && item.S1TABLE2 == S1TABLE2) {\n                //if item.S1FIELD2 is not already in S1FIELD2\n                const split = S1FIELD2.split(\",\");\n                var wordExists = false;\n                split.every((item2)=>{\n                    if (item2 == item.S1FIELD2) {\n                        wordExists = true;\n                        return false;\n                    }\n                    return true;\n                });\n                if (!wordExists) S1FIELD2 += item.S1FIELD2 + \",\";\n            }\n        });\n        S1FIELD2 = S1FIELD2.slice(0, -1);\n        //check if locateinfo contains S1TABLE2 already\n        var split = LOCATEINFO.split(\";\");\n        var tableExists = false;\n        split.every((item)=>{\n            if (item.split(\":\")[0] == S1TABLE2) {\n                tableExists = true;\n                return false;\n            }\n            return true;\n        });\n        if (!tableExists) LOCATEINFO += S1TABLE2 + \":\" + S1FIELD2 + \";\";\n        else {\n            //add S1FIELD2 to LOCATEINFO\n            split.every((item, index)=>{\n                if (item.split(\":\")[0] == S1TABLE2) {\n                    split[index] = item + \",\" + S1FIELD2;\n                    return false;\n                }\n                return true;\n            });\n            LOCATEINFO = split.join(\";\");\n        }\n    });\n    LOCATEINFO = LOCATEINFO.slice(0, -1);\n    return {\n        LOCATEINFO: LOCATEINFO,\n        CCCXMLS1MAPPINGS: CCCXMLS1MAPPINGS\n    };\n}\nfunction createXMLDOM(CCCXMLS1MAPPINGS) {\n    //create xml dom\n    var xmlDom = document.implementation.createDocument(\"\", \"\", null);\n    //root node <= first node from xml mappings split by '/'\n    var root = xmlDom.createElement(CCCXMLS1MAPPINGS[0].XMLNODE.split(\"/\")[0]);\n    xmlDom.appendChild(root);\n    //add xml elements to xml dom\n    CCCXMLS1MAPPINGS.forEach((item)=>{\n        var xmlNodes = item.XMLNODE.split(\"/\");\n        //add xml elements to xml dom\n        var root = xmlDom.documentElement //Order or...\n        ;\n        for(var i = 1; i < xmlNodes.length; i++){\n            var node;\n            //verify if node already exists\n            if (root.getElementsByTagName(xmlNodes[i]).length > 0) {\n                node = root.getElementsByTagName(xmlNodes[i])[0];\n                root.appendChild(node);\n                root = node;\n            } else try {\n                node = xmlDom.createElement(xmlNodes[i]);\n                //give it a dummy value in order to be able to append it; but just for the last node\n                if (i == xmlNodes.length - 1) node.textContent = \"dummy\";\n                root.appendChild(node);\n                root = node;\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    });\n    return xmlDom;\n}\nasync function populateXMLDOMScenariu2(xmlDom, CCCXMLS1MAPPINGS, S1ObjData) {\n    //scenariul 2\n    //match xml nodes with S1 Table 1 and S1 Field 1\n    const mainNode = \"DXInvoice\";\n    var x = xmlDom.getElementsByTagName(mainNode);\n    var obj = xml2json(x[0]);\n    console.log(\"xml2json\", obj);\n    //get node name for lines; select id \"delimitareLinieDocument\"\n    const linesNode = \"InvoiceLine\";\n    //cut obj in two parts: header and lines; lines are in an array (obj.OrderLine)\n    var header = {};\n    var lines = {};\n    for(var i in obj)if (i == linesNode) lines[i] = obj[i];\n    else header[i] = obj[i];\n    console.log(\"header\", header);\n    console.log(\"lines\", lines);\n    var headerArrayOfObjects = [];\n    var linesArrayOfObjects = [];\n    recurse(header, [], mainNode, null, null, headerArrayOfObjects);\n    recurse(lines, [], mainNode, null, null, linesArrayOfObjects);\n    await mapS1ObjDataToArrayOfObjects(xmlDom, S1ObjData, CCCXMLS1MAPPINGS, headerArrayOfObjects);\n    const S1Table1 = \"ITELINES\";\n    const S1ObjDataLines = S1ObjData[S1Table1];\n    //map S1ObjDataLines to linesArrayOfObjects through CCCXMLS1MAPPINGS\n    S1ObjDataLines.forEach(async (line)=>{\n        //create a new xml node for each line by cloning the first line node\n        //for the first line select the first lineNode\n        //for the next lines clone and append the first lineNode\n        if (S1ObjDataLines.indexOf(line) == 0) var node = xmlDom.getElementsByTagName(linesNode)[0];\n        else {\n            var node = xmlDom.getElementsByTagName(linesNode)[0].cloneNode(true);\n            //add node to xmlDom\n            xmlDom.getElementsByTagName(mainNode)[0].appendChild(node);\n        }\n        //map line to linesArrayOfObjects\n        await mapS1ObjDataToArrayOfObjects(xmlDom, {\n            ITELINES: [\n                line\n            ]\n        }, CCCXMLS1MAPPINGS, linesArrayOfObjects);\n    });\n//alert(xmlDom.getElementsByTagName(mainNode)[0].innerHTML)\n}\nasync function mapS1ObjDataToArrayOfObjects(xmlDom, S1ObjData, CCCXMLS1MAPPINGS, arrayOfObjects) {\n    console.log({\n        S1ObjData,\n        CCCXMLS1MAPPINGS,\n        arrayOfObjects\n    });\n    var arrays = [];\n    arrayOfObjects.forEach(async (item)=>{\n        //flatten item xmlPath so as to compare it with CCCXMLS1MAPPINGS\n        var xmlPath = item.parent && item.parent.length > 0 ? item.root + \"/\" + item.parent.join(\"/\") + \"/\" + item.i : item.root + \"/\" + item.i;\n        console.log(\"xmlPath\", xmlPath);\n        CCCXMLS1MAPPINGS.forEach(async (item2)=>{\n            if (item2.XMLNODE == xmlPath) {\n                console.log(\"pair found\", item2);\n                console.log(\"S1ObjData[item2.S1TABLE1]\", S1ObjData[item2.S1TABLE1]);\n                //set node value\n                if (S1ObjData[item2.S1TABLE1]) {\n                    if (S1ObjData[item2.S1TABLE1].length > 1) arrays.push({\n                        mapping: item2,\n                        iterations: S1ObjData[item2.S1TABLE1].length,\n                        S1Data: S1ObjData[item2.S1TABLE1]\n                    });\n                    else {\n                        var node = findNodeInXMLDOM(xmlDom, item2.XMLNODE);\n                        //if found, set node value else create node and set value\n                        if (node) {\n                            var value = S1ObjData[item2.S1TABLE1][0][item2.S1FIELD1];\n                            console.log(\"node\", node);\n                            console.log(\"S1ObjData[item2.S1TABLE1]\", S1ObjData[item2.S1TABLE1]);\n                            //check for 123|RON and get RON\n                            if (value && value.indexOf(\"|\") > -1) value = value.split(\"|\")[1];\n                            //check for 2023-09-20 00:00:00 and get 2023-09-20\n                            //only for strings resambling dates\n                            if (value && value.indexOf(\"-\") > -1 && value.indexOf(\":\") > -1) value = value.split(\" \")[0];\n                            node.textContent = value;\n                        } else {\n                            //create node and set value\n                            console.log(\"create node and set value\");\n                            var node = xmlDom.createElement(item2.XMLNODE.split(\"/\")[item2.XMLNODE.split(\"/\").length - 1]);\n                            node.textContent = S1ObjData[item2.S1TABLE1][0][item2.S1FIELD1];\n                            findNodeInXMLDOM(xmlDom, item2.XMLNODE).parentNode.appendChild(node);\n                        }\n                    }\n                } else if (item2.SQL) {\n                    console.log(\"has SQL\", item2.SQL);\n                    //set node value\n                    //if sql SELECT PERCNT FROM VAT WHERE VAT={S1Table1.S1Field1} or SELECT PERCNT FROM VAT WHERE VAT={S1Table1.S1Field1} and VAT2={S1Table1.S1Field2}\n                    //then replace {S1Table1.S1Field1} with S1ObjData[S1Table1][0][S1Field1]\n                    //and {S1Table1.S1Field2} with S1ObjData[S1Table1][0][S1Field2]\n                    //then execute the query and set node value\n                    //else execute the query and set node value\n                    //set params' query\n                    var params = {};\n                    params[\"query\"] = {};\n                    //replace {S1Table1.S1Field1} with S1ObjData[S1Table1][0][S1Field1]\n                    //and {S1Table1.S1Field2} with S1ObjData[S1Table1][0][S1Field2]\n                    //parse and replace {s1table1.s1field1} with S1ObjData[item.S1TABLE1][0][item.S1FIELD1] or {s1table1.s1field2} with S1ObjData[item.S1TABLE2][0][item.S1FIELD2]\n                    var sqlQuery = item2.SQL;\n                    var regex = /{([^}]+)}/g;\n                    var matches = sqlQuery.match(regex);\n                    console.log(\"matches\", matches);\n                    if (matches) matches.forEach((match)=>{\n                        try {\n                            var s1table = match.split(\".\")[0].replace(\"{\", \"\");\n                            var s1field = match.split(\".\")[1].replace(\"}\", \"\");\n                            //upper case\n                            s1table = s1table.toUpperCase();\n                            s1field = s1field.toUpperCase();\n                            console.log(\"s1table\", s1table);\n                            console.log(\"s1field\", s1field);\n                            console.log(\"match\", match);\n                            console.log(\"S1ObjData[s1table]\", S1ObjData[item2[s1table]]);\n                            console.log(\"S1ObjData[s1table][0]\", S1ObjData[item2[s1table]][0]);\n                            console.log(\"S1ObjData[s1table][0][s1field]\", S1ObjData[item2[s1table]][0][item2[s1field]]);\n                            sqlQuery = sqlQuery.replace(match, S1ObjData[item2[s1table]][0][item2[s1field]]);\n                        } catch (err) {\n                            console.log(sqlQuery, err);\n                        }\n                    });\n                    console.log(\"sqlQuery\", sqlQuery);\n                    params[\"query\"][\"sqlQuery\"] = sqlQuery;\n                    var node = findNodeInXMLDOM(xmlDom, item2.XMLNODE);\n                    //if found, set node value else create node and set value\n                    if (node) {\n                        var res = await client.service(\"getDataset\").find(params);\n                        console.log(\"getDataset for \" + item2.XMLNODE, res);\n                        if (res.data) node.textContent = res.data;\n                    } else {\n                        //create node and set value\n                        console.log(\"create node and set value\");\n                        var node = xmlDom.createElement(item2.XMLNODE.split(\"/\")[item2.XMLNODE.split(\"/\").length - 1]);\n                        var res = await client.service(\"getDataset\").find(params);\n                        console.log(\"getDataset for \" + item2.XMLNODE, res.data);\n                        if (res.data) node.textContent = res.data;\n                        findNodeInXMLDOM(xmlDom, item2.XMLNODE).parentNode.appendChild(node);\n                    }\n                }\n            }\n        });\n    });\n    if (arrays.length > 0) {\n        console.log(\"arrays\", arrays);\n        //zoom out from array to whole sequence\n        var sequences = [];\n        var lastPath = \"\";\n        arrays.forEach((obj)=>{\n            //find in CCCXMLS1MAPPINGS the all nodes sharing the shortest path\n            var xmlNodes = obj.mapping.XMLNODE.split(\"/\");\n            path = xmlNodes.slice(0, xmlNodes.length - 1).join(\"/\");\n            if (path != lastPath) {\n                console.log(\"path\", path);\n                var alike = [];\n                CCCXMLS1MAPPINGS.forEach((mapping)=>{\n                    if (mapping.XMLNODE.includes(path)) alike.push(mapping);\n                });\n                sequences.push({\n                    path: path,\n                    mappings: alike,\n                    iterations: obj.iterations,\n                    S1Data: obj.S1Data\n                });\n                lastPath = path;\n            }\n        });\n        console.log(\"sequences\", sequences);\n        //map sequences to S1ObjData through CCCXMLS1MAPPINGS\n        //map sequences to xmlDom\n        //for each sequences[i].path, loop sequences[i].iterations times and find in S1ObjData the corresponding values\n        //then add them to xmlDom\n        sequences.forEach((sequence)=>{\n            var seqPath = sequence.path;\n            var seqMappings = sequence.mappings;\n            var seqIterations = sequence.iterations;\n            var seqData = sequence.S1Data;\n            var refNode = findNodeInXMLDOM(xmlDom, seqPath);\n            console.log(\"refNode\", refNode);\n            var newChild = refNode.cloneNode(true);\n            var sequenceNewNodes = [];\n            seqData.forEach((item)=>{\n                seqMappings.forEach((mapping)=>{\n                    console.log(\"mapping\", mapping);\n                    console.log(\"item\", item);\n                    console.log(\"seqPath\", seqPath);\n                    //substract seqPath from mapping.XMLNODE\n                    var partialPath = mapping.XMLNODE.replace(seqPath + \"/\", \"\");\n                    console.log(\"partialPath\", partialPath);\n                    splited = partialPath.split(\"/\");\n                    console.log(\"splited\", splited);\n                    console.log(\"splited root\", partialPath.split(\"/\")[0]);\n                    var rootExists = findRootInSequence([\n                        ...sequenceNewNodes\n                    ], partialPath.split(\"/\")[0]);\n                    console.log(\"rootExists\", rootExists);\n                    if (!rootExists) {\n                        //create new node\n                        var newNode = xmlDom.createElement(partialPath.split(\"/\")[0]);\n                        //add node to sequenceNewNodes\n                        sequenceNewNodes.push(newNode);\n                    } else {\n                        //find node in sequenceNewNodes\n                        var found = false;\n                        sequenceNewNodes.every((item2)=>{\n                            if (item2.nodeName == partialPath.split(\"/\")[0]) {\n                                found = true;\n                                console.log(\"found\", item2.nodeName);\n                                //adauga restul nodurilor\n                                var node = item2;\n                                for(var i = 1; i < splited.length; i++)//daca nu exista nodul, creeaza-l\n                                if (node.getElementsByTagName(splited[i]).length == 0) {\n                                    var newNode = xmlDom.createElement(splited[i]);\n                                    node.appendChild(newNode);\n                                    node = newNode;\n                                }\n                                console.log(\"nod ierarhic\", node);\n                                return false;\n                            }\n                            return true;\n                        });\n                    }\n                });\n                console.log(\"sequenceNewNodes\", sequenceNewNodes);\n                sequenceNewNodes.forEach((item)=>{\n                    console.log(\"itemToBeAppended\", item);\n                    newChild.appendChild(item);\n                });\n                console.log(\"newChild\", newChild);\n                refNode.parentNode.insertBefore(newChild, refNode.nextSibling);\n                newChild = null;\n                newChild = refNode.cloneNode(true);\n                sequenceNewNodes = [];\n                sequenceNewNodes.push(newChild);\n                console.log(\"sequenceNewNodes\", sequenceNewNodes);\n            });\n        });\n    }\n}\nfunction findRootInSequence(seqArr, nodeName) {\n    console.log(\"seqArr\", seqArr);\n    console.log(\"nodeName\", nodeName);\n    var found = false;\n    seqArr.every((item)=>{\n        if (item.nodeName == nodeName) {\n            found = true;\n            return false;\n        }\n        return true;\n    });\n    return found;\n}\nfunction findNodeInXMLDOM(xmlDom, xmlNode) {\n    var xmlNodes = xmlNode.split(\"/\");\n    var root = xmlDom.documentElement;\n    //find node in xmlDom, but do not change ierachy of nodes\n    for(var i = 0; i < xmlNodes.length; i++){\n        var node;\n        if (root.getElementsByTagName(xmlNodes[i]).length > 0) {\n            //first found node\n            //node = root.getElementsByTagName(xmlNodes[i])[0]\n            //last found node\n            node = root.getElementsByTagName(xmlNodes[i])[root.getElementsByTagName(xmlNodes[i]).length - 1];\n            root.appendChild(node);\n            root = node;\n        }\n    }\n    return node;\n}\nasync function populateXMLDOMScenariu1(xmlDom, CCCXMLS1MAPPINGS) {\n    //scenariul 1\n    CCCXMLS1MAPPINGS.forEach(async (item)=>{\n        if (item.SQL && !item.SQL.includes(\"{\")) {\n            //set node value\n            var node = findNodeInXMLDOM(xmlDom, item.XMLNODE);\n            var res = await client.service(\"getDataset\").find({\n                query: {\n                    sqlQuery: item.SQL\n                }\n            });\n            console.log(\"getDataset\", res);\n            if (res.data) node.textContent = res.data;\n        }\n    });\n}\nasync function populateXMLDOMScenariu3(xmlDom, CCCXMLS1MAPPINGS, S1ObjData) {\n    //scenariul 3\n    CCCXMLS1MAPPINGS.forEach(async (item)=>{\n        if (item.SQL && item.SQL.includes(\"{\")) {\n            //set node value\n            var node = findNodeInXMLDOM(xmlDom, item.XMLNODE);\n            //parse and replace {s1table1.s1field1} with S1ObjData[item.S1TABLE1][0][item.S1FIELD1] or {s1table1.s1field2} with S1ObjData[item.S1TABLE2][0][item.S1FIELD2]\n            var sqlQuery = item.SQL;\n            var regex = /{([^}]+)}/g;\n            var matches = sqlQuery.match(regex);\n            console.log(\"matches\", matches);\n            matches.forEach(async (match)=>{\n                var s1table = match.split(\".\")[0].replace(\"{\", \"\");\n                var s1field = match.split(\".\")[1].replace(\"}\", \"\");\n                //upper case\n                s1table = s1table.toUpperCase();\n                s1field = s1field.toUpperCase();\n                console.log(\"s1table\", s1table);\n                console.log(\"s1field\", s1field);\n                console.log(\"match\", match);\n                try {\n                    console.log(\"item[s1table]]\", item[s1table]);\n                    console.log(\"item[s1field]]\", item[s1field]);\n                    try {\n                        var val = S1ObjData[item[s1table]][0][item[s1field]];\n                        //val could be 1|Buc\n                        //if val is 1|Buc, then val = 1\n                        if (val && val.indexOf(\"|\") > -1) val = val.split(\"|\")[0];\n                        sqlQuery = sqlQuery.replace(match, val);\n                        console.log(\"actual value\", val);\n                    } catch (err) {\n                        console.log(err);\n                        console.log(S1ObjData[item[s1table]]);\n                    }\n                    console.log(\"sqlQuery\", sqlQuery);\n                    var res = await client.service(\"getDataset\").find({\n                        query: {\n                            sqlQuery: sqlQuery\n                        }\n                    });\n                    console.log(\"getDataset\", res);\n                    if (res.data) node.textContent = res.data;\n                } catch (err) {\n                    console.log(err);\n                }\n            });\n        }\n    });\n}\nasync function createXML(findoc, trdr, sosource, fprms, series) {\n    var ret = await createLOCATEINFO(trdr, sosource, fprms, series);\n    var LOCATEINFO = ret.LOCATEINFO;\n    var CCCXMLS1MAPPINGS = ret.CCCXMLS1MAPPINGS;\n    //sort CCCXMLS1MAPPINGS by XMLORDER\n    CCCXMLS1MAPPINGS.sort((a, b)=>{\n        return a.XMLORDER - b.XMLORDER;\n    });\n    console.log(\"LOCATEINFO\", LOCATEINFO);\n    console.log(\"CCCXMLS1MAPPINGS\", CCCXMLS1MAPPINGS);\n    //get data from S1; LOCATEINFO  results from reading data from xml mappings\n    var S1Obj = await client.service(\"getS1ObjData\").find({\n        query: {\n            KEY: findoc,\n            clientID: await client.service(\"connectToS1\").find().then((result)=>{\n                return result.token;\n            }),\n            appID: \"1001\",\n            OBJECT: \"SALDOC\",\n            FORM: \"EFIntegrareRetailers\",\n            LOCATEINFO: LOCATEINFO\n        }\n    });\n    console.log(\"S1ObjData(LocateInfo)\", S1Obj);\n    const S1ObjData = S1Obj.data;\n    var header = \"DXInvoice/Invoice/\";\n    var lines = \"DXInvoice/InvoiceLine/\";\n    var CCCXMLS1MAPPINGS_HEADER = [];\n    var CCCXMLS1MAPPINGS_LINES = [];\n    CCCXMLS1MAPPINGS.forEach((item)=>{\n        if (item.XMLNODE.includes(header)) CCCXMLS1MAPPINGS_HEADER.push(item);\n        if (item.XMLNODE.includes(lines)) CCCXMLS1MAPPINGS_LINES.push(item);\n    });\n    console.log(\"CCCXMLS1MAPPINGS_HEADER\", CCCXMLS1MAPPINGS_HEADER);\n    console.log(\"CCCXMLS1MAPPINGS_LINES\", CCCXMLS1MAPPINGS_LINES);\n    //header\n    var _HEADER = await joinThings(CCCXMLS1MAPPINGS_HEADER, S1ObjData);\n    //create xml dom\n    var xmlDomHeader = document.implementation.createDocument(\"\", \"\", null);\n    var root = \"DXInvoice\";\n    var root = xmlDomHeader.createElement(root);\n    xmlDomHeader.appendChild(root);\n    xmlDomHeader = createDomPart(_HEADER, xmlDomHeader);\n    console.log(\"xmlDomHeader\", xmlDomHeader);\n    //lines\n    //S1ObjData but without ITELINES\n    var S1ObjDataNoITELINES = {};\n    Object.keys(S1ObjData).forEach((key)=>{\n        if (key != \"ITELINES\") S1ObjDataNoITELINES[key] = S1ObjData[key];\n    });\n    var S1ITELINES = S1ObjData[\"ITELINES\"];\n    var xmlDomLines = [];\n    S1ITELINES.forEach(async (line)=>{\n        var currLine = {\n            ITELINES: [\n                line\n            ]\n        };\n        //add currLine to S1ObjDataNoITELINES\n        var S1ObjDataNoITELINES_currLine = Object.assign({}, S1ObjDataNoITELINES, currLine);\n        console.log(\"currLine\", currLine);\n        joinThings(CCCXMLS1MAPPINGS_LINES, S1ObjDataNoITELINES_currLine).then((part)=>{\n            console.log(\"part\", part);\n            var xmlDomLine = document.implementation.createDocument(\"\", \"\", null);\n            var root = \"DXInvoice\";\n            var root = xmlDomLine.createElement(root);\n            xmlDomLine.appendChild(root);\n            xmlDomLine = createDomPart(part, xmlDomLine);\n            xmlDomLines.push(xmlDomLine);\n        });\n    });\n    //wait until xmlDomLines is populated, meaning xmlDomLines.length == S1ITELINES.length\n    while(xmlDomLines.length < S1ITELINES.length)await new Promise((resolve)=>setTimeout(resolve, 100));\n    console.log(\"xmlDomLines\", xmlDomLines);\n    //take xmlDomHeader and xmlDomLines and merge them into one xmlDom\n    var xmlDom = xmlDomHeader;\n    xmlDomLines.forEach((item)=>{\n        var xmlNodes = item.documentElement.childNodes;\n        for(var i = 0; i < xmlNodes.length; i++)xmlDom.documentElement.appendChild(xmlNodes[i]);\n    });\n    console.log(\"xmlDom\", xmlDom);\n    //return DXInvoice from document\n    var xml = xmlDom.getElementsByTagName(\"DXInvoice\")[0].outerHTML;\n    return {\n        dom: xml,\n        trimis: false\n    };\n    async function joinThings(CCCXMLS1MAPPINGS_PART, S1ObjData) {\n        var _PART = [];\n        CCCXMLS1MAPPINGS_PART.forEach(async (item)=>{\n            item.SQL = item.SQL.trim();\n            var o = {};\n            o.xmlNode = item.XMLNODE;\n            o.table1 = item.S1TABLE1 || null;\n            o.field1 = item.S1FIELD1 || null;\n            if (item.S1TABLE1 && item.S1FIELD1) {\n                possibleArray = S1ObjData[item.S1TABLE1];\n                if (possibleArray && possibleArray.length == 1) o.value1 = S1ObjData[item.S1TABLE1][0][item.S1FIELD1] || \"n/a\";\n                else if (possibleArray && possibleArray.length > 1) {\n                    o.value1 = [];\n                    possibleArray.forEach((item2)=>{\n                        o.value1.push(item2[item.S1FIELD1]);\n                    });\n                } else o.value1 = \"n/a\";\n                if (o.value1 && o.value1.indexOf(\"|\") > -1) o.value1 = o.value1.split(\"|\")[0];\n                //if o.value1 is an arrat then check every item for | and split it\n                if (Array.isArray(o.value1)) o.value1.forEach((item2, index)=>{\n                    if (item2.indexOf(\"|\") > -1) o.value1[index] = item2.split(\"|\")[0];\n                });\n                o.value = o.value1;\n            } else {\n                o.value1 = \"n/a\";\n                o.value = \"n/a\";\n            }\n            if (item.SQL == \"\") ;\n            else {\n                item.SQL = item.SQL.replace(/\\n/g, \" \").replace(/\\r/g, \" \");\n                o.table2 = item.S1TABLE2 || null;\n                o.field2 = item.S1FIELD2 || null;\n                o.value2 = item.S1TABLE2 && item.S1FIELD2 ? S1ObjData[item.S1TABLE2][0][item.S1FIELD2] : \"n/a\";\n                o.sql = item.SQL;\n                var sqlQuery = item.SQL;\n                if (o.value2 && o.value2.indexOf(\"|\") > -1) o.value2 = o.value2.split(\"|\")[0];\n                if (item.SQL.includes(\"{S1Table1.S1Field1}\")) sqlQuery = sqlQuery.replace(\"{S1Table1.S1Field1}\", o.value1);\n                if (item.SQL.includes(\"{S1Table2.S1Field2}\")) sqlQuery = sqlQuery.replace(\"{S1Table2.S1Field2}\", o.value2);\n                o.sqlQuery = sqlQuery;\n                //value = await client.service('getDataset').find(params)\n                var params = {};\n                params[\"query\"] = {};\n                params[\"query\"][\"sqlQuery\"] = sqlQuery;\n                var res = await client.service(\"getDataset\").find(params);\n                console.log(\"sqlQuery\", sqlQuery, \"queryResponse\", res);\n                if (res.data) {\n                    //for xml path ('') [1,2,3]\n                    if (res.data.indexOf(\"[\") > -1) o.value = JSON.parse(res.data);\n                    else o.value = res.data;\n                }\n            }\n            _PART.push(o);\n        });\n        //wait until _HEADER is populated, meaning _HEADER.length == CCCXMLS1MAPPINGS_HEADER.length\n        while(_PART.length < CCCXMLS1MAPPINGS_PART.length)await new Promise((resolve)=>setTimeout(resolve, 100));\n        //sort _HEADER by xmlNode alphabetically\n        /* _PART.sort((a, b) => {\r\n      var txtA = a.xmlNode.toUpperCase()\r\n      var txtB = b.xmlNode.toUpperCase()\r\n      return txtA < txtB ? -1 : txtA > txtB ? 1 : 0\r\n    }) */ return _PART;\n    }\n    function createDomPart(_PART, xmlDom) {\n        _PART.forEach((item)=>{\n            console.log({\n                xml: item.xmlNode,\n                value: item.value\n            });\n            var xmlNodes = item.xmlNode.split(\"/\");\n            //add xml elements to xml dom\n            var root = xmlDom.documentElement;\n            for(var i = 1; i < xmlNodes.length; i++){\n                var node;\n                var existingElements = root.getElementsByTagName(xmlNodes[i]);\n                //verify if node already exists\n                if (existingElements.length > 0) {\n                    node = existingElements[existingElements.length - 1];\n                    root.appendChild(node);\n                    root = node;\n                } else try {\n                    node = xmlDom.createElement(xmlNodes[i]);\n                    //give it a dummy value in order to be able to append it; but just for the last node\n                    if (i == xmlNodes.length - 1) node.textContent = item.value;\n                    root.appendChild(node);\n                    root = node;\n                } catch (err) {\n                    console.log(err);\n                }\n            }\n        });\n        //find in _HEADER item.value as array\n        var whatToReplace = [];\n        _PART.forEach((item)=>{\n            if (Array.isArray(item.value)) {\n                var parentName = item.xmlNode.split(\"/\")[item.xmlNode.split(\"/\").length - 2];\n                //copy parent node with all its children item.value times with different values\n                whatToReplace.push({\n                    parent: xmlDom.getElementsByTagName(parentName)[0],\n                    childToChange: item.xmlNode.split(\"/\")[item.xmlNode.split(\"/\").length - 1],\n                    value: item.value\n                });\n            }\n        });\n        console.log(\"whatToReplace\", whatToReplace);\n        //regroup children of whatToReplace by parent; eg: whatToReplace.parent <> array of childToChange/value with said parent\n        var distinctParents = [];\n        whatToReplace.forEach((item)=>{\n            if (distinctParents.indexOf(item.parent) == -1) distinctParents.push(item.parent);\n        });\n        var groupedByParent = [];\n        distinctParents.forEach((parent)=>{\n            whatToReplace.forEach((item)=>{\n                if (item.parent == parent) {\n                    //find in groupedByParent if parent exists\n                    var found = false;\n                    groupedByParent.every((item2)=>{\n                        if (item2.parent == parent) {\n                            found = true;\n                            item2.children.push({\n                                childToChange: item.childToChange,\n                                value: item.value\n                            });\n                            return false;\n                        }\n                        return true;\n                    });\n                    if (!found) groupedByParent.push({\n                        parent: parent,\n                        children: [\n                            {\n                                childToChange: item.childToChange,\n                                value: item.value\n                            }\n                        ]\n                    });\n                }\n            });\n        });\n        console.log(\"groupedByParent\", groupedByParent);\n        //for each distinct parent, clone it by the first childToChange/value\n        //then change the values of the childToChange nodes\n        groupedByParent.forEach((item)=>{\n            var parent = item.parent;\n            var times = item.children[0].value.length;\n            console.log(\"times\", times);\n            //clone parent times times but keep the original parent, so I don't have to delete it later\n            for(var i = 1; i < times; i++){\n                var clone = parent.cloneNode(true);\n                parent.parentNode.appendChild(clone);\n            }\n            var clones = [];\n            //get cloned elements plus the original one\n            clones = xmlDom.getElementsByTagName(parent.nodeName);\n            console.log(\"clones\", clones);\n            var arrClones = Array.from(clones);\n            arrClones.forEach((clone, index)=>{\n                //change childToChange/value\n                item.children.forEach((item2)=>{\n                    var childToChange = item2.childToChange;\n                    var value = item2.value[index];\n                    console.log(\"childToChange\", childToChange);\n                    console.log(\"value\", value);\n                    clone.getElementsByTagName(childToChange)[0].textContent = value;\n                });\n            });\n        });\n        //parse xmlDom thru DOMParser\n        var xmlString = new XMLSerializer().serializeToString(xmlDom);\n        var parser = new DOMParser();\n        var xmlDomm = parser.parseFromString(xmlString, \"text/xml\");\n        return xmlDomm;\n    }\n// var xmlDom = createXMLDOM(CCCXMLS1MAPPINGS)\n// console.log('xmlDom', xmlDom)\n// await populateXMLDOMScenariu2(xmlDom, CCCXMLS1MAPPINGS, S1ObjData)\n// //await populateXMLDOMScenariu1(xmlDom, CCCXMLS1MAPPINGS)\n// //await populateXMLDOMScenariu3(xmlDom, CCCXMLS1MAPPINGS, S1ObjData)\n// console.log('xmlDom', xmlDom)\n// //return xml innerHTML\n// return xmlDom.getElementsByTagName('DXInvoice')[0].innerHTML\n}\nasync function cheatGetXmlFromS1(findoc) {\n    var dom = await client.service(\"getInvoiceDom\").find({\n        query: {\n            clientID: await client.service(\"connectToS1\").find().then((result)=>{\n                return result.token;\n            }),\n            appID: \"1001\",\n            findoc: findoc\n        }\n    });\n    console.log(\"dom\", dom);\n    return dom;\n}\nfunction toggleComenziNetrimise() {\n    var comenziTrimise = document.getElementById(\"comenziTrimise\");\n    var table = document.getElementById(\"xmlTableBody\");\n    if (comenziTrimise.checked) {\n        //hide rows with <i class=\"fas fa-xl fa-check-circle has-text-success\"></i> or all\n        var rows = table.getElementsByTagName(\"tr\");\n        for(var i = 0; i < rows.length; i++)if (rows[i].innerHTML.indexOf(\"fa-check-circle\") > -1) rows[i].style.display = \"none\";\n    } else {\n        //show all rows\n        var rows = table.getElementsByTagName(\"tr\");\n        for(var i = 0; i < rows.length; i++)rows[i].style.display = \"\";\n    }\n}\nfunction mandatoryFields() {\n    //get file from input id=\"xsdFile\"\n    var xsdFile = document.getElementById(\"xsdFile\").files[0];\n    console.log(\"xsdFile\", xsdFile);\n    //find elements without minOccurs=\"0\"\n    var mandatoryFields = [];\n    var nonMandatoryFields = [];\n    var reader = new FileReader();\n    reader.readAsText(xsdFile);\n    reader.onload = function(e) {\n        var xsd = e.target.result;\n        var parser = new DOMParser();\n        var xsdDom = parser.parseFromString(xsd, \"text/xml\");\n        //find and remove element name='DXInvoice' from xsdDom\n        var dxInvoice = xsdDom.getElementsByTagName(\"xs:element\")[0];\n        dxInvoice.parentNode.removeChild(dxInvoice);\n        var elements = xsdDom.getElementsByTagName(\"xs:element\");\n        console.log(\"numar elemente\", elements.length);\n        for(var i = 0; i < elements.length; i++){\n            var element = elements[i];\n            //find parents\n            var parents = [];\n            var parent = element.parentNode;\n            while(parent.nodeName != \"xs:schema\"){\n                parents.push(parent);\n                parent = parent.parentNode;\n            }\n            var path1 = \"\";\n            for(var j = parents.length - 1; j >= 0; j--){\n                var parentName = parents[j].getAttribute(\"name\");\n                if (parentName) path1 += parentName + \"/\";\n            }\n            path1 += element.getAttribute(\"name\");\n            path1 = path1.replace(\"InvoiceType\", \"DXInvoice/Invoice\");\n            path1 = path1.replace(\"InvoiceLineType\", \"DXInvoice/InvoiceLine\");\n            recursiveSearchInElement(element, path1);\n            function recursiveSearchInElement(element, path1) {\n                /*\r\n      <xs:annotation>\r\n\t\t\t\t\t<xs:documentation>Invoice Currency</xs:documentation>\r\n\t\t\t\t</xs:annotation>\r\n      */ //get documentation value if exists\n                var documentationValue = \"\";\n                var annotation = element.getElementsByTagName(\"xs:annotation\")[0];\n                if (annotation) {\n                    var documentation = annotation.getElementsByTagName(\"xs:documentation\")[0];\n                    if (documentation) documentationValue = documentation.innerHTML;\n                }\n                if (element.hasAttribute(\"minOccurs\") && element.getAttribute(\"minOccurs\") == \"0\") nonMandatoryFields.push({\n                    name: element.getAttribute(\"name\"),\n                    type: element.getAttribute(\"type\"),\n                    path: path1,\n                    documentation: documentationValue,\n                    orderNumber: i + 1\n                });\n                else {\n                    //nu are minOccurs deci este obligatoriu, dar daca este complexType nu inregistrez, vor fi inregistrate elementele care il compun\n                    var isComplexType = element.getElementsByTagName(\"xs:complexType\")[0];\n                    var needsFurtherInvestigation = false;\n                    //if type is in form commons:something then needs further investigation with commons.xsd\n                    needsFurtherInvestigation = element.getAttribute(\"type\") ? element.getAttribute(\"type\").includes(\"commons:\") : false;\n                    if (!isComplexType) {\n                        if (!needsFurtherInvestigation) mandatoryFields.push({\n                            name: element.getAttribute(\"name\"),\n                            type: element.getAttribute(\"type\"),\n                            path: path1,\n                            documentation: documentationValue,\n                            orderNumber: i + 1\n                        });\n                        else recursiveSearchForTypes(element.getAttribute(\"type\").split(\":\")[1], i + 1, mandatoryFields, nonMandatoryFields, path1);\n                    }\n                }\n            }\n        }\n        console.log(\"mandatoryFields\", mandatoryFields);\n        console.log(\"nonMandatoryFields\", nonMandatoryFields);\n        displayMandatoryFields(mandatoryFields, nonMandatoryFields);\n        if (document.getElementById(\"xmlAsTable\").getElementsByTagName(\"tbody\")[0]) setMandatoryAndFieldOrder(mandatoryFields, nonMandatoryFields, document.getElementById(\"xmlAsTable\").getElementsByTagName(\"tbody\")[0]);\n    };\n    function displayMandatoryFields(mandatoryFields, nonMandatoryFields) {\n        var label = document.getElementById(\"mandatoryFieldsLabel\");\n        label.innerHTML = \"Obligatorii: \" + mandatoryFields.length;\n        //get table id=\"mandatoryFieldsTable\" and create mandatory data\n        var table = document.getElementById(\"mandatoryFieldsTable\");\n        //empty table\n        table.innerHTML = \"\";\n        //Create table head\n        var thead = table.createTHead();\n        var row = thead.insertRow();\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Name\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Type\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Path\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Documentation\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Order Number\";\n        row.appendChild(th);\n        //create table body\n        var tbody = table.createTBody();\n        mandatoryFields.forEach((item)=>{\n            var tr = document.createElement(\"tr\");\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.name;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.type;\n            //onclick event\n            td.onclick = function() {\n                showCommonType(this.innerHTML.split(\":\")[1], item.orderNumber, mandatoryFields, nonMandatoryFields, item.path);\n            };\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.path;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.documentation;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.orderNumber;\n            tr.appendChild(td);\n            tbody.appendChild(tr);\n        });\n        //label\n        var label = document.getElementById(\"nonMandatoryFieldsLabel\");\n        label.innerHTML = \"Facultative: \" + nonMandatoryFields.length;\n        //table id=\"nonMandatoryFieldsTable\"\n        var table = document.getElementById(\"nonMandatoryFieldsTable\");\n        //empty table\n        table.innerHTML = \"\";\n        //Create table head\n        var thead = table.createTHead();\n        var row = thead.insertRow();\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Name\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Type\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Path\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Documentation\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Order Number\";\n        row.appendChild(th);\n        //create table body\n        var tbody = table.createTBody();\n        nonMandatoryFields.forEach((item)=>{\n            var tr = document.createElement(\"tr\");\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.name;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.type;\n            //onclick event\n            td.onclick = function() {\n                showCommonType(this.innerHTML.split(\":\")[1], item.orderNumber, mandatoryFields, nonMandatoryFields, item.path);\n            };\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.path;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.documentation;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.orderNumber;\n            tr.appendChild(td);\n            tbody.appendChild(tr);\n        });\n    }\n    function setMandatoryAndFieldOrder(mandatoryFields, nonMandatoryFields, table) {\n        //in table id=\"xmlAsTable\" fill column \"Mandatory\" with \"Yes\" or \"No\" by path\n        var rows = table.getElementsByTagName(\"tr\");\n        for(var i = 0; i < rows.length; i++){\n            var row = rows[i];\n            var cell = row.getElementsByClassName(\"xmlPath\")[0];\n            var path1 = cell.innerHTML;\n            mandatoryFields.every((item)=>{\n                if (item.path == path1) {\n                    cell = row.getElementsByClassName(\"mandatory\")[0];\n                    //child select\n                    cell.value = true;\n                    return false;\n                }\n                return true;\n            });\n        }\n        //xmlOrderNumber\n        rows = table.getElementsByTagName(\"tr\");\n        for(var i = 0; i < rows.length; i++){\n            var row = rows[i];\n            var cell = row.getElementsByClassName(\"xmlPath\")[0];\n            var path1 = cell.innerHTML;\n            mandatoryFields.every((item)=>{\n                console.log(\"path\", path1, \"item.path\", item.path);\n                //if (item.path == path) {\n                //if (path.includes(item.path)) {\n                if (path1 == item.path) {\n                    cell = row.getElementsByClassName(\"xmlOrder\")[0];\n                    cell.innerHTML = item.orderNumber;\n                    return false;\n                }\n                return true;\n            });\n            nonMandatoryFields.every((item)=>{\n                if (item.path == path1) {\n                    //if (path.includes(item.path)) {\n                    cell = row.getElementsByClassName(\"xmlOrder\")[0];\n                    cell.innerHTML = item.orderNumber;\n                    return false;\n                }\n                return true;\n            });\n        }\n    }\n}\nfunction loadCommonXSD() {\n    //1.get file from input id=\"xsdCommonsFile\"\n    //2. create dom from file\n    var xsdFile = document.getElementById(\"xsdCommonsFile\").files[0];\n    if (!xsdFile) {\n        alert(\"Select XSD Commons file\");\n        return;\n    }\n    console.log(\"xsdFile\", xsdFile);\n    //find elements without minOccurs=\"0\"\n    var reader = new FileReader();\n    reader.readAsText(xsdFile);\n    reader.onload = function(e) {\n        var xsd = e.target.result;\n        var parser = new DOMParser();\n        xsdCommonsDom = parser.parseFromString(xsd, \"text/xml\");\n    };\n}\nvar xsdCommonsDom = null;\nfunction showCommonType(type, orderNumber, mandatoryFields, nonMandatoryFields, path1) {\n    //commons:PartyType => search for PartyType and get mandatory fields and non mandatory fields\n    var thisMandatoryFields = [];\n    var thisNonMandatoryFields = [];\n    var searchFor = type;\n    //search for attributes with name = searchFor\n    var response = recursiveSearchForTypes(searchFor, orderNumber, mandatoryFields, nonMandatoryFields, path1);\n    thisMandatoryFields = response.thisMandatoryFields;\n    thisNonMandatoryFields = response.thisNonMandatoryFields;\n    displayDetails();\n    function displayDetails() {\n        //dislay modal with id-\"commonsDigging\" with mandatoryFields and nonMandatoryFields\n        //from bulma docs: To activate the modal, just add the is-active modifier on the .modal container.\n        var modal = document.getElementById(\"commonsDigging\");\n        //add listener to modal close button\n        var modalClose = modal.getElementsByClassName(\"modal-close\")[0];\n        modalClose.onclick = function() {\n            modal.classList.remove(\"is-active\");\n        };\n        modal.classList.add(\"is-active\");\n        //modal-content with data mentioned above\n        var modalContent = modal.getElementsByClassName(\"modal-content\")[0];\n        //empty modalContent\n        modalContent.innerHTML = \"\";\n        //create table in modalContent\n        var table = document.createElement(\"table\");\n        modalContent.appendChild(table);\n        table.classList.add(\"table\");\n        table.classList.add(\"is-striped\");\n        table.classList.add(\"is-hoverable\");\n        table.classList.add(\"is-fullwidth\");\n        table.classList.add(\"is-narrow\");\n        table.classList.add(\"is-size-7\");\n        //create table head\n        var thead = table.createTHead();\n        var row = thead.insertRow();\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Name\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Type\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Path\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Documentation\";\n        row.appendChild(th);\n        var th = document.createElement(\"th\");\n        th.innerHTML = \"Order Number\";\n        row.appendChild(th);\n        //create table body\n        var tbody = table.createTBody();\n        thisMandatoryFields.forEach((item)=>{\n            var tr = document.createElement(\"tr\");\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.name;\n            //color\n            td.style.color = \"red\";\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.type;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.path;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.documentation;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.orderNumber;\n            tr.appendChild(td);\n            tbody.appendChild(tr);\n        });\n        thisNonMandatoryFields.forEach((item)=>{\n            var tr = document.createElement(\"tr\");\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.name;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.type;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.path;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.documentation;\n            tr.appendChild(td);\n            var td = document.createElement(\"td\");\n            td.innerHTML = item.orderNumber;\n            tr.appendChild(td);\n            tbody.appendChild(tr);\n        });\n    }\n}\nfunction recursiveSearchForTypes(searchFor, orderNumber, mandatoryFields, nonMandatoryFields, path1) {\n    if (!xsdCommonsDom) {\n        console.log(\"xsdCommonsDom not ready\");\n        return;\n    }\n    var thisMandatoryFields = [];\n    var thisNonMandatoryFields = [];\n    var mySearchedComplexType;\n    //search xs:complexType name = searchFor\n    //when found, search for all children xs:element with minOccurs=\"0\" and add them to nonMandatoryFields\n    //if not minOccurs=\"0\" or even doesn't have minOccurs, add them to mandatoryFields\n    var myComplexType = [\n        ...xsdCommonsDom.getElementsByTagName(\"xs:complexType\")\n    ];\n    if (myComplexType.length > 0) {\n        mySearchedComplexType = myComplexType.find((item)=>{\n            return item.getAttribute(\"name\") == searchFor;\n        });\n        if (!mySearchedComplexType) {\n            console.log(\"mySearchedComplexType not found\");\n            return {\n                thisMandatoryFields: thisMandatoryFields,\n                thisNonMandatoryFields: thisNonMandatoryFields\n            };\n        }\n        console.log(\"searchFor\", searchFor, \"mySearchedComplexType\", mySearchedComplexType);\n        //get all xs:element children\n        var myElements = mySearchedComplexType.getElementsByTagName(\"xs:element\");\n        var arrMyElements = Array.from(myElements);\n        arrMyElements.forEach((item, index)=>{\n            var parents = [];\n            var parent = item.parentNode;\n            //while not mySeachedComplexType\n            while(parent.getAttribute(\"name\") != searchFor){\n                parents.push(parent);\n                parent = parent.parentNode;\n            }\n            //construct path\n            var path11 = \"\";\n            for(var j = parents.length - 1; j >= 0; j--){\n                var parentName = parents[j].getAttribute(\"name\");\n                if (parentName) path11 += parentName + \"/\";\n            }\n            var keeper = {\n                name: item.getAttribute(\"name\"),\n                type: item.getAttribute(\"type\"),\n                path: path1 + \"/\" + path11 + item.getAttribute(\"name\"),\n                documentation: \"\",\n                orderNumber: parseFloat(orderNumber) + (index + 1) * 0.001\n            };\n            if (item.hasAttribute(\"minOccurs\") && item.getAttribute(\"minOccurs\") == \"0\") {\n                nonMandatoryFields.push(keeper);\n                thisNonMandatoryFields.push(keeper);\n            } else {\n                mandatoryFields.push(keeper);\n                thisMandatoryFields.push(keeper);\n            }\n            //try further investigation with commons.xsd by type\n            var type = item.getAttribute(\"type\");\n            listOfPrimitiveTypes = [\n                \"xs:string\",\n                \"xs:decimal\",\n                \"xs:integer\",\n                \"xs:boolean\",\n                \"xs:date\",\n                \"xs:time\",\n                \"xs:dateTime\",\n                \"xs:duration\",\n                \"xs:hexBinary\",\n                \"xs:base64Binary\",\n                \"xs:anyURI\",\n                \"xs:QName\",\n                \"xs:NOTATION\"\n            ];\n            if (listOfPrimitiveTypes.indexOf(type) == -1) {\n                if (type) {\n                    var response = recursiveSearchForTypes(type, keeper.orderNumber, mandatoryFields, nonMandatoryFields, keeper.path);\n                    thisMandatoryFields = thisMandatoryFields.concat(response.thisMandatoryFields);\n                    thisNonMandatoryFields = thisNonMandatoryFields.concat(response.thisNonMandatoryFields);\n                }\n            }\n        });\n    }\n    console.log(\"thisMandatoryFields\", thisMandatoryFields, \"thisNonMandatoryFields\", thisNonMandatoryFields);\n    return {\n        thisMandatoryFields: thisMandatoryFields,\n        thisNonMandatoryFields: thisNonMandatoryFields\n    };\n}\n//create function to close bulma modal on escape key\n//from bulma docs: To activate the modal, just add the is-active modifier on the .modal container.\ndocument.addEventListener(\"keydown\", function(event) {\n    var modal = document.getElementById(\"commonsDigging\");\n    if (event.key == \"Escape\") modal.classList.remove(\"is-active\");\n});\n//if user refreshes page, then message alert localStorageRetailer\nwindow.onload = function() {\n    var params = {};\n    params[\"query\"] = {};\n    params[\"query\"][\"sqlQuery\"] = \"select name from trdr where sodtype=13 and trdr=\" + localStorage.getItem(\"trdr_retailer\");\n    client.service(\"getDataset\").find(params).then((res)=>{\n        if (res.data) {\n            //alert(res.data)\n            //get id of div id=\"retailerName\"\n            var retailerName = document.getElementById(\"retailerName\");\n            retailerName.innerHTML = res.data;\n        }\n    });\n};\nfunction sendAllFacturi() {\n    alert(\"To be implemented\");\n}\n//onClick event for id=\"facturiTrimise\" to show only facturi netrimise sau toate facturile\n//netrimise means <td class=\"trimis\"> contains <i class=\"fas fa-xl fa-times-circle has-text-danger\">\nfunction toggleFacturiNetrimise() {\n    var facturiTrimise = document.getElementById(\"facturiTrimise\");\n    var table = document.getElementById(\"facturiTableBody\");\n    if (facturiTrimise.checked) {\n        //show only rows with cell class=\"trimis\" innerHTML empty if checkbox is checked, else show all rows\n        var rows = table.getElementsByTagName(\"tr\");\n        for(var i = 0; i < rows.length; i++){\n            var row = rows[i];\n            var cell = row.getElementsByClassName(\"trimis\")[0];\n            //contains <i class=\"fas fa-xl fa-check-circle has-text-danger\">\n            if (cell.innerHTML.includes(\"fa-check-circle\")) row.style.display = \"none\";\n        }\n    } else {\n        var rows = table.getElementsByTagName(\"tr\");\n        for(var i = 0; i < rows.length; i++){\n            var row = rows[i];\n            row.style.display = \"\";\n        }\n    }\n}\n\n//# sourceMappingURL=index.a86d2c38.js.map\n","console.log('Client.js loaded')\r\n\r\n//const socket = io('https://retailers-ac9953f6caca.herokuapp.com')\r\nconst socket = io('www.retailers.acct.ro')\r\nconst client = feathers()\r\nconst socketClient = feathers.socketio(socket)\r\n\r\nclient.configure(socketClient)\r\n\r\nclient.use('sftp', socketClient.service('sftp'), {\r\n  methods: ['downloadXml', 'storeXmlInDB', 'uploadXml'],\r\n  events: ['uploadResult']\r\n})\r\n\r\nclient.use('storeXml', socketClient.service('storeXml'), {\r\n  methods: ['find', 'get', 'create', 'update', 'patch', 'remove']\r\n})\r\n\r\nclient.use('CCCDOCUMENTES1MAPPINGS', socketClient.service('CCCDOCUMENTES1MAPPINGS'), {\r\n  methods: ['find', 'get', 'create', 'update', 'patch', 'remove']\r\n})\r\n\r\nclient.use('CCCXMLS1MAPPINGS', socketClient.service('CCCXMLS1MAPPINGS'), {\r\n  methods: ['find', 'get', 'create', 'update', 'patch', 'remove']\r\n})\r\n\r\nclient.use('CCCRETAILERSCLIENTS', socketClient.service('CCCRETAILERSCLIENTS'), {\r\n  methods: ['find', 'get', 'create', 'update', 'patch', 'remove']\r\n})\r\n\r\nclient.use('connectToS1', socketClient.service('connectToS1'), {\r\n  methods: ['find', 'get', 'create', 'update', 'patch', 'remove']\r\n})\r\n\r\nclient.use('setDocument', socketClient.service('setDocument'), {\r\n  methods: ['find', 'get', 'create', 'update', 'patch', 'remove']\r\n})\r\n\r\nclient.use('getDataset', socketClient.service('getDataset'), {\r\n  methods: ['find', 'get', 'create', 'update', 'patch', 'remove']\r\n})\r\n\r\nclient.use('getS1ObjData', socketClient.service('getS1ObjData'), {\r\n  methods: ['find', 'get', 'create', 'update', 'patch', 'remove']\r\n})\r\n\r\nclient.use('getS1SqlData', socketClient.service('getS1SqlData'), {\r\n  methods: ['find', 'get', 'create', 'update', 'patch', 'remove']\r\n})\r\n\r\n//getInvoiceDom\r\nclient.use('getInvoiceDom', socketClient.service('getInvoiceDom'), {\r\n  methods: ['find', 'get', 'create', 'update', 'patch', 'remove']\r\n})\r\n\r\nclient.service('sftp').on('uploadResult', (data) => {\r\n  console.log('uploadResult', data)\r\n})\r\n\r\nvar url = '',\r\n  username = '',\r\n  passphrase = '',\r\n  privateKey = '',\r\n  fingerprint = ''\r\n\r\nfunction getRetailerConfData() {\r\n  var localStorageRetailer\r\n  try {\r\n    localStorageRetailer = parseInt(localStorage.getItem('trdr_retailer'))\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  client\r\n    .service('CCCSFTP')\r\n    .find({\r\n      query: {\r\n        TRDR_RETAILER: localStorageRetailer\r\n      }\r\n    })\r\n    .then((res) => {\r\n      console.log(res)\r\n      //URL\r\n      document.getElementById('URL').value = res.data[0].URL\r\n      //PORT\r\n      document.getElementById('PORT').value = res.data[0].PORT\r\n      //USERNAME\r\n      document.getElementById('USERNAME').value = res.data[0].USERNAME\r\n      //PASSPHRASE\r\n      document.getElementById('PASSPHRASE').value = res.data[0].PASSPHRASE\r\n      privateKey = res.data[0].PRIVATEKEY\r\n      document.getElementById('FINGERPRINT').value = res.data[0].FINGERPRINT\r\n      document.getElementById('TRDR_RETAILER').value = res.data[0].TRDR_RETAILER\r\n      //INITIALDIRIN\r\n      document.getElementById('INITIALDIRIN').value = res.data[0].INITIALDIRIN\r\n      //INITIALDIROUT\r\n      document.getElementById('INITIALDIROUT').value = res.data[0].INITIALDIROUT\r\n    })\r\n}\r\n\r\nfunction setRetailerId(trdr, urlLogo) {\r\n  localStorage.setItem('trdr_retailer', trdr)\r\n  localStorage.setItem('logo_retailer', urlLogo)\r\n  console.log('Retailer id set to ', parseInt(localStorage.getItem('trdr_retailer')))\r\n}\r\n\r\nfunction updateRetailerConfData() {\r\n  //URL\r\n  url = document.getElementById('URL').value\r\n  //PORT\r\n  port = document.getElementById('PORT').value\r\n  //USERNAME\r\n  username = document.getElementById('USERNAME').value\r\n  //PASSPHRASE\r\n  passphrase = document.getElementById('PASSPHRASE').value\r\n  //FINGERPRINT\r\n  fingerprint = document.getElementById('FINGERPRINT').value\r\n  //TRDR_RETAILER\r\n  trdr_retailer = document.getElementById('TRDR_RETAILER').value\r\n  //INITIALDIRIN\r\n  initialdirin = document.getElementById('INITIALDIRIN').value\r\n  //INITIALDIROUT\r\n  initialdirout = document.getElementById('INITIALDIROUT').value\r\n\r\n  client\r\n    .service('CCCSFTP')\r\n    .update(\r\n      {\r\n        query: {\r\n          TRDR_RETAILER: trdr_retailer\r\n        }\r\n      },\r\n      (data = {\r\n        URL: url,\r\n        PORT: port,\r\n        USERNAME: username,\r\n        PASSPHRASE: passphrase,\r\n        FINGERPRINT: fingerprint,\r\n        INITIALDIRIN: initialdirin,\r\n        INITIALDIROUT: initialdirout\r\n      })\r\n    )\r\n    .then((res) => {\r\n      console.log(res)\r\n    })\r\n}\r\n\r\nasync function getRetailerXMLData(retailer) {\r\n  return new Promise((resolve, reject) => {\r\n    client\r\n      .service('CCCSFTPXML')\r\n      .find({\r\n        query: {\r\n          TRDR_RETAILER: retailer,\r\n          $limit: 200,\r\n          $sort: {\r\n            XMLDATE: -1\r\n          }\r\n        }\r\n      })\r\n      .then((res) => {\r\n        resolve(res)\r\n      })\r\n  })\r\n}\r\n\r\nfunction getClientConfData() {\r\n  //CCCRETAILERSCLIENTS\r\n  client\r\n    .service('CCCRETAILERSCLIENTS')\r\n    .find({ query: { TRDR_CLIENT: 1 } })\r\n    .then((res) => {\r\n      //WSURL\r\n      document.getElementById('WSURL').value = res.data[0].WSURL\r\n      //LOGINCOMPANY\r\n      document.getElementById('LOGINCOMPANY').value = res.data[0].COMPANY\r\n      //BRANCH\r\n      document.getElementById('LOGINBRANCH').value = res.data[0].BRANCH\r\n      //LOGINUSER\r\n      document.getElementById('LOGINUSER').value = res.data[0].WSUSER\r\n      //LOGINPASS\r\n      document.getElementById('LOGINPASSWORD').value = res.data[0].WSPASS\r\n    })\r\n}\r\n\r\n//config_retailer section\r\nfunction openTab(evt, tabName) {\r\n  var i, x, tablinks\r\n  x = document.getElementsByClassName('content-tab')\r\n  for (i = 0; i < x.length; i++) {\r\n    x[i].style.display = 'none'\r\n  }\r\n  tablinks = document.getElementsByClassName('tab')\r\n  for (i = 0; i < x.length; i++) {\r\n    tablinks[i].className = tablinks[i].className.replace(' is-active', '')\r\n  }\r\n  document.getElementById(tabName).style.display = 'block'\r\n  evt.currentTarget.className += ' is-active'\r\n}\r\n\r\nfunction loadFile(event) {\r\n  var xml = event.target.files[0]\r\n  var reader = new FileReader()\r\n  reader.onload = function (e) {\r\n    var textArea = document.getElementById('xmlTextArea')\r\n    textArea.value = e.target.result\r\n    //loop iterates through the xml file and displays the content in the console\r\n    var parser = new DOMParser()\r\n    var xmlDoc = parser.parseFromString(e.target.result, 'text/xml')\r\n    //get main node from select id \"xmlRoot\"\r\n    var mainNode = document.getElementById('xmlRoot').value\r\n    var x = xmlDoc.getElementsByTagName(mainNode)\r\n    //loop recursivly through all nodes from main node \"Order\" and create an object with the values\r\n    var obj = xml2json(x[0])\r\n    console.log('xml2json', obj)\r\n\r\n    //get node name for lines; select id \"delimitareLinieDocument\"\r\n    var linesNode = document.getElementById('delimitareLinieDocument').value\r\n    //cut obj in two parts: header and lines; lines are in an array (obj.OrderLine)\r\n    var header = {}\r\n    var lines = []\r\n    console.log('header', header)\r\n    for (var i in obj) {\r\n      if (i == linesNode && obj[i].length > 0 && typeof obj[i] === 'object') {\r\n        lines = obj[i]\r\n      } else {\r\n        header[i] = obj[i]\r\n      }\r\n    }\r\n    var table = document.getElementById('xmlAsTable')\r\n    //delete innerHTML\r\n    table.innerHTML = ''\r\n    //add thead\r\n    addTableHeader(table)\r\n    var headerArrayOfObjects = []\r\n    var linesArrayOfObjects = []\r\n    recurse(header, [], mainNode, '#FFFAFC', '#0a0a0a', headerArrayOfObjects)\r\n    addRowsToTable(headerArrayOfObjects)\r\n    //recurse first line, no point to recurse through all lines, it's a reference for all lines\r\n    recurse(lines[0], [], mainNode + '/' + linesNode, '#eff5fb', '#0a0a0a', linesArrayOfObjects)\r\n    addRowsToTable(linesArrayOfObjects)\r\n  }\r\n\r\n  try {\r\n    reader.readAsText(xml)\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n}\r\n\r\nfunction addTableHeader(table) {\r\n  var thead = table.createTHead()\r\n  var row = thead.insertRow()\r\n  var cell0 = document.createElement('th')\r\n  cell0.innerHTML = 'XML Ord.'\r\n  cell0.className = 'xmlOrder'\r\n  row.appendChild(cell0)\r\n  var cell1 = document.createElement('th')\r\n  row.appendChild(cell1)\r\n  cell1.innerHTML = 'Pick'\r\n  //text orientation up\r\n  //cell1.style.writingMode = 'vertical-rl'\r\n  //cell1.style.textOrientation = 'upright'\r\n  var cell2 = document.createElement('th')\r\n  row.appendChild(cell2)\r\n  cell2.innerHTML = 'Req.'\r\n  //same\r\n  //cell2.style.writingMode = 'vertical-rl'\r\n  //cell2.style.textOrientation = 'upright'\r\n  var cell3 = document.createElement('th')\r\n  row.appendChild(cell3)\r\n  cell3.innerHTML = 'XML Path'\r\n  var cell4 = document.createElement('th')\r\n  row.appendChild(cell4)\r\n  cell4.innerHTML = 'S1 Table 1'\r\n  var cell5 = document.createElement('th')\r\n  row.appendChild(cell5)\r\n  cell5.innerHTML = 'S1 Field 1'\r\n  var cell6 = document.createElement('th')\r\n  row.appendChild(cell6)\r\n  cell6.innerHTML = 'S1 Table 2'\r\n  var cell7 = document.createElement('th')\r\n  row.appendChild(cell7)\r\n  cell7.innerHTML = 'S1 Field 2'\r\n  var cell8 = document.createElement('th')\r\n  row.appendChild(cell8)\r\n  cell8.innerHTML = 'SQL'\r\n  var cell9 = document.createElement('th')\r\n  row.appendChild(cell9)\r\n  cell9.innerHTML = 'Value'\r\n  //add column Observatii\r\n  var cell10 = document.createElement('th')\r\n  row.appendChild(cell10)\r\n  cell10.innerHTML = 'Observatii'\r\n  //make it prety and sticky\r\n  thead.style.backgroundColor = '#e6e6e6'\r\n  thead.style.fontWeight = 'bold'\r\n  thead.style.zIndex = '1'\r\n  //add hideUnselectedRows button on another row\r\n  row = thead.insertRow()\r\n  cell1 = document.createElement('th')\r\n  row.appendChild(cell1)\r\n  cell1.colSpan = 10\r\n  cell1.innerHTML = `<button id=\"hideUnselectedRows\" class=\"button is-small is-info\" onclick=\"hideUnselectedRows()\">Show/Hide unselected rows</button>`\r\n  //add 4 buttons on the same row; on click hide/show cells: 1. S1 Table 2, S1 Field 2, 2. Value, 3. Observatii\r\n  cell1.innerHTML += `<button id=\"hideS1Table2S1Field2\" class=\"button is-small is-info ml-2\" onclick=\"showHideCell(['S1 Table 2', 'S1 Field 2'], document.getElementById('xmlAsTable'))\">Show/Hide Table 2</button>`\r\n  cell1.innerHTML += `<button id=\"hideValue\" class=\"button is-small is-info ml-2\" onclick=\"showHideCell(['Value'], document.getElementById('xmlAsTable'))\">Show/Hide Value</button>`\r\n  cell1.innerHTML += `<button id=\"hideObservatii\" class=\"button is-small is-info ml-2\" onclick=\"showHideCell(['Observatii'], document.getElementById('xmlAsTable'))\">Show/Hide Observatii</button>`\r\n  //hide/show all the above buttons\r\n  cell1.innerHTML += `<button id=\"hideShowAll\" class=\"button is-small is-info ml-2\" onclick=\"showHideCell(['S1 Table 2', 'S1 Field 2', 'Value', 'Observatii'], document.getElementById('xmlAsTable'))\">Hide all</button>`\r\n  //add saveMapping button on the same row\r\n  cell1.innerHTML += `<button class=\"button is-small is-success ml-2\" onclick=\"saveMapping()\">Save mapping</button>`\r\n}\r\n\r\nfunction showHideCell(cellsByName, table) {\r\n  //show hide cells in table\r\n  var rowCount = table.rows.length\r\n  var cells = []\r\n  //look in thead for cells with name in cellsByName and retain index of cells\r\n  var thead = table.tHead\r\n  var row = thead.rows[0]\r\n  for (var i = 0; i < row.cells.length; i++) {\r\n    if (cellsByName.indexOf(row.cells[i].innerHTML) > -1) {\r\n      cells.push(i)\r\n    }\r\n  }\r\n\r\n  //search by index in tbody and show/hide cells\r\n  for (var i = 0; i < rowCount; i++) {\r\n    var row = table.rows[i]\r\n    for (var j = 0; j < cells.length; j++) {\r\n      var cell = row.cells[cells[j]]\r\n      try {\r\n        if (cell.style.display == 'none') {\r\n          cell.style.display = ''\r\n        } else {\r\n          cell.style.display = 'none'\r\n        }\r\n      } catch (err) {\r\n        console.log(err)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction recurse(obj, parent, root, color, color1, result) {\r\n  //recurse through the object and add rows to result\r\n  for (var i in obj) {\r\n    if (obj[i] !== null && typeof obj[i] === 'object') {\r\n      //detect if it is an array\r\n      if (Array.isArray(obj[i])) {\r\n        //change color for entire array\r\n        recurse(obj[i], parent.concat(i), root, color, '#3850b7', result)\r\n        //recurse first element of array\r\n        recurse(obj[i][0], parent.concat(i), root, color, '#cc0f35', result)\r\n      } else {\r\n        recurse(obj[i], parent.concat(i), root, color, color1, result)\r\n      }\r\n    } else {\r\n      //add row to table xmlAsTable\r\n      result.push({ obj, parent, root, i, color, color1 })\r\n    }\r\n  }\r\n}\r\n\r\nfunction addRowsToTable(arr) {\r\n  var table = document.getElementById('xmlAsTable')\r\n  //if body doesn't exist create it otherwise get it\r\n  var tbody = table.tBodies[0] ? table.tBodies[0] : table.createTBody()\r\n  arr.forEach((item) => {\r\n    var obj = item.obj\r\n    var parent = item.parent\r\n    var root = item.root\r\n    var i = item.i\r\n    var color = item.color\r\n    var color1 = item.color1\r\n    var row = tbody.insertRow()\r\n    //root as class name\r\n    row.className = root\r\n    var xmlOrder = row.insertCell()\r\n    //class\r\n    xmlOrder.className = 'xmlOrder'\r\n    xmlOrder.innerHTML = 0\r\n    var remains = row.insertCell()\r\n    var mandatory = row.insertCell()\r\n    var xmlPath = row.insertCell()\r\n    var s1Tbl1 = row.insertCell()\r\n    var s1Fld1 = row.insertCell()\r\n    var s1Tbl2 = row.insertCell()\r\n    var s1Fld2 = row.insertCell()\r\n    var sql = row.insertCell()\r\n    var value = row.insertCell()\r\n    //add column Observatii\r\n    var cell10 = row.insertCell()\r\n    //BuyerCustomerParty/PostalAddress/AdditionalStreetName\r\n    var xmlJoinBySlash = parent && parent.length > 0 ? parent.join('/') + '/' + i : i\r\n    //Order_BuyerCustomerParty_PostalAddress_AdditionalStreetName\r\n    var xmlJoinByUnderscore =\r\n      parent && parent.length > 0 ? root + '_' + parent.join('_') + '_' + i : root + '_' + i\r\n\r\n    //add column with checkbox \"Remaining\"\r\n    var input1 = document.createElement('input')\r\n    input1.type = 'checkbox'\r\n    input1.name = xmlJoinByUnderscore + '_Remaining'\r\n    input1.className = 'remaining checkbox is-small' //important, used in hideUnselectedRows()\r\n    input1.id = xmlJoinByUnderscore + '_Remaining'\r\n    remains.appendChild(input1)\r\n    remains.onclick = function () {\r\n      //change color for entire row\r\n      var row = this.parentNode\r\n      if (this.childNodes[0].checked) {\r\n        row.style.backgroundColor = '#e6ffe6'\r\n      } else {\r\n        row.style.backgroundColor = 'white'\r\n      }\r\n    }\r\n    //add column with checkbox \"Mandatory\"\r\n    var input2 = document.createElement('input')\r\n    input2.type = 'checkbox'\r\n    input2.name = xmlJoinByUnderscore + '_Mandatory'\r\n    input2.id = xmlJoinByUnderscore + '_Mandatory'\r\n    input2.className = 'mandatory checkbox is-small'\r\n    mandatory.appendChild(input2)\r\n    //xmlPath\r\n    //if too long word wrap, rember it one word\r\n    xmlPath.style.maxWidth = '300px'\r\n    //wrap\r\n    xmlPath.style.wordWrap = 'break-word'\r\n    xmlPath.innerHTML = root + '/' + xmlJoinBySlash\r\n    xmlPath.className = 'xmlPath'\r\n    //xmlPath.style.paddingLeft = parent.length * 10 + 'px'\r\n    //s1Tbl1\r\n    var input3 = document.createElement('input')\r\n    input3.type = 'text'\r\n    input3.name = xmlJoinByUnderscore + '_S1Table1'\r\n    input3.id = xmlJoinByUnderscore + '_S1Table1'\r\n    input3.className = 'input is-small'\r\n    input3.value = ''\r\n    input3.placeholder = 'S1 table'\r\n    s1Tbl1.appendChild(input3)\r\n    //s1Fld1\r\n    var input4 = document.createElement('input')\r\n    input4.type = 'text'\r\n    input4.name = xmlJoinByUnderscore + '_S1Field1'\r\n    input4.id = xmlJoinByUnderscore + '_S1Field1'\r\n    input4.className = 'input is-small'\r\n    input4.value = ''\r\n    input4.placeholder = 'S1 field'\r\n    s1Fld1.appendChild(input4)\r\n    //s1Tbl2\r\n    var input5 = document.createElement('input')\r\n    input5.type = 'text'\r\n    input5.name = xmlJoinByUnderscore + '_S1Table2'\r\n    input5.id = xmlJoinByUnderscore + '_S1Table2'\r\n    input5.className = 'input is-small'\r\n    input5.value = ''\r\n    input5.placeholder = 'S1 table'\r\n    s1Tbl2.appendChild(input5)\r\n    //s1Fld2\r\n    var input6 = document.createElement('input')\r\n    input6.type = 'text'\r\n    input6.name = xmlJoinByUnderscore + '_S1Field2'\r\n    input6.id = xmlJoinByUnderscore + '_S1Field2'\r\n    input6.className = 'input is-small'\r\n    input6.value = ''\r\n    input6.placeholder = 'S1 field'\r\n    s1Fld2.appendChild(input6)\r\n    //Value\r\n    value.innerHTML = obj[i]\r\n    //add sql textarea field\r\n    var input7 = document.createElement('textarea')\r\n    //1 row\r\n    input7.rows = 1\r\n    input7.id = xmlJoinByUnderscore + '_Sql'\r\n    input7.className = 'textarea is-small'\r\n    input7.rows = 1\r\n    input7.value = ''\r\n    input7.placeholder = 'SQL'\r\n    input7.spellcheck = false\r\n    input7.style.width = '300px'\r\n    sql.appendChild(input7)\r\n    //add column Observatii\r\n    var input8 = document.createElement('textarea')\r\n    input8.rows = 1\r\n    input8.id = xmlJoinByUnderscore + '_Observatii'\r\n    input8.className = 'textarea is-small'\r\n    input8.rows = 1\r\n    input8.value = ''\r\n    input8.placeholder = 'Observatii'\r\n    input8.spellcheck = false\r\n    input8.style.width = '300px'\r\n    cell10.appendChild(input8)\r\n    //add onclick event to row\r\n    row.onclick = function () {\r\n      var table = document.getElementById('xmlAsTable')\r\n      var rowCount = table.rows.length\r\n      for (var i = 1; i < rowCount; i++) {\r\n        table.rows[i].className = ''\r\n      }\r\n      this.className = 'is-selected'\r\n    }\r\n    row.style.backgroundColor = color\r\n    row.style.color = color1\r\n  })\r\n}\r\n\r\nfunction xml2json(node) {\r\n  var result = {}\r\n  if (node.hasAttributes()) {\r\n    result['__attributes'] = {}\r\n    var attrs = node.attributes\r\n    for (var i = 0; i < attrs.length; i++) {\r\n      result['__attributes'][attrs[i].nodeName] = attrs[i].nodeValue\r\n    }\r\n  }\r\n  if (node.hasChildNodes()) {\r\n    var children = node.childNodes\r\n    for (var i = 0; i < children.length; i++) {\r\n      var child = children[i]\r\n      if (child.nodeType == 1) {\r\n        if (child.childNodes.length == 1 && child.firstChild.nodeType == 3) {\r\n          // text value\r\n          //result[child.nodeName] = child.firstChild.nodeValue\r\n          var objAttrs = {}\r\n          if (child.hasAttributes()) {\r\n            var attrs = child.attributes\r\n            for (var j = 0; j < attrs.length; j++) {\r\n              objAttrs['__' + attrs[j].nodeName] = attrs[j].nodeValue\r\n            }\r\n            objAttrs[child.nodeName] = child.firstChild.nodeValue\r\n            //console.log('objAttrs', objAttrs)\r\n            //result[child.nodeName] = objAttrs\r\n            result[child.nodeName] = xml2json(child)\r\n            //add child.firstChild.nodeValue as a property to result[child.nodeName]\r\n            result[child.nodeName]['__value'] = child.firstChild.nodeValue\r\n          } else {\r\n            result[child.nodeName] = child.firstChild.nodeValue\r\n            //console.log(child.nodeName, result[child.nodeName])\r\n          }\r\n        } else {\r\n          // sub-object\r\n          if (typeof result[child.nodeName] == 'undefined') {\r\n            result[child.nodeName] = xml2json(child)\r\n          } else {\r\n            //array\r\n            if (typeof result[child.nodeName].push == 'undefined') {\r\n              var old = result[child.nodeName]\r\n              result[child.nodeName] = []\r\n              result[child.nodeName].push(old)\r\n              console.log('old', old)\r\n            }\r\n            result[child.nodeName].push(xml2json(child))\r\n            console.log('array', child.nodeName)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nfunction addRow() {\r\n  var table = document.getElementById('documente')\r\n  var row = table.insertRow()\r\n  var cell1 = row.insertCell()\r\n  var cell2 = row.insertCell()\r\n  var cell3 = row.insertCell()\r\n  var cell4 = row.insertCell()\r\n  cell1.innerHTML = `<input id = \"FPRMS${table.rows.length}\" class=\"input\" type=\"text\" placeholder=\"FPRMS\" />`\r\n  cell2.innerHTML = `<input id = \"SERIES${table.rows.length}\" class=\"input\" type=\"text\" placeholder=\"SERIES\" />`\r\n  cell3.innerHTML = `<input id = \"INITIALDIRIN${table.rows.length}\" class=\"input\" type=\"text\" placeholder=\"INITIALDIRIN\" />`\r\n  cell4.innerHTML = `<input id = \"INITIALDIROUT${table.rows.length}\" class=\"input\" type=\"text\" placeholder=\"INITIALDIROUT\" />`\r\n  var cell5 = row.insertCell()\r\n  cell5.className = 'CCCDOCUMENTES1MAPPINGS'\r\n  cell5.innerHTML = table.rows.length\r\n  //hide it\r\n  cell5.style.display = 'none'\r\n  //add actions column\r\n  var cell6 = row.insertCell()\r\n  cell6.innerHTML += `<button class=\"button is-small is-danger m-2\" onclick=\"deleteRow()\">Delete</button>`\r\n  cell6.innerHTML += `<button class=\"button is-small is-info m-2\" onclick=\"loadMapping()\">Load</button>`\r\n  //add class is-selected to current row\r\n  row.className = 'is-selected'\r\n  //add onclick event to row\r\n  row.onclick = function () {\r\n    var table = document.getElementById('documente')\r\n    var rowCount = table.rows.length\r\n    for (var i = 1; i < rowCount; i++) {\r\n      table.rows[i].className = ''\r\n    }\r\n    this.className = 'is-selected'\r\n  }\r\n}\r\n\r\nfunction deleteRow() {\r\n  var table = document.getElementById('documente')\r\n  var rowCount = table.rows.length\r\n  table.deleteRow(rowCount - 1)\r\n}\r\n\r\nfunction hideUnselectedRows() {\r\n  //if caption is \"Hide unselected rows\" change it to \"Show all rows\" and viceversa\r\n  var caption = document.getElementById('hideUnselectedRows').innerHTML\r\n  if (caption == 'Hide unselected rows') {\r\n    document.getElementById('hideUnselectedRows').innerHTML = 'Show all rows'\r\n  } else {\r\n    document.getElementById('hideUnselectedRows').innerHTML = 'Hide unselected rows'\r\n  }\r\n  var table = document.getElementById('xmlAsTable')\r\n  var tbody = table.tBodies[0]\r\n  var rowCount = tbody.rows.length\r\n  if (caption == 'Show all rows') {\r\n    for (var i = 1; i < rowCount; i++) {\r\n      var row = tbody.rows[i]\r\n      row.style.display = ''\r\n    }\r\n    return\r\n  } else {\r\n    for (var i = 1; i < rowCount; i++) {\r\n      var row = tbody.rows[i]\r\n      var input = row.cells[0].childNodes[0]\r\n      if (input.checked) {\r\n        row.style.display = ''\r\n      } else {\r\n        row.style.display = 'none'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction saveMapping() {\r\n  //SET CAPTION TO \"SHOW ALL ROWS\"\r\n  document.getElementById('hideUnselectedRows').innerHTML = 'Show all rows'\r\n  hideUnselectedRows()\r\n  if (!validateMappings()) {\r\n    return\r\n  }\r\n  //get current row from table documente and add class is-selected\r\n  var currentDoc = getDocument()\r\n  //verify if currentDoc already exists in database table CCCDOCUMENTES1MAPPINGS\r\n  client\r\n    .service('CCCDOCUMENTES1MAPPINGS')\r\n    .find({\r\n      query: {\r\n        FPRMS: currentDoc.FPRMS,\r\n        SERIES: currentDoc.SERIES\r\n      }\r\n    })\r\n    .then((res) => {\r\n      console.log(res)\r\n      if (res.data.length > 0) {\r\n        //ask user if he wants to overwrite the existing mapping\r\n        var answer = confirm('Mapping already exists. Do you want to overwrite it?')\r\n        if (answer) {\r\n          //check if it has children in table CCCXMLS1MAPPINGS\r\n          client\r\n            .service('CCCXMLS1MAPPINGS')\r\n            .find({\r\n              query: {\r\n                CCCDOCUMENTES1MAPPINGS: res.data[0].CCCDOCUMENTES1MAPPINGS\r\n              }\r\n            })\r\n            .then(async (res) => {\r\n              console.log('for delete', res)\r\n              try {\r\n                await deleteMapping(res.data[0].CCCDOCUMENTES1MAPPINGS)\r\n              } catch (err) {\r\n                console.log(err)\r\n              }\r\n              insertNewMapping(currentDoc)\r\n            })\r\n        } else {\r\n          return\r\n        }\r\n      } else {\r\n        insertNewMapping(currentDoc)\r\n      }\r\n    })\r\n}\r\n\r\nfunction insertNewMapping(currentDoc) {\r\n  //insert currentDoc in database table CCCDOCUMENTES1MAPPINGS\r\n  client\r\n    .service('CCCDOCUMENTES1MAPPINGS')\r\n    .create(currentDoc)\r\n    .then((res) => {\r\n      console.log(res)\r\n      var mappings = getSelectedMappingData()\r\n      var cccdocumentes1Mappings = res.CCCDOCUMENTES1MAPPINGS\r\n      mappings.forEach((item) => {\r\n        item['CCCDOCUMENTES1MAPPINGS'] = cccdocumentes1Mappings\r\n      })\r\n      console.log('mappings', mappings)\r\n      for (var i = 0; i < mappings.length; i++) {\r\n        client\r\n          .service('CCCXMLS1MAPPINGS')\r\n          .create(mappings[i])\r\n          .then((res) => {\r\n            //console.log('response', res)\r\n          })\r\n      }\r\n    })\r\n}\r\n\r\nfunction getDocument() {\r\n  var table = document.getElementById('documente')\r\n  var rowCount = table.rows.length\r\n  var row = table.rows[rowCount - 1]\r\n  row.className = 'is-selected'\r\n  //find cell in row with class CCCDOCUMENTES1MAPPINGS\r\n  var cell = row.getElementsByClassName('CCCDOCUMENTES1MAPPINGS')[0]\r\n  var CCCDOCUMENTES1MAPPINGS = cell.innerHTML\r\n  console.log('CCCDOCUMENTES1MAPPINGS', CCCDOCUMENTES1MAPPINGS)\r\n  //save row data in an object\r\n  var currentDoc = {}\r\n  currentDoc['SOSOURCE'] = 1351\r\n  currentDoc['FPRMS'] = parseInt(document.getElementById('FPRMS' + CCCDOCUMENTES1MAPPINGS.toString()).value)\r\n  currentDoc['SERIES'] = parseInt(document.getElementById('SERIES' + CCCDOCUMENTES1MAPPINGS.toString()).value)\r\n  currentDoc['INITIALDIRIN'] = document.getElementById(\r\n    'INITIALDIRIN' + CCCDOCUMENTES1MAPPINGS.toString()\r\n  ).value\r\n  currentDoc['INITIALDIROUT'] = document.getElementById(\r\n    'INITIALDIROUT' + CCCDOCUMENTES1MAPPINGS.toString()\r\n  ).value\r\n  currentDoc['TRDR_RETAILER'] = parseInt(document.getElementById('TRDR_RETAILER').value)\r\n  currentDoc['TRDR_CLIENT'] = 1\r\n  console.log(currentDoc)\r\n  return currentDoc\r\n}\r\n\r\nfunction getSelectedMappingData() {\r\n  if (!validateMappings()) {\r\n    return\r\n  }\r\n  var table = document.getElementById('xmlAsTable')\r\n  var rowCount = table.rows.length\r\n  var mapping = []\r\n  for (var i = 1; i < rowCount; i++) {\r\n    var row = table.rows[i]\r\n    var input = row.cells[1].childNodes[0]\r\n    if (input.checked) {\r\n      var obj = {}\r\n      /* obj['XMLNODE'] =\r\n        row.className.toLowerCase().indexOf('line') > -1\r\n          ? row.className + '/' + row.cells[2].innerHTML\r\n          : row.cells[2].innerHTML */\r\n      obj['XMLNODE'] = row.cells[3].innerHTML\r\n      //cells 3, 4, 5, 6 have an input type text field inside, get the value from input instead of innerHTML\r\n      obj['S1TABLE1'] = document.getElementById(row.cells[4].childNodes[0].id).value\r\n      obj['S1FIELD1'] = document.getElementById(row.cells[5].childNodes[0].id).value\r\n      if (document.getElementById(row.cells[6].childNodes[0].id).value)\r\n        obj['S1TABLE2'] = document.getElementById(row.cells[6].childNodes[0].id).value\r\n      if (document.getElementById(row.cells[7].childNodes[0].id).value)\r\n        obj['S1FIELD2'] = document.getElementById(row.cells[7].childNodes[0].id).value\r\n      obj['MANDATORY'] = row.cells[2].childNodes[0].checked ? 1 : 0\r\n      //sql\r\n      obj['SQL'] = document.getElementById(row.cells[8].childNodes[0].id).value\r\n      //Observatii\r\n      obj['OBSERVATII'] = document.getElementById(row.cells[10].childNodes[0].id).value\r\n      //add XMLORDER\r\n      obj['XMLORDER'] = parseFloat(row.cells[0].innerHTML)\r\n      mapping.push(obj)\r\n    }\r\n  }\r\n  return mapping\r\n}\r\n\r\nfunction validateMappings() {\r\n  /* var docTable = document.getElementById('documenteBody')\r\n  //get selected row from table documente\r\n  //find cell with input starting with initialdirin\r\n  var cell = docTable.rows[docTable.rows.length - 1].querySelector('input[id^=\"INITIALDIRIN\"]')\r\n  var hasInitialDirIn = cell.value ? true : false\r\n  console.log('hasInitialDirIn', hasInitialDirIn)\r\n  var table = document.getElementById('xmlAsTable')\r\n  //get tbody\r\n  var tbody = table.tBodies[0]\r\n  var rowCount = tbody.rows.length\r\n  var countSelectedRows = 0\r\n  for (var i = 1; i < rowCount; i++) {\r\n    var row = tbody.rows[i]\r\n    var input = row.cells[0].childNodes[0]\r\n    if (input.checked) {\r\n      countSelectedRows++\r\n      if (hasInitialDirIn && !document.getElementById(row.cells[3].childNodes[0].id).value) {\r\n        alert('Please fill in first S1 table field')\r\n        return false\r\n      }\r\n      if (hasInitialDirIn && !document.getElementById(row.cells[4].childNodes[0].id).value) {\r\n        alert('Please fill in first S1 field field')\r\n        return false\r\n      }\r\n    }\r\n  }\r\n  if (countSelectedRows == 0) {\r\n    alert('Please select at least one row')\r\n    return false\r\n  } */\r\n  return true\r\n}\r\n\r\nfunction loadListaDocumente() {\r\n  //get all documents from database table CCCDOCUMENTES1MAPPINGS\r\n  var localStorageRetailer\r\n  try {\r\n    localStorageRetailer = parseInt(localStorage.getItem('trdr_retailer'))\r\n  } catch (err) {\r\n    console.log(err)\r\n    return\r\n  }\r\n  client\r\n    .service('CCCDOCUMENTES1MAPPINGS')\r\n    .find({\r\n      query: {\r\n        TRDR_RETAILER: localStorageRetailer\r\n      }\r\n    })\r\n    .then((res) => {\r\n      console.log(res)\r\n      var table = document.getElementById('documenteBody')\r\n      res.data.forEach((item) => {\r\n        var row = table.insertRow()\r\n        var cell1 = row.insertCell()\r\n        var cell2 = row.insertCell()\r\n        var cell3 = row.insertCell()\r\n        var cell4 = row.insertCell()\r\n        var cell5 = row.insertCell()\r\n        var cell6 = row.insertCell()\r\n        cell1.innerHTML = `<input id = \"FPRMS${item.CCCDOCUMENTES1MAPPINGS}\" class=\"input\" type=\"text\" placeholder=\"FPRMS\" value=\"${item.FPRMS}\" />`\r\n        cell2.innerHTML = `<input id = \"SERIES${item.CCCDOCUMENTES1MAPPINGS}\" class=\"input\" type=\"text\" placeholder=\"SERIES\" value=\"${item.SERIES}\" />`\r\n        cell3.innerHTML = `<input id = \"INITIALDIRIN${item.CCCDOCUMENTES1MAPPINGS}\" class=\"input\" type=\"text\" placeholder=\"INITIALDIRIN\" value=\"${item.INITIALDIRIN}\" />`\r\n        cell4.innerHTML = `<input id = \"INITIALDIROUT${item.CCCDOCUMENTES1MAPPINGS}\" class=\"input\" type=\"text\" placeholder=\"INITIALDIROUT\" value=\"${item.INITIALDIROUT}\" />`\r\n        cell5.innerHTML = `<button class=\"button is-danger is-small\" onclick=\"deleteMapping(${item.CCCDOCUMENTES1MAPPINGS})\">Delete</button>`\r\n        //button for loading xml mappings for current document\r\n        cell5.innerHTML += `<button class=\"button is-info is-small ml-2\" onclick=\"loadMapping(${item.CCCDOCUMENTES1MAPPINGS})\">Load</button>`\r\n        //add button for loading from another document from table documente\r\n        cell5.innerHTML += `<button class=\"button is-info is-small ml-2\" onclick=\"copyFromAnotherDocument(${item.CCCDOCUMENTES1MAPPINGS})\">Clone</button>`\r\n        //cell6 hidden CCCDOCUMENTES1MAPPINGS, no input\r\n        cell6.innerHTML = item.CCCDOCUMENTES1MAPPINGS\r\n        //hide cell6\r\n        cell6.style.display = 'none'\r\n        //name cell6\r\n        cell6.className = 'CCCDOCUMENTES1MAPPINGS'\r\n      })\r\n    })\r\n}\r\n\r\nasync function deleteMapping(id) {\r\n  //ask user if he wants to delete the mapping\r\n  var answer = confirm('Are you sure you want to delete this mapping?')\r\n  if (!answer) {\r\n    return\r\n  }\r\n  //delete from table CCCXMLS1MAPPINGS then CCCDOCUMENTES1MAPPINGS; wait for each transaction to complete\r\n  await client\r\n    .service('CCCXMLS1MAPPINGS')\r\n    .remove(null, { query: { CCCDOCUMENTES1MAPPINGS: id } })\r\n    .then((res) => {\r\n      console.log(res)\r\n    })\r\n\r\n  await client\r\n    .service('CCCDOCUMENTES1MAPPINGS')\r\n    .remove(id)\r\n    .then((res) => {\r\n      console.log(res)\r\n    })\r\n}\r\n\r\nfunction loadMapping(id) {\r\n  //add mappings from db into xmlAsTable table id\r\n  //get all mappings from table CCCXMLS1MAPPINGS\r\n  client\r\n    .service('CCCXMLS1MAPPINGS')\r\n    .find({\r\n      query: {\r\n        CCCDOCUMENTES1MAPPINGS: id,\r\n        $sort: {\r\n          XMLORDER: 1\r\n        }\r\n      }\r\n    })\r\n    .then((res) => {\r\n      console.log(res)\r\n      //get all rows from xmlAsTable\r\n      var table = document.getElementById('xmlAsTable')\r\n      //if xmlAsTable has rows, delete the ones with the same item.XMLNODE in the third column\r\n      res.data.forEach((item) => {\r\n        var rowCount = table.rows.length\r\n        for (var i = 1; i < rowCount; i++) {\r\n          var row = table.rows[i]\r\n          if (row.cells.length && row.cells.length > 5 && row.cells[2].innerHTML == item.XMLNODE) {\r\n            table.deleteRow(i)\r\n            break\r\n          }\r\n        }\r\n      })\r\n      //add rows from db and create xml dom\r\n      //Order is the main node\r\n      //id res length is 0, return\r\n      if (res.data.length == 0) {\r\n        //no data message\r\n        var row = table.insertRow()\r\n        var cell = row.insertCell()\r\n        cell.innerHTML = 'No data'\r\n        cell.colSpan = 9\r\n        cell.style.textAlign = 'center'\r\n        return\r\n      } else {\r\n        //thead if doesn't exist\r\n        if (!table.tHead) {\r\n          addTableHeader(table)\r\n        }\r\n      }\r\n      //create tbody\r\n      addTableBody(table, res.data)\r\n      //add xml dom to xmlTextArea\r\n      addXmlDomToTextArea(res.data)\r\n    })\r\n}\r\n\r\nfunction addTableBody(table, data) {\r\n  //if body doesn't exist create it otherwise get it\r\n  var tbody = table.tBodies[0] ? table.tBodies[0] : table.createTBody()\r\n  data.forEach((item) => {\r\n    //add rows\r\n    var row = tbody.insertRow()\r\n    //add cells\r\n    //xml order\r\n    var xmlOrder = row.insertCell()\r\n    xmlOrder.innerHTML = item.XMLORDER\r\n    xmlOrder.className = 'xmlOrder'\r\n    var pick = row.insertCell()\r\n    var req = row.insertCell()\r\n    var xmlPath = row.insertCell()\r\n    var s1Tbl1 = row.insertCell()\r\n    var s1Fld1 = row.insertCell()\r\n    var s1Tbl2 = row.insertCell()\r\n    var s1Fld2 = row.insertCell()\r\n    var sql = row.insertCell()\r\n    var value = row.insertCell()\r\n    var observatii = row.insertCell()\r\n    //add checkbox for pick\r\n    var input1 = document.createElement('input')\r\n    input1.type = 'checkbox'\r\n    input1.name = item.XMLNODE + '_Remaining'\r\n    input1.className = 'remaining checkbox is-small' //important, used in hideUnselectedRows()\r\n    input1.id = item.XMLNODE + '_Remaining'\r\n    input1.checked = true\r\n    pick.appendChild(input1)\r\n    pick.onclick = function () {\r\n      //change color for entire row\r\n      var row = this.parentNode\r\n      if (this.childNodes[0].checked) {\r\n        row.style.backgroundColor = '#e6ffe6'\r\n      } else {\r\n        row.style.backgroundColor = 'white'\r\n      }\r\n    }\r\n    //add checkbox for req\r\n    var input2 = document.createElement('input')\r\n    input2.type = 'checkbox'\r\n    input2.name = item.XMLNODE + '_Mandatory'\r\n    input2.id = item.XMLNODE + '_Mandatory'\r\n    input2.className = 'mandatory checkbox is-small'\r\n    input2.checked = item.MANDATORY == 1 ? true : false\r\n    req.appendChild(input2)\r\n    //xmlPath\r\n    //if too long word wrap, rember it one word\r\n    xmlPath.style.maxWidth = '300px'\r\n    //wrap\r\n    xmlPath.style.wordWrap = 'break-word'\r\n    xmlPath.innerHTML = item.XMLNODE\r\n    xmlPath.className = 'xmlPath'\r\n    //s1Tbl1\r\n    var input3 = document.createElement('input')\r\n    input3.type = 'text'\r\n    input3.name = item.XMLNODE + '_S1Table1'\r\n    input3.id = item.XMLNODE + '_S1Table1'\r\n    input3.className = 'input is-small'\r\n    input3.value = item.S1TABLE1\r\n    input3.placeholder = 'S1 table'\r\n    s1Tbl1.appendChild(input3)\r\n    //s1Fld1\r\n    var input4 = document.createElement('input')\r\n    input4.type = 'text'\r\n    input4.name = item.XMLNODE + '_S1Field1'\r\n    input4.id = item.XMLNODE + '_S1Field1'\r\n    input4.className = 'input is-small'\r\n    input4.value = item.S1FIELD1\r\n    input4.placeholder = 'S1 field'\r\n    s1Fld1.appendChild(input4)\r\n    //s1Tbl2\r\n    var input5 = document.createElement('input')\r\n    input5.type = 'text'\r\n    input5.name = item.XMLNODE + '_S1Table2'\r\n    input5.id = item.XMLNODE + '_S1Table2'\r\n    input5.className = 'input is-small'\r\n    input5.value = item.S1TABLE2\r\n    input5.placeholder = 'S1 table'\r\n    s1Tbl2.appendChild(input5)\r\n    //s1Fld2\r\n    var input6 = document.createElement('input')\r\n    input6.type = 'text'\r\n    input6.name = item.XMLNODE + '_S1Field2'\r\n    input6.id = item.XMLNODE + '_S1Field2'\r\n    input6.className = 'input is-small'\r\n    input6.value = item.S1FIELD2\r\n    input6.placeholder = 'S1 field'\r\n    s1Fld2.appendChild(input6)\r\n    //Value\r\n    value.innerHTML = ''\r\n    //add sql textarea field\r\n    var input7 = document.createElement('textarea')\r\n    //1 row\r\n    input7.rows = 1\r\n    input7.id = item.XMLNODE + '_Sql'\r\n    input7.className = 'textarea is-small'\r\n    input7.value = item.SQL\r\n    input7.placeholder = 'SQL'\r\n    input7.spellcheck = false\r\n    input7.style.width = '300px'\r\n    sql.appendChild(input7)\r\n\r\n    //add observatii textarea field\r\n    var input8 = document.createElement('textarea')\r\n    //1 row\r\n    input8.rows = 1\r\n    input8.id = item.XMLNODE + '_Observatii'\r\n    input8.className = 'textarea is-small'\r\n    input8.value = item.OBSERVATII\r\n    input8.placeholder = 'Observatii'\r\n    input8.spellcheck = false\r\n    input8.style.width = '300px'\r\n    observatii.appendChild(input8)\r\n    //color row so it can be easily identified\r\n    row.style.backgroundColor = 'whitesmoke'\r\n  })\r\n}\r\n\r\nfunction addXmlDomToTextArea(data) {\r\n  //create xml dom\r\n  var xmlDom = document.implementation.createDocument('', '', null)\r\n  var root = xmlDom.createElement(document.getElementById('xmlRoot').value)\r\n  xmlDom.appendChild(root)\r\n  data.forEach((item) => {\r\n    var xmlNodes = item.XMLNODE.split('/')\r\n    //add xml elements to xml dom\r\n    var root = xmlDom.documentElement //Order or...\r\n    for (var i = 0; i < xmlNodes.length; i++) {\r\n      var node\r\n      //verify if node already exists\r\n      if (root.getElementsByTagName(xmlNodes[i]).length > 0) {\r\n        node = root.getElementsByTagName(xmlNodes[i])[0]\r\n        root.appendChild(node)\r\n        root = node\r\n      } else {\r\n        try {\r\n          node = xmlDom.createElement(xmlNodes[i])\r\n          root.appendChild(node)\r\n          root = node\r\n        } catch (err) {\r\n          console.log(err)\r\n        }\r\n      }\r\n    }\r\n  })\r\n  //add xml dom to xmlTextArea\r\n  var xmlTextArea = document.getElementById('xmlTextArea')\r\n  xmlTextArea.value = xmlDom.documentElement.outerHTML\r\n}\r\n\r\nloadListaDocumente()\r\n\r\nfunction searchTable(tableId, searchBoxId) {\r\n  // Declare variables\r\n  var input, filter, table, tr, td, i, txtValue\r\n  input = document.getElementById(searchBoxId)\r\n  filter = input.value.toUpperCase()\r\n  table = document.getElementById(tableId)\r\n  //search third column\r\n  tr = table.getElementsByTagName('tr')\r\n  // Loop through all table rows, and hide those who don't match the search query\r\n  for (i = 0; i < tr.length; i++) {\r\n    td = tr[i].getElementsByTagName('td')[2]\r\n    if (td) {\r\n      txtValue = td.textContent || td.innerText\r\n      if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n        tr[i].style.display = ''\r\n      } else {\r\n        tr[i].style.display = 'none'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nasync function sendOrder(xml, xmlFilename, xmlDate, retailer) {\r\n  return await createOrderJSONRefactored(xml, 1351, 701, 7012, xmlFilename, xmlDate, retailer)\r\n}\r\n\r\nasync function createOrderJSONRefactored(xml, sosource, fprms, series, xmlFilename, xmlDate, retailer) {\r\n  //use await instead of promises\r\n  //get a token for s1 connection\r\n  var res = await client.service('CCCRETAILERSCLIENTS').find({\r\n    query: {\r\n      TRDR_CLIENT: 1\r\n    }\r\n  })\r\n  console.log('date logare', res)\r\n  var url = res.data[0].WSURL\r\n  var username = res.data[0].WSUSER\r\n  var password = res.data[0].WSPASS\r\n  var res = await client.service('connectToS1').find({\r\n    query: {\r\n      url: url,\r\n      username: username,\r\n      password: password\r\n    }\r\n  })\r\n  console.log('connectToS1', res)\r\n  var token = res.token\r\n  //get CCCDOCUMENTES1MAPPINGS for sourcCCCDOCUMENTES1MAPPINGSe, fprms, series\r\n  var res = await client.service('CCCDOCUMENTES1MAPPINGS').find({\r\n    query: {\r\n      SOSOURCE: sosource,\r\n      FPRMS: fprms,\r\n      SERIES: series,\r\n      TRDR_RETAILER: retailer\r\n    }\r\n  })\r\n  console.log('CCCDOCUMENTES1MAPPINGS', res)\r\n\r\n  var CCCDOCUMENTES1MAPPINGS = res.data[0].CCCDOCUMENTES1MAPPINGS\r\n  //get CCCXMLS1MAPPINGS for CCCDOCUMENTES1MAPPINGS\r\n  var res = await client.service('CCCXMLS1MAPPINGS').find({\r\n    query: {\r\n      CCCDOCUMENTES1MAPPINGS: CCCDOCUMENTES1MAPPINGS\r\n    }\r\n  })\r\n  console.log('CCCXMLS1MAPPINGS', res)\r\n  var CCCXMLS1MAPPINGS = res.data\r\n  //create json order\r\n  var jsonOrder = {}\r\n  jsonOrder['service'] = 'setData'\r\n  jsonOrder['clientID'] = token\r\n  jsonOrder['appId'] = 1001\r\n  jsonOrder['OBJECT'] = 'SALDOC'\r\n  jsonOrder['FORM'] = 'EFIntegrareRetailers'\r\n\r\n  //find distinct S1TABLE1, for grouping data\r\n  var distinctS1TABLE1 = []\r\n  CCCXMLS1MAPPINGS.forEach((item) => {\r\n    if (distinctS1TABLE1.indexOf(item.S1TABLE1) == -1) {\r\n      distinctS1TABLE1.push(item.S1TABLE1)\r\n    }\r\n  })\r\n  console.log('distinctS1TABLE1', distinctS1TABLE1)\r\n  //create jsonOrder['DATA']\r\n  var DATA = {}\r\n  //create jsonOrder['DATA'][distinct]\r\n  distinctS1TABLE1.forEach((item) => {\r\n    DATA[item] = []\r\n  })\r\n  //add data to jsonOrder['DATA'][distinct]\r\n  CCCXMLS1MAPPINGS.forEach((item) => {\r\n    var xmlVals = getValFromXML(xml, item.XMLNODE)\r\n    xmlVals.forEach((xmlVal) => {\r\n      var val = 0\r\n      if (item.SQL) {\r\n        //SQL: select trdbranch from trdbranch where trdr=12334 and cccs1dxgln='{value}'\r\n        //{value} is the value from xml for current node\r\n        //execute sql\r\n        /*\r\n              executeSQL(sql).then((res) => {\r\n                console.log('res', res)\r\n                val = res.data[0][item.S1FIELD1]\r\n              })\r\n              */\r\n        val = { SQL: item.SQL, value: xmlVal }\r\n      } else {\r\n        val = xmlVal\r\n      }\r\n      var obj = {}\r\n      obj[item.S1FIELD1] = val\r\n      DATA[item.S1TABLE1].push(obj)\r\n    })\r\n  })\r\n  jsonOrder['DATA'] = DATA\r\n\r\n  console.log('jsonOrder', jsonOrder)\r\n\r\n  //for each value containing an object, replace it with the returned getDataset value from the object\r\n  //for ex: {SQL: \"select trdbranch from trdbranch where trdr=12334 and cccs1dxgln='{value}'\"}\r\n  //replace it with the client.service('getDataset').find({SQL: \"select trdbranch from trdbranch where trdr=12334 and cccs1dxgln='{value}'\"})\r\n  //parse jsonOrder['DATA'] to get all objects\r\n  var objects = []\r\n  for (var key in jsonOrder['DATA']) {\r\n    jsonOrder['DATA'][key].forEach((item) => {\r\n      objects.push(item)\r\n    })\r\n  }\r\n  console.log('objects', objects)\r\n  var errors = [],\r\n    errors2 = []\r\n  //if object has an object with a key SQL, replace it with the returned getDataset value from the object\r\n  for (var i = 0; i < objects.length; i++) {\r\n    var item = objects[i]\r\n    for (var key in item) {\r\n      if (typeof item[key] == 'object') {\r\n        if (item[key].SQL) {\r\n          console.log('SQL', item[key].SQL)\r\n          console.log('xml Value', item[key].value)\r\n          //replace item[key] with the returned getDataset value from the object\r\n\r\n          //set params' query\r\n          var params = {}\r\n          params['query'] = {}\r\n          params['query']['sqlQuery'] = item[key].SQL\r\n          //replace {value} with xml value\r\n          params['query']['sqlQuery'] = params['query']['sqlQuery'].replace('{value}', item[key].value)\r\n          var res = await client.service('getDataset').find(params)\r\n          console.log('getDataset', JSON.stringify(res))\r\n          if (res.data) {\r\n            item[key] = res.data\r\n          } else {\r\n            //1. xml > dom\r\n            var parser = new DOMParser()\r\n            var xmlDoc = parser.parseFromString(xml, 'text/xml')\r\n            /*2.1. example\r\n            <Item><Description>Litter without roof Stefanplast Sprint Corner Plus, Blue, 40x56x h 14</Description><BuyersItemIdentification>8003507968158</BuyersItemIdentification><SellersItemIdentification>MF.06759</SellersItemIdentification><StandardItemIdentification>8003507968158</StandardItemIdentification><AdditionalItemIdentification>DeliveryDate:2023-10-03</AdditionalItemIdentification><AdditionalItemIdentification>LineStatus:valid</AdditionalItemIdentification><AdditionalItemIdentification>ClientConfirmationStatus:confirmed</AdditionalItemIdentification></Item>\r\n            */\r\n            //2.2. xpath: find node with item[key].value and coresponing sibling \"Description\"\r\n            var xpath = `//*[contains(text(), '${item[key].value}')]`\r\n            console.log('xpath', xpath, 'key', key, 'value', item[key].value, 'sql', item[key].SQL)\r\n            var nodes = xmlDoc.evaluate(xpath, xmlDoc, null, XPathResult.ANY_TYPE, null)\r\n            console.log('nodes', nodes)\r\n            errors2.push({ key: key, value: item[key].value, sql: item[key].SQL, xpath: xpath, nodes: nodes })\r\n            try {\r\n              var node = nodes.iterateNext()\r\n              //2.3. get sibling \"Description\"\r\n              var description = node.parentNode.getElementsByTagName('Description')[0].innerHTML\r\n              //2.4. get sibling \"BuyersItemIdentification\"\r\n              var BuyersItemIdentification =\r\n                node.parentNode.getElementsByTagName('BuyersItemIdentification')[0].innerHTML\r\n              //make error message fiendly\r\n              errors.push(\r\n                `Error in converting code ${item[key].value} to S1 value.\\nDescription: ${description},\\nBuyersItemIdentification: ${BuyersItemIdentification}`\r\n              )\r\n            } catch (err) {\r\n              console.log(err)\r\n              errors.push(`Error in converting code ${item[key].value} to S1 value.`)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (errors.length > 0) {\r\n    alert(errors.join('\\n\\n'))\r\n  }\r\n\r\n  if (errors2.length > 0) {\r\n    console.log('errors2', errors2)\r\n    return { success: false, errors: errors2 }\r\n  }\r\n\r\n  //match mtrl with price and qty1 in an object in itelines array\r\n  var itelines = jsonOrder['DATA']['ITELINES']\r\n  //select distinct fieldnames from itelines\r\n  var fieldNames = []\r\n  itelines.forEach((item) => {\r\n    for (var key in item) {\r\n      if (fieldNames.indexOf(key) == -1) {\r\n        fieldNames.push(key)\r\n      }\r\n    }\r\n  })\r\n  //create n distinct arrays for each fieldname\r\n  var arrays = {}\r\n  fieldNames.forEach((item) => {\r\n    arrays[item] = []\r\n  })\r\n  //add values to arrays\r\n  itelines.forEach((item) => {\r\n    for (var key in item) {\r\n      arrays[key].push(item[key])\r\n    }\r\n  })\r\n\r\n  //create itelines array\r\n  var itelines = []\r\n  //create objects with fieldnames and values\r\n  for (var i = 0; i < arrays[fieldNames[0]].length; i++) {\r\n    var obj = {}\r\n    for (var j = 0; j < fieldNames.length; j++) {\r\n      obj[fieldNames[j]] = arrays[fieldNames[j]][i]\r\n    }\r\n    itelines.push(obj)\r\n  }\r\n\r\n  //add itelines to jsonOrder['DATA']\r\n  jsonOrder['DATA']['ITELINES'] = itelines\r\n\r\n  distinctS1TABLE1.forEach((item) => {\r\n    //except itelines\r\n    if (item != 'ITELINES') {\r\n      var obj = {}\r\n      jsonOrder['DATA'][item].forEach((item2) => {\r\n        for (var key in item2) {\r\n          obj[key] = item2[key]\r\n        }\r\n      })\r\n      jsonOrder['DATA'][item] = [obj]\r\n    }\r\n  })\r\n\r\n  //add series and trdr to SALDOC\r\n  jsonOrder['DATA']['SALDOC'][0]['SERIES'] = series\r\n  //TRDR_RETAILER\r\n  localStorageRetailer = parseInt(localStorage.getItem('trdr_retailer'))\r\n  jsonOrder['DATA']['SALDOC'][0]['TRDR'] = localStorageRetailer\r\n\r\n  console.log('jsonOrder', jsonOrder)\r\n\r\n  //send order to server\r\n  await sendOrderToServer(jsonOrder, xmlFilename, xmlDate, retailer)\r\n\r\n  return { success: true }\r\n}\r\n\r\nasync function sendOrderToServer(jsonOrder, xmlFilename, xmlDate, retailer) {\r\n  //1. url, username and password returnd from call to service CCCRETAILERSCLIENTS\r\n  //2. server new service: app.use('connectToS1', new connectToS1ServiceClass()) return connection token to use in axios call\r\n  //3. call setDocument service with jsonOrder and token\r\n\r\n  //1. url, username and password returnd from call to service CCCRETAILERSCLIENTS\r\n  await client\r\n    .service('CCCRETAILERSCLIENTS')\r\n    .find({\r\n      query: {\r\n        TRDR_CLIENT: 1\r\n      }\r\n    })\r\n    .then(async (res) => {\r\n      console.log('date logare', res)\r\n      //2. server new service: app.use('connectToS1', new connectToS1ServiceClass()) return connection token to use in axios call\r\n      var url = res.data[0].WSURL\r\n      var username = res.data[0].WSUSER\r\n      var password = res.data[0].WSPASS\r\n      await client\r\n        .service('connectToS1')\r\n        .find({\r\n          query: {\r\n            url: url,\r\n            username: username,\r\n            password: password\r\n          }\r\n        })\r\n        .then(async (res) => {\r\n          console.log(res)\r\n          console.log('s1 token', res.token)\r\n          //replace jsonOrder clientID with token\r\n          jsonOrder['clientID'] = res.token\r\n          console.log('jsonOrder', jsonOrder)\r\n          console.log('url', url)\r\n          await client\r\n            .service('setDocument')\r\n            .create(jsonOrder)\r\n            .then((res) => {\r\n              console.log(res)\r\n              if (res.success == true) {\r\n                alert('Order sent to S1, order internal number: ' + res.id)\r\n                //update CCCSFTPXML with order internal number as findoc\r\n                client\r\n                  .service('CCCSFTPXML')\r\n                  .patch(\r\n                    null,\r\n                    { FINDOC: parseInt(res.id) },\r\n                    { query: { XMLFILENAME: xmlFilename, XMLDATE: xmlDate, TRDR_RETAILER: retailer } }\r\n                  )\r\n                  .then((res) => {\r\n                    console.log('CCCSFTPXML patch', res)\r\n                    //refresh xml table\r\n                    displayXmlDataForRetailer(retailer)\r\n                  })\r\n              } else {\r\n                alert('Error: ' + res.error)\r\n              }\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\nfunction getValFromXML(xml, node) {\r\n  //Xpath\r\n  var dom = new DOMParser().parseFromString(xml, 'text/xml')\r\n  var doc = dom.documentElement\r\n  //console.log('getValFromXML', doc)\r\n  //node value by xpath\r\n  var iterator = dom.evaluate(node, doc, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null)\r\n  console.log('getValFromXML', iterator)\r\n  var matchingNodes = []\r\n  try {\r\n    let thisNode = iterator.iterateNext()\r\n\r\n    while (thisNode) {\r\n      // console.log(thisNode.textContent)\r\n      matchingNodes.push(thisNode.textContent)\r\n      thisNode = iterator.iterateNext()\r\n    }\r\n  } catch (e) {\r\n    console.error(`Error: Document tree modified during iteration ${e}`)\r\n  }\r\n\r\n  return matchingNodes\r\n}\r\n\r\nasync function fetchXMLFromRemoteServer() {\r\n  //1. localStorage.getItem('trdr_retailer')\r\n  //2. client.service('sftp').downloadXml({}, { query: { retailer: localStorage.getItem('trdr_retailer') } })\r\n  //3. client.service('sftp').storeXmlInDB({}, { query: { retailer: localStorage.getItem('trdr_retailer') } })\r\n  //4. displayXmlDataForRetailer(localStorage.getItem('trdr_retailer'))\"\r\n  //5. change document.getElementById('preluareComenziBtn') text according to stage of process\r\n  var retailer\r\n  try {\r\n    retailer = parseInt(localStorage.getItem('trdr_retailer'))\r\n  } catch (err) {\r\n    alert('Please select a retailer')\r\n    console.log('Please select a retailer')\r\n    return\r\n  }\r\n  //change button text\r\n  document.getElementById('preluareComenziBtn').innerHTML = 'Please wait...'\r\n  //1. localStorage.getItem('trdr_retailer')\r\n  //2. client.service('sftp').downloadXml({}, { query: { retailer: localStorage.getItem('trdr_retailer') } })\r\n  await client\r\n    .service('sftp')\r\n    .downloadXml({}, { query: { retailer: retailer } })\r\n    .then((res) => {\r\n      console.log('downloadXml', res)\r\n    })\r\n\r\n  //3. client.service('sftp').storeXmlInDB({}, { query: { retailer: localStorage.getItem('trdr_retailer') } })\r\n  await client\r\n    .service('sftp')\r\n    .storeXmlInDB({}, { query: { retailer: retailer } })\r\n    .then((res) => {\r\n      console.log('storeXmlInDB', res)\r\n    })\r\n\r\n  //4. displayXmlDataForRetailer(localStorage.getItem('trdr_retailer'))\"\r\n  await displayXmlDataForRetailer(retailer)\r\n  //5. change document.getElementById('preluareComenziBtn') text according to stage of process\r\n  document.getElementById('preluareComenziBtn').innerHTML = 'Preluare comenzi'\r\n}\r\n\r\nasync function displayXmlDataForRetailer(retailer) {\r\n  //localStorage.getItem('trdr_retailer')\r\n  await getRetailerXMLData(retailer).then((data) => {\r\n    console.log('getRetailerXMLData', data)\r\n    //get the table body\r\n    const xmlTableBody = document.getElementById('xmlTableBody')\r\n    //empty the table body\r\n    xmlTableBody.innerHTML = ''\r\n    //loop through the data\r\n    data.data.forEach(async (xml) => {\r\n      //create a new row\r\n      var row = xmlTableBody.insertRow()\r\n      //insert the cells\r\n      var humanDate = new Date(xml.XMLDATE).toLocaleString()\r\n      row.insertCell().innerHTML = humanDate\r\n      //row.insertCell().innerHTML = xml.XMLFILENAME ? xml.XMLFILENAME : ''\r\n      var filenameCell = row.insertCell()\r\n      filenameCell.innerHTML = xml.XMLFILENAME ? xml.XMLFILENAME : ''\r\n      row.insertCell().innerHTML =\r\n        '<textarea class=\"textarea is-small is-info\" rows=\"10\" cols=\"50\">' + xml.XMLDATA + '</textarea>'\r\n      //spellcheck=\"false\"\r\n      row.cells[2].spellcheck = false\r\n      //row.insertCell().innerHTML = xml.JSONDATA\r\n      var parser = new DOMParser()\r\n      var xmlDoc = parser.parseFromString(xml.XMLDATA, 'text/xml')\r\n      //parse xml to dom and find <AccountingCustomerParty> something <PartyName> node\r\n      var partyName = xmlDoc.getElementsByTagName('AccountingCustomerParty')[0]\r\n        ? xmlDoc.getElementsByTagName('AccountingCustomerParty')[0].getElementsByTagName('PartyName')[0]\r\n        : null\r\n      //get /Order/ID value\r\n      var orderId = getValFromXML(xml.XMLDATA, '/Order/ID')[0]\r\n      //if exists append to cell xmlfilename\r\n      if (orderId) {\r\n        filenameCell.innerHTML += '<br><span class=\"tag is-info is-light\">' + orderId + '</span>'\r\n      }\r\n      row.insertCell().innerHTML = partyName ? partyName.innerHTML : ''\r\n      //create the actions cell\r\n      var actionsCell = row.insertCell()\r\n      //create the buttons\r\n      var saveButton = document.createElement('button')\r\n      saveButton.innerHTML = 'Save'\r\n      saveButton.className = 'button is-small is-info ml-2'\r\n      saveButton.onclick = function () {\r\n        //save the xml to file\r\n        var xmlBlob = new Blob([xml.XMLDATA], { type: 'text/xml' })\r\n        var xmlURL = window.URL.createObjectURL(xmlBlob)\r\n        var tempLink = document.createElement('a')\r\n        tempLink.href = xmlURL\r\n        tempLink.setAttribute('download', xml.XMLFILENAME)\r\n        tempLink.click()\r\n      }\r\n      var copyButton = document.createElement('button')\r\n      copyButton.innerHTML = 'Copy'\r\n      copyButton.className = 'button is-small is-primary ml-2'\r\n      copyButton.onclick = function () {\r\n        //copy the xml to clipboard\r\n        navigator.clipboard.writeText(xml.XMLDATA).then(\r\n          function () {\r\n            alert('copied')\r\n          },\r\n          function (err) {\r\n            console.error('Async: Could not copy text: ', err)\r\n          }\r\n        )\r\n      }\r\n      var deleteButton = document.createElement('button')\r\n      deleteButton.innerHTML = 'Delete'\r\n      deleteButton.className = 'button is-small is-danger ml-2'\r\n      deleteButton.onclick = function () {\r\n        alert('delete')\r\n      }\r\n      //send order\r\n      var sendOrderButton = document.createElement('button')\r\n      sendOrderButton.innerHTML = xml.FINDOC ? 'Order sent' : 'Send order'\r\n      sendOrderButton.className = 'button is-small is-success ml-2'\r\n      sendOrderButton.onclick = async function () {\r\n        //daca am findoc nu mai trimit\r\n        if (!xml.FINDOC) {\r\n          sendOrderButton.innerHTML = 'Sending...'\r\n          var response = await sendOrder(xml.XMLDATA, xml.XMLFILENAME, xml.XMLDATE, retailer)\r\n          if (response.success == false) {\r\n            //show no of errors\r\n            var errorMsg = ''\r\n            errorMsg += 'Errors: ' + response.errors.length + '\\n\\n'\r\n            for (var i = 0; i < response.errors.length; i++) {\r\n              var error = response.errors[i]\r\n              //{ key: key, value: item[key].value, sql: item[key].SQL, xpath: xpath, nodes: nodes }\r\n              //if error.sql contains \"from trdbranch\" then the title of error is Sucursala\r\n              if (error.sql.indexOf('from trdbranch') > -1) {\r\n                error.title = 'Sucursala'\r\n              }\r\n              //display title\r\n              errorMsg += i + 1 + '.' + error.title + '\\n'\r\n              //count title characters and add dashes under it\r\n              for (var j = 0; j < error.title.length; j++) {\r\n                errorMsg += '-'\r\n              }\r\n              errorMsg += '\\n'\r\n              errorMsg += `Error in converting ${error.key} code ${error.value} to S1 value.\\nSQL: ${\r\n                error.sql\r\n              },\\nNodes: ${error.nodes.iterateNext().parentNode.innerHTML}\\n\\n`\r\n              sendOrderButton.innerHTML = 'See errors'\r\n              //add text area with errors beneath the buttons\r\n              var textarea = document.createElement('textarea')\r\n              textarea.rows = 10\r\n              textarea.cols = 50\r\n              textarea.innerHTML = errorMsg\r\n              actionsCell.appendChild(textarea)\r\n              //no spellcheck\r\n              textarea.spellcheck = false\r\n              //class\r\n              textarea.className = 'textarea is-small is-danger'\r\n            }\r\n            return\r\n          } else {\r\n            sendOrderButton.innerHTML = 'Order sent'\r\n          }\r\n        } else {\r\n          alert('Already sent')\r\n        }\r\n      }\r\n      //append the buttons to the actions cell\r\n      actionsCell.appendChild(saveButton)\r\n      actionsCell.appendChild(copyButton)\r\n      actionsCell.appendChild(deleteButton)\r\n      actionsCell.appendChild(sendOrderButton)\r\n\r\n      //add cell for findoc\r\n      var findoc = row.insertCell()\r\n      //add class for findoc\r\n      findoc.className = 'findoc'\r\n      //if findoc is not null, add a green tick, else add a red cross; big icons\r\n      if (xml.FINDOC) {\r\n        findoc.innerHTML = '<i class=\"fas fa-xl fa-check-circle has-text-success\"></i><br><br>' + xml.FINDOC\r\n      } else {\r\n        //verify if order was sent but not confirmed\r\n        //get Order > ID value from XMLDATA and search in SALDOC table by processSqlAsDataset\r\n        var orderId = getValFromXML(xml.XMLDATA, '/Order/ID')[0]\r\n        console.log('orderId', orderId)\r\n        //get order from SALDOC\r\n        var params = {}\r\n        params['query'] = {}\r\n        params['query'][\r\n          'sqlQuery'\r\n        ] = `select findoc from findoc where sosource=1351 and trdr=${retailer} and num04='${orderId}'`\r\n        var res = await client.service('getDataset').find(params)\r\n        console.log('getDataset', JSON.stringify(res))\r\n        if (res.data) {\r\n          findoc.innerHTML = '<i class=\"fas fa-xl fa-check-circle has-text-success\"></i><br><br>' + res.data\r\n          //update CCCSFTPXML with order internal number as findoc\r\n          client\r\n            .service('CCCSFTPXML')\r\n            .patch(\r\n              null,\r\n              { FINDOC: parseInt(res.data) },\r\n              { query: { XMLFILENAME: xml.XMLFILENAME, XMLDATE: xml.XMLDATE, TRDR_RETAILER: retailer } }\r\n            )\r\n            .then((res) => {\r\n              console.log('CCCSFTPXML patch', res)\r\n            })\r\n          //button text\r\n          sendOrderButton.innerHTML = 'Order sent'\r\n        } else {\r\n          findoc.innerHTML = '<i class=\"fas fa-xl fa-times-circle has-text-danger\"></i>'\r\n          //add a checkbox to actions cell\r\n          var input = document.createElement('input')\r\n          input.type = 'checkbox'\r\n          input.name = xml.XMLFILENAME\r\n          input.id = xml.XMLFILENAME\r\n          input.className = 'checkbox is-small ml-2'\r\n          actionsCell.appendChild(input)\r\n        }\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nfunction copyFromAnotherDocument(id) {\r\n  alert('to be implemented')\r\n}\r\n\r\nasync function fetchDocsFromS1WS(sosource, fprms, series) {\r\n  var trdr\r\n  try {\r\n    trdr = parseInt(localStorage.getItem('trdr_retailer'))\r\n  } catch (err) {\r\n    alert('Please select a retailer')\r\n    console.log('Please select a retailer')\r\n    return\r\n  }\r\n  console.log('trdr', trdr)\r\n  //Open tab facturi\r\n  document.getElementById('facturi_link').click()\r\n  var daysOlder = document.getElementById('daysOlder').value\r\n  client\r\n    .service('getS1SqlData')\r\n    .find({\r\n      query: {\r\n        clientID: await client\r\n          .service('connectToS1')\r\n          .find()\r\n          .then((result) => {\r\n            return result.token\r\n          }),\r\n        appID: '1001',\r\n        SqlName: 'Retailers_Index_Docs',\r\n        trdr: trdr,\r\n        sosource: sosource,\r\n        fprms: fprms,\r\n        series: series,\r\n        daysOlder: daysOlder\r\n      }\r\n    })\r\n    .then(async (result) => {\r\n      console.debug(JSON.stringify(result, null, 2))\r\n      displayDocsForRetailers(result, trdr, sosource, fprms, series)\r\n    })\r\n}\r\n\r\nfunction displayDocsForRetailers(result, trdr, sosource, fprms, series) {\r\n  /*\r\n      response like {\r\n  \"success\": true,\r\n  \"totalcount\": 1,\r\n  \"rows\": [\r\n    {\r\n      \"findoc\": \"1236204\"\r\n      \"trndate\": \"2023-09-20 00:00:00\",\r\n      \"fincode\": \"FAEX-PF-16625\",\r\n      \"sumamnt\": \"1888.45\"\r\n    }\r\n    ]\r\n  }\r\n      */\r\n  const tbody = document.getElementById('facturiTableBody')\r\n  tbody.innerHTML = ''\r\n  if (result.success == false) {\r\n    var tr = tbody.insertRow()\r\n    var td = tr.insertCell()\r\n    td.innerHTML = 'Error: ' + result.error\r\n    td.colSpan = 3\r\n    td.style.textAlign = 'center'\r\n    return\r\n  }\r\n\r\n  if (result.totalcount == 0) {\r\n    var tr = tbody.insertRow()\r\n    var td = tr.insertCell()\r\n    td.innerHTML = 'No data'\r\n    td.colSpan = 6\r\n    td.style.textAlign = 'center'\r\n    td.style.color = 'red'\r\n    td.style.fontWeight = 'bold'\r\n    td.style.fontSize = '20px'\r\n    return\r\n  }\r\n\r\n  result.rows.forEach((row) => {\r\n    var tr = tbody.insertRow()\r\n    var findoc = tr.insertCell()\r\n    findoc.innerHTML = row.findoc\r\n    //hide findoc\r\n    findoc.style.display = 'none'\r\n    var trndate = tr.insertCell()\r\n    //trndate.innerHTML = row.trndate\r\n    //check for ' 00:00:00'\r\n    if (row.trndate.indexOf(' 00:00:00') > -1) {\r\n      trndate.innerHTML = row.trndate.replace(' 00:00:00', '')\r\n    } else {\r\n      trndate.innerHTML = row.trndate\r\n    }\r\n    var fincode = tr.insertCell()\r\n    //add row.fincode and a empty text input all inlined; input text has unique id\r\n    fincode.innerHTML =\r\n      row.fincode +\r\n      '<input type=\"text\" id=\"' +\r\n      row.fincode +\r\n      '_postfix\" class=\"input is-small ml-2\" style=\"width: 100px;\">'\r\n    var sumamnt = tr.insertCell()\r\n    sumamnt.innerHTML = row.sumamnt\r\n    //create actions cell\r\n    var actions = tr.insertCell()\r\n\r\n    //create xml button\r\n    var button2 = document.createElement('button')\r\n    button2.className = 'button is-small is-info ml-2'\r\n    button2.innerHTML = 'Create XML'\r\n    button2.onclick = async function () {\r\n      /* var domObj = await createXML(row.findoc, trdr, sosource, fprms, series)\r\n      //wait for domObj\r\n      while (domObj == undefined) {\r\n        await new Promise((resolve) => setTimeout(resolve, 1000))\r\n      }\r\n      console.log('domObj', domObj)\r\n      //var domObj = await cheatGetXmlFromS1(row.findoc)\r\n      if (domObj.trimis == true) {\r\n        alert('Factura a fost deja trimisa')\r\n        return\r\n      }*/\r\n      const domObj = await cheatGetXmlFromS1(row.findoc)\r\n      /*\r\n      if (domObj.trimis == false) { */\r\n      //add cell and textarea\r\n      var textarea = document.createElement('textarea')\r\n      textarea.className = 'textarea is-small'\r\n      textarea.rows = 10\r\n      textarea.cols = 50\r\n      textarea.innerHTML = domObj.dom\r\n      //no spellcheck\r\n      textarea.spellcheck = false\r\n      //add cell\r\n      var td = tr.insertCell()\r\n      td.appendChild(textarea)\r\n      //}\r\n    }\r\n    actions.appendChild(button2)\r\n    //save xml button\r\n    var button3 = document.createElement('button')\r\n    button3.className = 'button is-small is-primary ml-2'\r\n    button3.innerHTML = 'Save XML'\r\n    button3.onclick = async function () {\r\n      //const xml = await createXML(row.findoc, trdr, sosource, fprms, series)\r\n      const domObj = await cheatGetXmlFromS1(row.findoc)\r\n      if (domObj.trimis == true) {\r\n        alert('Factura a fost deja trimisa')\r\n        return\r\n      } else {\r\n        const xml = domObj.dom\r\n        domObj.filename = getNewFilenamePostfix(domObj.filename, row)\r\n        //save the xml to file\r\n        var xmlBlob = new Blob([xml], { type: 'text/xml' })\r\n        var xmlURL = window.URL.createObjectURL(xmlBlob)\r\n        var tempLink = document.createElement('a')\r\n        tempLink.href = xmlURL\r\n        tempLink.setAttribute('download', domObj.filename + '.xml')\r\n        tempLink.click()\r\n      }\r\n    }\r\n    actions.appendChild(button3)\r\n    var button = document.createElement('button')\r\n    button.className = 'button is-small is-success ml-2'\r\n    //set id\r\n    button.id = row.findoc + '_sendInvoice'\r\n    button.innerHTML = 'Send Invoice'\r\n    button.onclick = async function () {\r\n      sendAndMark(row, tr, button.id)\r\n    }\r\n    actions.appendChild(button)\r\n    //add cell trimis\r\n    var trimis = tr.insertCell()\r\n    //add class for trimis\r\n    trimis.className = 'trimis'\r\n    //trimis.innerHTML = row.CCCXMLSendDate\r\n    if (row.CCCXMLSendDate) {\r\n      trimis.innerHTML = '<i class=\"fas fa-xl fa-check-circle has-text-success\"></i>  ' + row.CCCXMLSendDate\r\n      //add link to trimis cell for resending invoice with overrideTrimis = true\r\n      var resend = document.createElement('a')\r\n      resend.innerHTML = 'Resend'\r\n      resend.className = 'button is-small is-danger ml-2'\r\n      resend.onclick = async function () {\r\n        //ask if sure\r\n        var r = confirm('Resend invoice?')\r\n        if (r == true) {\r\n          sendAndMark(row, tr, button.id, true)\r\n        }\r\n      }\r\n      trimis.appendChild(resend)\r\n    } else {\r\n      trimis.innerHTML = '<i class=\"fas fa-xl fa-times-circle has-text-danger\"></i>'\r\n    }\r\n  })\r\n}\r\n\r\nasync function sendAndMark(row, tr, elemId, overrideTrimis = false) {\r\n  //send invoice\r\n  var button = document.getElementById(elemId)\r\n  var domObj = await cheatGetXmlFromS1(row.findoc)\r\n  if (domObj.trimis == true && overrideTrimis == false) {\r\n    alert('Factura a fost deja trimisa')\r\n    return\r\n  }\r\n  //update btn caption to sending\r\n  //font awesome spinner\r\n  button.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i>Sending...'\r\n  //alter domObj filename with postfix\r\n  domObj.filename = getNewFilenamePostfix(domObj.filename, row)\r\n  await sendInvoice(row.findoc, domObj, overrideTrimis).then(async (response) => {\r\n    //update btn caption to sent\r\n    button.innerHTML = 'Sent'\r\n    console.log('response', response)\r\n    var xml = response.xml\r\n    var success = response.success\r\n    if (success == true) {\r\n      //add cell and textarea\r\n      var textarea = document.createElement('textarea')\r\n      textarea.className = 'textarea is-small'\r\n      textarea.rows = 10\r\n      textarea.cols = 50\r\n      textarea.innerHTML = xml\r\n      //no spellcheck\r\n      textarea.spellcheck = false\r\n      //add cell\r\n      var td = tr.insertCell()\r\n      td.appendChild(textarea)\r\n    }\r\n    var body = {}\r\n    body['service'] = 'setData'\r\n    body['clientID'] = await client\r\n      .service('connectToS1')\r\n      .find()\r\n      .then((result) => {\r\n        return result.token\r\n      })\r\n    body['appId'] = '1001'\r\n    body['OBJECT'] = 'SALDOC'\r\n    body['FORM'] = 'EFIntegrareRetailers'\r\n    body['KEY'] = row.findoc\r\n    body['DATA'] = {}\r\n    body['DATA']['MTRDOC'] = [{ CCCXMLSendDate: new Date().toISOString().slice(0, 19).replace('T', ' ') }]\r\n    console.log('body', body)\r\n    await client\r\n      .service('setDocument')\r\n      .create(body)\r\n      .then((res) => {\r\n        console.log(res)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)\r\n      })\r\n  })\r\n  //update btn caption to sent\r\n  button.innerHTML = 'Sent Invoice'\r\n  //find cell class=\"trimis\" in current row and add date now and green check\r\n  var trimis = tr.getElementsByClassName('trimis')[0]\r\n  trimis.innerHTML =\r\n    '<i class=\"fas fa-xl fa-check-circle has-text-success\"></i>  ' +\r\n    new Date().toISOString().slice(0, 19).replace('T', ' ')\r\n}\r\n\r\nasync function sendInvoice(findoc, domObj, overrideTrimis = false) {\r\n  var response = { success: false, xml: '' }\r\n  var localStorageRetailer\r\n  try {\r\n    localStorageRetailer = parseInt(localStorage.getItem('trdr_retailer'))\r\n  } catch (err) {\r\n    alert('Please select a retailer')\r\n    return\r\n  }\r\n\r\n  console.log('localStorageRetailer', localStorageRetailer)\r\n\r\n  if (domObj.trimis == false || overrideTrimis == true) {\r\n    //uploadXml service\r\n    var xml = domObj.dom\r\n    var filename = domObj.filename\r\n    await client\r\n      .service('sftp')\r\n      .uploadXml(\r\n        { findoc: findoc, xml: xml, filename: filename },\r\n        { query: { retailer: localStorageRetailer } }\r\n      )\r\n      .then((res) => {\r\n        console.log('sftp uploadXml', res)\r\n        if (res && Object.keys(res).length > 0 && Object.hasOwnProperty.call(res, 'success')) {\r\n          if (res.success == true) {\r\n            alert('Factura fost trimisa cu succes sub denumirea ' + res.filename + ' (' + res.findoc + ')')\r\n            response = { success: true, xml: xml }\r\n          } else {\r\n            alert('Eroare la trimiterea facturii')\r\n            response = { success: false, xml: xml }\r\n          }\r\n        } else {\r\n          alert('No response from server')\r\n          response = { success: false, xml: xml }\r\n        }\r\n      })\r\n  } else {\r\n    alert('Factura a fost deja trimisa')\r\n    response = { success: false, xml: xml }\r\n  }\r\n  return response\r\n}\r\n\r\nfunction getNewFilenamePostfix(filename, row) {\r\n  var postfixElem = document.getElementById(row.fincode + '_postfix')\r\n  var posfixVal = ''\r\n  try {\r\n    posfixVal = postfixElem.value\r\n    console.log('posfix', posfixVal)\r\n  } catch (err) {\r\n    console.log('no postfix')\r\n  }\r\n  //filename like INVOIC_17713_VAT_RO25190857.xml; split before_vat then add postfix then add _vat...\r\n  var split = filename.split('_')\r\n  //get INVOIC_17713 then add _postfix then add _VAT...\r\n  var newFilename = posfixVal\r\n    ? split[0] + '_' + split[1] + posfixVal + '_' + split[2] + '_' + split[3]\r\n    : filename\r\n\r\n  return newFilename\r\n}\r\n\r\nasync function createLOCATEINFO(trdr, sosource, fprms, series) {\r\n  //scenariul 2\r\n  //get distinct S1TABLE1, for grouping data\r\n  //get xml mappings for trdr, sosource, fprms, series from cccdocumentes1mappings\r\n  //get CCCDOCUMENTES1MAPPINGS for trdr_retailer, source, fprms, series\r\n  var res = await client\r\n    .service('CCCDOCUMENTES1MAPPINGS')\r\n    .find({ query: { TRDR_RETAILER: trdr, SOSOURCE: sosource, FPRMS: fprms, SERIES: series } })\r\n  var CCCDOCUMENTES1MAPPINGS = res.data[0].CCCDOCUMENTES1MAPPINGS\r\n  //get CCCXMLS1MAPPINGS for CCCDOCUMENTES1MAPPINGS\r\n  var res = await client\r\n    .service('CCCXMLS1MAPPINGS')\r\n    .find({ query: { CCCDOCUMENTES1MAPPINGS: CCCDOCUMENTES1MAPPINGS } })\r\n  console.log('CCCXMLS1MAPPINGS', res)\r\n  var CCCXMLS1MAPPINGS = res.data\r\n  var distinctS1TABLE1 = []\r\n  CCCXMLS1MAPPINGS.forEach((item) => {\r\n    if (item.S1TABLE1 && distinctS1TABLE1.indexOf(item.S1TABLE1) == -1) {\r\n      distinctS1TABLE1.push(item.S1TABLE1)\r\n    }\r\n  })\r\n\r\n  var distinctS1TABLE2 = []\r\n  CCCXMLS1MAPPINGS.forEach((item) => {\r\n    if (item.S1TABLE2 && distinctS1TABLE2.indexOf(item.S1TABLE2) == -1) {\r\n      distinctS1TABLE2.push(item.S1TABLE2)\r\n    }\r\n  })\r\n\r\n  //create LOCATEINFO\r\n  var LOCATEINFO = ''\r\n  distinctS1TABLE1.forEach((item) => {\r\n    var S1TABLE1 = item\r\n    var S1FIELD1 = ''\r\n    CCCXMLS1MAPPINGS.forEach((item) => {\r\n      if (item.S1TABLE1 && item.S1FIELD1 && item.S1TABLE1 == S1TABLE1) {\r\n        //if item.S1FIELD1 is not already in S1FIELD1\r\n        const split = S1FIELD1.split(',')\r\n        var wordExists = false\r\n        split.every((item2) => {\r\n          if (item2 == item.S1FIELD1) {\r\n            wordExists = true\r\n            return false\r\n          }\r\n          return true\r\n        })\r\n        if (!wordExists) {\r\n          S1FIELD1 += item.S1FIELD1 + ','\r\n        }\r\n      }\r\n    })\r\n\r\n    S1FIELD1 = S1FIELD1.slice(0, -1)\r\n    LOCATEINFO += S1TABLE1 + ':' + S1FIELD1 + ';'\r\n  })\r\n\r\n  distinctS1TABLE2.forEach((item) => {\r\n    var S1TABLE2 = item\r\n    var S1FIELD2 = ''\r\n    CCCXMLS1MAPPINGS.forEach((item) => {\r\n      if (item.S1TABLE2 && item.S1FIELD2 && item.S1TABLE2 == S1TABLE2) {\r\n        //if item.S1FIELD2 is not already in S1FIELD2\r\n        const split = S1FIELD2.split(',')\r\n        var wordExists = false\r\n        split.every((item2) => {\r\n          if (item2 == item.S1FIELD2) {\r\n            wordExists = true\r\n            return false\r\n          }\r\n          return true\r\n        })\r\n        if (!wordExists) {\r\n          S1FIELD2 += item.S1FIELD2 + ','\r\n        }\r\n      }\r\n    })\r\n\r\n    S1FIELD2 = S1FIELD2.slice(0, -1)\r\n    //check if locateinfo contains S1TABLE2 already\r\n    var split = LOCATEINFO.split(';')\r\n    var tableExists = false\r\n    split.every((item) => {\r\n      if (item.split(':')[0] == S1TABLE2) {\r\n        tableExists = true\r\n        return false\r\n      }\r\n      return true\r\n    })\r\n    if (!tableExists) {\r\n      LOCATEINFO += S1TABLE2 + ':' + S1FIELD2 + ';'\r\n    } else {\r\n      //add S1FIELD2 to LOCATEINFO\r\n      split.every((item, index) => {\r\n        if (item.split(':')[0] == S1TABLE2) {\r\n          split[index] = item + ',' + S1FIELD2\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n      LOCATEINFO = split.join(';')\r\n    }\r\n  })\r\n\r\n  LOCATEINFO = LOCATEINFO.slice(0, -1)\r\n\r\n  return { LOCATEINFO: LOCATEINFO, CCCXMLS1MAPPINGS: CCCXMLS1MAPPINGS }\r\n}\r\n\r\nfunction createXMLDOM(CCCXMLS1MAPPINGS) {\r\n  //create xml dom\r\n  var xmlDom = document.implementation.createDocument('', '', null)\r\n  //root node <= first node from xml mappings split by '/'\r\n  var root = xmlDom.createElement(CCCXMLS1MAPPINGS[0].XMLNODE.split('/')[0])\r\n  xmlDom.appendChild(root)\r\n  //add xml elements to xml dom\r\n  CCCXMLS1MAPPINGS.forEach((item) => {\r\n    var xmlNodes = item.XMLNODE.split('/')\r\n    //add xml elements to xml dom\r\n    var root = xmlDom.documentElement //Order or...\r\n    for (var i = 1; i < xmlNodes.length; i++) {\r\n      var node\r\n      //verify if node already exists\r\n      if (root.getElementsByTagName(xmlNodes[i]).length > 0) {\r\n        node = root.getElementsByTagName(xmlNodes[i])[0]\r\n        root.appendChild(node)\r\n        root = node\r\n      } else {\r\n        try {\r\n          node = xmlDom.createElement(xmlNodes[i])\r\n          //give it a dummy value in order to be able to append it; but just for the last node\r\n          if (i == xmlNodes.length - 1) node.textContent = 'dummy'\r\n          root.appendChild(node)\r\n          root = node\r\n        } catch (err) {\r\n          console.log(err)\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  return xmlDom\r\n}\r\n\r\nasync function populateXMLDOMScenariu2(xmlDom, CCCXMLS1MAPPINGS, S1ObjData) {\r\n  //scenariul 2\r\n  //match xml nodes with S1 Table 1 and S1 Field 1\r\n  const mainNode = 'DXInvoice'\r\n  var x = xmlDom.getElementsByTagName(mainNode)\r\n  var obj = xml2json(x[0])\r\n  console.log('xml2json', obj)\r\n  //get node name for lines; select id \"delimitareLinieDocument\"\r\n  const linesNode = 'InvoiceLine'\r\n  //cut obj in two parts: header and lines; lines are in an array (obj.OrderLine)\r\n  var header = {}\r\n  var lines = {}\r\n  for (var i in obj) {\r\n    if (i == linesNode) {\r\n      lines[i] = obj[i]\r\n    } else {\r\n      header[i] = obj[i]\r\n    }\r\n  }\r\n  console.log('header', header)\r\n  console.log('lines', lines)\r\n  var headerArrayOfObjects = []\r\n  var linesArrayOfObjects = []\r\n  recurse(header, [], mainNode, null, null, headerArrayOfObjects)\r\n  recurse(lines, [], mainNode, null, null, linesArrayOfObjects)\r\n\r\n  await mapS1ObjDataToArrayOfObjects(xmlDom, S1ObjData, CCCXMLS1MAPPINGS, headerArrayOfObjects)\r\n\r\n  const S1Table1 = 'ITELINES'\r\n  const S1ObjDataLines = S1ObjData[S1Table1]\r\n  //map S1ObjDataLines to linesArrayOfObjects through CCCXMLS1MAPPINGS\r\n  S1ObjDataLines.forEach(async (line) => {\r\n    //create a new xml node for each line by cloning the first line node\r\n    //for the first line select the first lineNode\r\n    //for the next lines clone and append the first lineNode\r\n    if (S1ObjDataLines.indexOf(line) == 0) {\r\n      var node = xmlDom.getElementsByTagName(linesNode)[0]\r\n    } else {\r\n      var node = xmlDom.getElementsByTagName(linesNode)[0].cloneNode(true)\r\n      //add node to xmlDom\r\n      xmlDom.getElementsByTagName(mainNode)[0].appendChild(node)\r\n    }\r\n    //map line to linesArrayOfObjects\r\n    await mapS1ObjDataToArrayOfObjects(xmlDom, { ITELINES: [line] }, CCCXMLS1MAPPINGS, linesArrayOfObjects)\r\n  })\r\n\r\n  //alert(xmlDom.getElementsByTagName(mainNode)[0].innerHTML)\r\n}\r\n\r\nasync function mapS1ObjDataToArrayOfObjects(xmlDom, S1ObjData, CCCXMLS1MAPPINGS, arrayOfObjects) {\r\n  console.log({ S1ObjData, CCCXMLS1MAPPINGS, arrayOfObjects })\r\n  var arrays = []\r\n  arrayOfObjects.forEach(async (item) => {\r\n    //flatten item xmlPath so as to compare it with CCCXMLS1MAPPINGS\r\n    var xmlPath =\r\n      item.parent && item.parent.length > 0\r\n        ? item.root + '/' + item.parent.join('/') + '/' + item.i\r\n        : item.root + '/' + item.i\r\n    console.log('xmlPath', xmlPath)\r\n    CCCXMLS1MAPPINGS.forEach(async (item2) => {\r\n      if (item2.XMLNODE == xmlPath) {\r\n        console.log('pair found', item2)\r\n        console.log('S1ObjData[item2.S1TABLE1]', S1ObjData[item2.S1TABLE1])\r\n        //set node value\r\n        if (S1ObjData[item2.S1TABLE1]) {\r\n          if (S1ObjData[item2.S1TABLE1].length > 1) {\r\n            arrays.push({\r\n              mapping: item2,\r\n              iterations: S1ObjData[item2.S1TABLE1].length,\r\n              S1Data: S1ObjData[item2.S1TABLE1]\r\n            })\r\n          } else {\r\n            var node = findNodeInXMLDOM(xmlDom, item2.XMLNODE)\r\n            //if found, set node value else create node and set value\r\n            if (node) {\r\n              var value = S1ObjData[item2.S1TABLE1][0][item2.S1FIELD1]\r\n              console.log('node', node)\r\n              console.log('S1ObjData[item2.S1TABLE1]', S1ObjData[item2.S1TABLE1])\r\n              //check for 123|RON and get RON\r\n              if (value && value.indexOf('|') > -1) {\r\n                value = value.split('|')[1]\r\n              }\r\n              //check for 2023-09-20 00:00:00 and get 2023-09-20\r\n              //only for strings resambling dates\r\n              if (value && value.indexOf('-') > -1 && value.indexOf(':') > -1) {\r\n                value = value.split(' ')[0]\r\n              }\r\n              node.textContent = value\r\n            } else {\r\n              //create node and set value\r\n              console.log('create node and set value')\r\n              var node = xmlDom.createElement(item2.XMLNODE.split('/')[item2.XMLNODE.split('/').length - 1])\r\n              node.textContent = S1ObjData[item2.S1TABLE1][0][item2.S1FIELD1]\r\n              findNodeInXMLDOM(xmlDom, item2.XMLNODE).parentNode.appendChild(node)\r\n            }\r\n          }\r\n        } else {\r\n          if (item2.SQL) {\r\n            console.log('has SQL', item2.SQL)\r\n            //set node value\r\n            //if sql SELECT PERCNT FROM VAT WHERE VAT={S1Table1.S1Field1} or SELECT PERCNT FROM VAT WHERE VAT={S1Table1.S1Field1} and VAT2={S1Table1.S1Field2}\r\n            //then replace {S1Table1.S1Field1} with S1ObjData[S1Table1][0][S1Field1]\r\n            //and {S1Table1.S1Field2} with S1ObjData[S1Table1][0][S1Field2]\r\n            //then execute the query and set node value\r\n            //else execute the query and set node value\r\n            //set params' query\r\n            var params = {}\r\n            params['query'] = {}\r\n            //replace {S1Table1.S1Field1} with S1ObjData[S1Table1][0][S1Field1]\r\n            //and {S1Table1.S1Field2} with S1ObjData[S1Table1][0][S1Field2]\r\n            //parse and replace {s1table1.s1field1} with S1ObjData[item.S1TABLE1][0][item.S1FIELD1] or {s1table1.s1field2} with S1ObjData[item.S1TABLE2][0][item.S1FIELD2]\r\n            var sqlQuery = item2.SQL\r\n            var regex = /{([^}]+)}/g\r\n            var matches = sqlQuery.match(regex)\r\n            console.log('matches', matches)\r\n            if (matches) {\r\n              matches.forEach((match) => {\r\n                try {\r\n                  var s1table = match.split('.')[0].replace('{', '')\r\n                  var s1field = match.split('.')[1].replace('}', '')\r\n                  //upper case\r\n                  s1table = s1table.toUpperCase()\r\n                  s1field = s1field.toUpperCase()\r\n                  console.log('s1table', s1table)\r\n                  console.log('s1field', s1field)\r\n                  console.log('match', match)\r\n                  console.log('S1ObjData[s1table]', S1ObjData[item2[s1table]])\r\n                  console.log('S1ObjData[s1table][0]', S1ObjData[item2[s1table]][0])\r\n                  console.log('S1ObjData[s1table][0][s1field]', S1ObjData[item2[s1table]][0][item2[s1field]])\r\n                  sqlQuery = sqlQuery.replace(match, S1ObjData[item2[s1table]][0][item2[s1field]])\r\n                } catch (err) {\r\n                  console.log(sqlQuery, err)\r\n                }\r\n              })\r\n            }\r\n            console.log('sqlQuery', sqlQuery)\r\n            params['query']['sqlQuery'] = sqlQuery\r\n\r\n            var node = findNodeInXMLDOM(xmlDom, item2.XMLNODE)\r\n            //if found, set node value else create node and set value\r\n            if (node) {\r\n              var res = await client.service('getDataset').find(params)\r\n              console.log('getDataset for ' + item2.XMLNODE, res)\r\n              if (res.data) {\r\n                node.textContent = res.data\r\n              }\r\n            } else {\r\n              //create node and set value\r\n              console.log('create node and set value')\r\n              var node = xmlDom.createElement(item2.XMLNODE.split('/')[item2.XMLNODE.split('/').length - 1])\r\n              var res = await client.service('getDataset').find(params)\r\n              console.log('getDataset for ' + item2.XMLNODE, res.data)\r\n              if (res.data) {\r\n                node.textContent = res.data\r\n              }\r\n              findNodeInXMLDOM(xmlDom, item2.XMLNODE).parentNode.appendChild(node)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n  })\r\n\r\n  if (arrays.length > 0) {\r\n    console.log('arrays', arrays)\r\n\r\n    //zoom out from array to whole sequence\r\n    var sequences = []\r\n    var lastPath = ''\r\n    arrays.forEach((obj) => {\r\n      //find in CCCXMLS1MAPPINGS the all nodes sharing the shortest path\r\n      var xmlNodes = obj.mapping.XMLNODE.split('/')\r\n      path = xmlNodes.slice(0, xmlNodes.length - 1).join('/')\r\n      if (path != lastPath) {\r\n        console.log('path', path)\r\n\r\n        var alike = []\r\n        CCCXMLS1MAPPINGS.forEach((mapping) => {\r\n          if (mapping.XMLNODE.includes(path)) {\r\n            alike.push(mapping)\r\n          }\r\n        })\r\n        sequences.push({ path: path, mappings: alike, iterations: obj.iterations, S1Data: obj.S1Data })\r\n        lastPath = path\r\n      }\r\n    })\r\n\r\n    console.log('sequences', sequences)\r\n\r\n    //map sequences to S1ObjData through CCCXMLS1MAPPINGS\r\n    //map sequences to xmlDom\r\n    //for each sequences[i].path, loop sequences[i].iterations times and find in S1ObjData the corresponding values\r\n    //then add them to xmlDom\r\n    sequences.forEach((sequence) => {\r\n      var seqPath = sequence.path\r\n      var seqMappings = sequence.mappings\r\n      var seqIterations = sequence.iterations\r\n      var seqData = sequence.S1Data\r\n      var refNode = findNodeInXMLDOM(xmlDom, seqPath)\r\n      console.log('refNode', refNode)\r\n      var newChild = refNode.cloneNode(true)\r\n      var sequenceNewNodes = []\r\n      seqData.forEach((item) => {\r\n        seqMappings.forEach((mapping) => {\r\n          console.log('mapping', mapping)\r\n          console.log('item', item)\r\n          console.log('seqPath', seqPath)\r\n          //substract seqPath from mapping.XMLNODE\r\n          var partialPath = mapping.XMLNODE.replace(seqPath + '/', '')\r\n          console.log('partialPath', partialPath)\r\n          splited = partialPath.split('/')\r\n          console.log('splited', splited)\r\n          console.log('splited root', partialPath.split('/')[0])\r\n          var rootExists = findRootInSequence([...sequenceNewNodes], partialPath.split('/')[0])\r\n          console.log('rootExists', rootExists)\r\n\r\n          if (!rootExists) {\r\n            //create new node\r\n            var newNode = xmlDom.createElement(partialPath.split('/')[0])\r\n            //add node to sequenceNewNodes\r\n            sequenceNewNodes.push(newNode)\r\n          } else {\r\n            //find node in sequenceNewNodes\r\n            var found = false\r\n            sequenceNewNodes.every((item2) => {\r\n              if (item2.nodeName == partialPath.split('/')[0]) {\r\n                found = true\r\n                console.log('found', item2.nodeName)\r\n                //adauga restul nodurilor\r\n                var node = item2\r\n                for (var i = 1; i < splited.length; i++) {\r\n                  //daca nu exista nodul, creeaza-l\r\n                  if (node.getElementsByTagName(splited[i]).length == 0) {\r\n                    var newNode = xmlDom.createElement(splited[i])\r\n                    node.appendChild(newNode)\r\n                    node = newNode\r\n                  }\r\n                }\r\n                console.log('nod ierarhic', node)\r\n                return false\r\n              }\r\n              return true\r\n            })\r\n          }\r\n        })\r\n        console.log('sequenceNewNodes', sequenceNewNodes)\r\n        sequenceNewNodes.forEach((item) => {\r\n          console.log('itemToBeAppended', item)\r\n          newChild.appendChild(item)\r\n        })\r\n        console.log('newChild', newChild)\r\n        refNode.parentNode.insertBefore(newChild, refNode.nextSibling)\r\n        newChild = null\r\n        newChild = refNode.cloneNode(true)\r\n        sequenceNewNodes = []\r\n        sequenceNewNodes.push(newChild)\r\n        console.log('sequenceNewNodes', sequenceNewNodes)\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nfunction findRootInSequence(seqArr, nodeName) {\r\n  console.log('seqArr', seqArr)\r\n  console.log('nodeName', nodeName)\r\n  var found = false\r\n  seqArr.every((item) => {\r\n    if (item.nodeName == nodeName) {\r\n      found = true\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  return found\r\n}\r\n\r\nfunction findNodeInXMLDOM(xmlDom, xmlNode) {\r\n  var xmlNodes = xmlNode.split('/')\r\n  var root = xmlDom.documentElement\r\n  //find node in xmlDom, but do not change ierachy of nodes\r\n  for (var i = 0; i < xmlNodes.length; i++) {\r\n    var node\r\n    if (root.getElementsByTagName(xmlNodes[i]).length > 0) {\r\n      //first found node\r\n      //node = root.getElementsByTagName(xmlNodes[i])[0]\r\n      //last found node\r\n      node = root.getElementsByTagName(xmlNodes[i])[root.getElementsByTagName(xmlNodes[i]).length - 1]\r\n      root.appendChild(node)\r\n      root = node\r\n    }\r\n  }\r\n\r\n  return node\r\n}\r\n\r\nasync function populateXMLDOMScenariu1(xmlDom, CCCXMLS1MAPPINGS) {\r\n  //scenariul 1\r\n  CCCXMLS1MAPPINGS.forEach(async (item) => {\r\n    if (item.SQL && !item.SQL.includes('{')) {\r\n      //set node value\r\n      var node = findNodeInXMLDOM(xmlDom, item.XMLNODE)\r\n      var res = await client.service('getDataset').find({ query: { sqlQuery: item.SQL } })\r\n      console.log('getDataset', res)\r\n      if (res.data) {\r\n        node.textContent = res.data\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nasync function populateXMLDOMScenariu3(xmlDom, CCCXMLS1MAPPINGS, S1ObjData) {\r\n  //scenariul 3\r\n  CCCXMLS1MAPPINGS.forEach(async (item) => {\r\n    if (item.SQL && item.SQL.includes('{')) {\r\n      //set node value\r\n      var node = findNodeInXMLDOM(xmlDom, item.XMLNODE)\r\n      //parse and replace {s1table1.s1field1} with S1ObjData[item.S1TABLE1][0][item.S1FIELD1] or {s1table1.s1field2} with S1ObjData[item.S1TABLE2][0][item.S1FIELD2]\r\n      var sqlQuery = item.SQL\r\n      var regex = /{([^}]+)}/g\r\n      var matches = sqlQuery.match(regex)\r\n      console.log('matches', matches)\r\n      matches.forEach(async (match) => {\r\n        var s1table = match.split('.')[0].replace('{', '')\r\n        var s1field = match.split('.')[1].replace('}', '')\r\n        //upper case\r\n        s1table = s1table.toUpperCase()\r\n        s1field = s1field.toUpperCase()\r\n        console.log('s1table', s1table)\r\n        console.log('s1field', s1field)\r\n        console.log('match', match)\r\n        try {\r\n          console.log('item[s1table]]', item[s1table])\r\n          console.log('item[s1field]]', item[s1field])\r\n          try {\r\n            var val = S1ObjData[item[s1table]][0][item[s1field]]\r\n            //val could be 1|Buc\r\n            //if val is 1|Buc, then val = 1\r\n            if (val && val.indexOf('|') > -1) {\r\n              val = val.split('|')[0]\r\n            }\r\n            sqlQuery = sqlQuery.replace(match, val)\r\n            console.log('actual value', val)\r\n          } catch (err) {\r\n            console.log(err)\r\n            console.log(S1ObjData[item[s1table]])\r\n          }\r\n          console.log('sqlQuery', sqlQuery)\r\n          var res = await client.service('getDataset').find({ query: { sqlQuery: sqlQuery } })\r\n          console.log('getDataset', res)\r\n          if (res.data) {\r\n            node.textContent = res.data\r\n          }\r\n        } catch (err) {\r\n          console.log(err)\r\n        }\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nasync function createXML(findoc, trdr, sosource, fprms, series) {\r\n  var ret = await createLOCATEINFO(trdr, sosource, fprms, series)\r\n  var LOCATEINFO = ret.LOCATEINFO\r\n  var CCCXMLS1MAPPINGS = ret.CCCXMLS1MAPPINGS\r\n  //sort CCCXMLS1MAPPINGS by XMLORDER\r\n  CCCXMLS1MAPPINGS.sort((a, b) => {\r\n    return a.XMLORDER - b.XMLORDER\r\n  })\r\n\r\n  console.log('LOCATEINFO', LOCATEINFO)\r\n  console.log('CCCXMLS1MAPPINGS', CCCXMLS1MAPPINGS)\r\n\r\n  //get data from S1; LOCATEINFO  results from reading data from xml mappings\r\n  var S1Obj = await client.service('getS1ObjData').find({\r\n    query: {\r\n      KEY: findoc,\r\n      clientID: await client\r\n        .service('connectToS1')\r\n        .find()\r\n        .then((result) => {\r\n          return result.token\r\n        }),\r\n      appID: '1001',\r\n      OBJECT: 'SALDOC',\r\n      FORM: 'EFIntegrareRetailers',\r\n      LOCATEINFO: LOCATEINFO\r\n    }\r\n  })\r\n\r\n  console.log('S1ObjData(LocateInfo)', S1Obj)\r\n  const S1ObjData = S1Obj.data\r\n\r\n  var header = 'DXInvoice/Invoice/'\r\n  var lines = 'DXInvoice/InvoiceLine/'\r\n\r\n  var CCCXMLS1MAPPINGS_HEADER = []\r\n  var CCCXMLS1MAPPINGS_LINES = []\r\n  CCCXMLS1MAPPINGS.forEach((item) => {\r\n    if (item.XMLNODE.includes(header)) {\r\n      CCCXMLS1MAPPINGS_HEADER.push(item)\r\n    }\r\n    if (item.XMLNODE.includes(lines)) {\r\n      CCCXMLS1MAPPINGS_LINES.push(item)\r\n    }\r\n  })\r\n\r\n  console.log('CCCXMLS1MAPPINGS_HEADER', CCCXMLS1MAPPINGS_HEADER)\r\n  console.log('CCCXMLS1MAPPINGS_LINES', CCCXMLS1MAPPINGS_LINES)\r\n\r\n  //header\r\n  var _HEADER = await joinThings(CCCXMLS1MAPPINGS_HEADER, S1ObjData)\r\n\r\n  //create xml dom\r\n  var xmlDomHeader = document.implementation.createDocument('', '', null)\r\n  var root = 'DXInvoice'\r\n  var root = xmlDomHeader.createElement(root)\r\n  xmlDomHeader.appendChild(root)\r\n\r\n  xmlDomHeader = createDomPart(_HEADER, xmlDomHeader)\r\n  console.log('xmlDomHeader', xmlDomHeader)\r\n\r\n  //lines\r\n  //S1ObjData but without ITELINES\r\n  var S1ObjDataNoITELINES = {}\r\n  Object.keys(S1ObjData).forEach((key) => {\r\n    if (key != 'ITELINES') {\r\n      S1ObjDataNoITELINES[key] = S1ObjData[key]\r\n    }\r\n  })\r\n  var S1ITELINES = S1ObjData['ITELINES']\r\n  var xmlDomLines = []\r\n  S1ITELINES.forEach(async (line) => {\r\n    var currLine = { ITELINES: [line] }\r\n    //add currLine to S1ObjDataNoITELINES\r\n    var S1ObjDataNoITELINES_currLine = Object.assign({}, S1ObjDataNoITELINES, currLine)\r\n    console.log('currLine', currLine)\r\n    joinThings(CCCXMLS1MAPPINGS_LINES, S1ObjDataNoITELINES_currLine).then((part) => {\r\n      console.log('part', part)\r\n      var xmlDomLine = document.implementation.createDocument('', '', null)\r\n      var root = 'DXInvoice'\r\n      var root = xmlDomLine.createElement(root)\r\n      xmlDomLine.appendChild(root)\r\n      xmlDomLine = createDomPart(part, xmlDomLine)\r\n      xmlDomLines.push(xmlDomLine)\r\n    })\r\n  })\r\n\r\n  //wait until xmlDomLines is populated, meaning xmlDomLines.length == S1ITELINES.length\r\n  while (xmlDomLines.length < S1ITELINES.length) {\r\n    await new Promise((resolve) => setTimeout(resolve, 100))\r\n  }\r\n\r\n  console.log('xmlDomLines', xmlDomLines)\r\n\r\n  //take xmlDomHeader and xmlDomLines and merge them into one xmlDom\r\n  var xmlDom = xmlDomHeader\r\n  xmlDomLines.forEach((item) => {\r\n    var xmlNodes = item.documentElement.childNodes\r\n    for (var i = 0; i < xmlNodes.length; i++) {\r\n      xmlDom.documentElement.appendChild(xmlNodes[i])\r\n    }\r\n  })\r\n\r\n  console.log('xmlDom', xmlDom)\r\n\r\n  //return DXInvoice from document\r\n  var xml = xmlDom.getElementsByTagName('DXInvoice')[0].outerHTML\r\n\r\n  return { dom: xml, trimis: false }\r\n\r\n  async function joinThings(CCCXMLS1MAPPINGS_PART, S1ObjData) {\r\n    var _PART = []\r\n    CCCXMLS1MAPPINGS_PART.forEach(async (item) => {\r\n      item.SQL = item.SQL.trim()\r\n      var o = {}\r\n      o.xmlNode = item.XMLNODE\r\n      o.table1 = item.S1TABLE1 || null\r\n      o.field1 = item.S1FIELD1 || null\r\n      if (item.S1TABLE1 && item.S1FIELD1) {\r\n        possibleArray = S1ObjData[item.S1TABLE1]\r\n        if (possibleArray && possibleArray.length == 1) {\r\n          o.value1 = S1ObjData[item.S1TABLE1][0][item.S1FIELD1] || 'n/a'\r\n        } else if (possibleArray && possibleArray.length > 1) {\r\n          o.value1 = []\r\n          possibleArray.forEach((item2) => {\r\n            o.value1.push(item2[item.S1FIELD1])\r\n          })\r\n        } else {\r\n          o.value1 = 'n/a'\r\n        }\r\n        if (o.value1 && o.value1.indexOf('|') > -1) {\r\n          o.value1 = o.value1.split('|')[0]\r\n        }\r\n        //if o.value1 is an arrat then check every item for | and split it\r\n        if (Array.isArray(o.value1)) {\r\n          o.value1.forEach((item2, index) => {\r\n            if (item2.indexOf('|') > -1) {\r\n              o.value1[index] = item2.split('|')[0]\r\n            }\r\n          })\r\n        }\r\n        o.value = o.value1\r\n      } else {\r\n        o.value1 = 'n/a'\r\n        o.value = 'n/a'\r\n      }\r\n      if (item.SQL == '') {\r\n        //...\r\n      } else {\r\n        item.SQL = item.SQL.replace(/\\n/g, ' ').replace(/\\r/g, ' ')\r\n        o.table2 = item.S1TABLE2 || null\r\n        o.field2 = item.S1FIELD2 || null\r\n        o.value2 = item.S1TABLE2 && item.S1FIELD2 ? S1ObjData[item.S1TABLE2][0][item.S1FIELD2] : 'n/a'\r\n        o.sql = item.SQL\r\n        var sqlQuery = item.SQL\r\n        if (o.value2 && o.value2.indexOf('|') > -1) {\r\n          o.value2 = o.value2.split('|')[0]\r\n        }\r\n        if (item.SQL.includes('{S1Table1.S1Field1}')) {\r\n          sqlQuery = sqlQuery.replace('{S1Table1.S1Field1}', o.value1)\r\n        }\r\n\r\n        if (item.SQL.includes('{S1Table2.S1Field2}')) {\r\n          sqlQuery = sqlQuery.replace('{S1Table2.S1Field2}', o.value2)\r\n        }\r\n\r\n        o.sqlQuery = sqlQuery\r\n        //value = await client.service('getDataset').find(params)\r\n        var params = {}\r\n        params['query'] = {}\r\n        params['query']['sqlQuery'] = sqlQuery\r\n        var res = await client.service('getDataset').find(params)\r\n        console.log('sqlQuery', sqlQuery, 'queryResponse', res)\r\n        if (res.data) {\r\n          //for xml path ('') [1,2,3]\r\n          if (res.data.indexOf('[') > -1) {\r\n            o.value = JSON.parse(res.data)\r\n          } else {\r\n            o.value = res.data\r\n          }\r\n        }\r\n      }\r\n      _PART.push(o)\r\n    })\r\n\r\n    //wait until _HEADER is populated, meaning _HEADER.length == CCCXMLS1MAPPINGS_HEADER.length\r\n    while (_PART.length < CCCXMLS1MAPPINGS_PART.length) {\r\n      await new Promise((resolve) => setTimeout(resolve, 100))\r\n    }\r\n\r\n    //sort _HEADER by xmlNode alphabetically\r\n    /* _PART.sort((a, b) => {\r\n      var txtA = a.xmlNode.toUpperCase()\r\n      var txtB = b.xmlNode.toUpperCase()\r\n      return txtA < txtB ? -1 : txtA > txtB ? 1 : 0\r\n    }) */\r\n\r\n    return _PART\r\n  }\r\n\r\n  function createDomPart(_PART, xmlDom) {\r\n    _PART.forEach((item) => {\r\n      console.log({ xml: item.xmlNode, value: item.value })\r\n      var xmlNodes = item.xmlNode.split('/')\r\n      //add xml elements to xml dom\r\n      var root = xmlDom.documentElement\r\n      for (var i = 1; i < xmlNodes.length; i++) {\r\n        var node\r\n        var existingElements = root.getElementsByTagName(xmlNodes[i])\r\n        //verify if node already exists\r\n        if (existingElements.length > 0) {\r\n          node = existingElements[existingElements.length - 1]\r\n          root.appendChild(node)\r\n          root = node\r\n        } else {\r\n          try {\r\n            node = xmlDom.createElement(xmlNodes[i])\r\n            //give it a dummy value in order to be able to append it; but just for the last node\r\n            if (i == xmlNodes.length - 1) node.textContent = item.value\r\n            root.appendChild(node)\r\n            root = node\r\n          } catch (err) {\r\n            console.log(err)\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    //find in _HEADER item.value as array\r\n    var whatToReplace = []\r\n    _PART.forEach((item) => {\r\n      if (Array.isArray(item.value)) {\r\n        var parentName = item.xmlNode.split('/')[item.xmlNode.split('/').length - 2]\r\n        //copy parent node with all its children item.value times with different values\r\n        whatToReplace.push({\r\n          parent: xmlDom.getElementsByTagName(parentName)[0],\r\n          childToChange: item.xmlNode.split('/')[item.xmlNode.split('/').length - 1],\r\n          value: item.value\r\n        })\r\n      }\r\n    })\r\n\r\n    console.log('whatToReplace', whatToReplace)\r\n\r\n    //regroup children of whatToReplace by parent; eg: whatToReplace.parent <> array of childToChange/value with said parent\r\n    var distinctParents = []\r\n    whatToReplace.forEach((item) => {\r\n      if (distinctParents.indexOf(item.parent) == -1) {\r\n        distinctParents.push(item.parent)\r\n      }\r\n    })\r\n\r\n    var groupedByParent = []\r\n    distinctParents.forEach((parent) => {\r\n      whatToReplace.forEach((item) => {\r\n        if (item.parent == parent) {\r\n          //find in groupedByParent if parent exists\r\n          var found = false\r\n          groupedByParent.every((item2) => {\r\n            if (item2.parent == parent) {\r\n              found = true\r\n              item2.children.push({ childToChange: item.childToChange, value: item.value })\r\n              return false\r\n            }\r\n            return true\r\n          })\r\n          if (!found) {\r\n            groupedByParent.push({\r\n              parent: parent,\r\n              children: [{ childToChange: item.childToChange, value: item.value }]\r\n            })\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    console.log('groupedByParent', groupedByParent)\r\n\r\n    //for each distinct parent, clone it by the first childToChange/value\r\n    //then change the values of the childToChange nodes\r\n    groupedByParent.forEach((item) => {\r\n      var parent = item.parent\r\n      var times = item.children[0].value.length\r\n      console.log('times', times)\r\n      //clone parent times times but keep the original parent, so I don't have to delete it later\r\n      for (var i = 1; i < times; i++) {\r\n        var clone = parent.cloneNode(true)\r\n        parent.parentNode.appendChild(clone)\r\n      }\r\n\r\n      var clones = []\r\n      //get cloned elements plus the original one\r\n      clones = xmlDom.getElementsByTagName(parent.nodeName)\r\n      console.log('clones', clones)\r\n\r\n      var arrClones = Array.from(clones)\r\n\r\n      arrClones.forEach((clone, index) => {\r\n        //change childToChange/value\r\n        item.children.forEach((item2) => {\r\n          var childToChange = item2.childToChange\r\n          var value = item2.value[index]\r\n          console.log('childToChange', childToChange)\r\n          console.log('value', value)\r\n          clone.getElementsByTagName(childToChange)[0].textContent = value\r\n        })\r\n      })\r\n    })\r\n\r\n    //parse xmlDom thru DOMParser\r\n    var xmlString = new XMLSerializer().serializeToString(xmlDom)\r\n    var parser = new DOMParser()\r\n    var xmlDomm = parser.parseFromString(xmlString, 'text/xml')\r\n\r\n    return xmlDomm\r\n  }\r\n\r\n  // var xmlDom = createXMLDOM(CCCXMLS1MAPPINGS)\r\n\r\n  // console.log('xmlDom', xmlDom)\r\n\r\n  // await populateXMLDOMScenariu2(xmlDom, CCCXMLS1MAPPINGS, S1ObjData)\r\n\r\n  // //await populateXMLDOMScenariu1(xmlDom, CCCXMLS1MAPPINGS)\r\n\r\n  // //await populateXMLDOMScenariu3(xmlDom, CCCXMLS1MAPPINGS, S1ObjData)\r\n\r\n  // console.log('xmlDom', xmlDom)\r\n\r\n  // //return xml innerHTML\r\n  // return xmlDom.getElementsByTagName('DXInvoice')[0].innerHTML\r\n}\r\n\r\nasync function cheatGetXmlFromS1(findoc) {\r\n  var dom = await client.service('getInvoiceDom').find({\r\n    query: {\r\n      clientID: await client\r\n        .service('connectToS1')\r\n        .find()\r\n        .then((result) => {\r\n          return result.token\r\n        }),\r\n      appID: '1001',\r\n      findoc: findoc\r\n    }\r\n  })\r\n\r\n  console.log('dom', dom)\r\n  return dom\r\n}\r\n\r\nfunction toggleComenziNetrimise() {\r\n  var comenziTrimise = document.getElementById('comenziTrimise')\r\n  var table = document.getElementById('xmlTableBody')\r\n  if (comenziTrimise.checked) {\r\n    //hide rows with <i class=\"fas fa-xl fa-check-circle has-text-success\"></i> or all\r\n    var rows = table.getElementsByTagName('tr')\r\n    for (var i = 0; i < rows.length; i++) {\r\n      if (rows[i].innerHTML.indexOf('fa-check-circle') > -1) {\r\n        rows[i].style.display = 'none'\r\n      }\r\n    }\r\n  } else {\r\n    //show all rows\r\n    var rows = table.getElementsByTagName('tr')\r\n    for (var i = 0; i < rows.length; i++) {\r\n      rows[i].style.display = ''\r\n    }\r\n  }\r\n}\r\n\r\nfunction mandatoryFields() {\r\n  //get file from input id=\"xsdFile\"\r\n  var xsdFile = document.getElementById('xsdFile').files[0]\r\n  console.log('xsdFile', xsdFile)\r\n  //find elements without minOccurs=\"0\"\r\n  var mandatoryFields = []\r\n  var nonMandatoryFields = []\r\n  var reader = new FileReader()\r\n  reader.readAsText(xsdFile)\r\n  reader.onload = function (e) {\r\n    var xsd = e.target.result\r\n    var parser = new DOMParser()\r\n    var xsdDom = parser.parseFromString(xsd, 'text/xml')\r\n    //find and remove element name='DXInvoice' from xsdDom\r\n    var dxInvoice = xsdDom.getElementsByTagName('xs:element')[0]\r\n    dxInvoice.parentNode.removeChild(dxInvoice)\r\n    var elements = xsdDom.getElementsByTagName('xs:element')\r\n    console.log('numar elemente', elements.length)\r\n    for (var i = 0; i < elements.length; i++) {\r\n      var element = elements[i]\r\n      //find parents\r\n      var parents = []\r\n      var parent = element.parentNode\r\n      while (parent.nodeName != 'xs:schema') {\r\n        parents.push(parent)\r\n        parent = parent.parentNode\r\n      }\r\n      var path = ''\r\n      for (var j = parents.length - 1; j >= 0; j--) {\r\n        var parentName = parents[j].getAttribute('name')\r\n        if (parentName) {\r\n          path += parentName + '/'\r\n        }\r\n      }\r\n      path += element.getAttribute('name')\r\n      path = path.replace('InvoiceType', 'DXInvoice/Invoice')\r\n      path = path.replace('InvoiceLineType', 'DXInvoice/InvoiceLine')\r\n\r\n      recursiveSearchInElement(element, path)\r\n\r\n      function recursiveSearchInElement(element, path) {\r\n        /*\r\n      <xs:annotation>\r\n\t\t\t\t\t<xs:documentation>Invoice Currency</xs:documentation>\r\n\t\t\t\t</xs:annotation>\r\n      */\r\n        //get documentation value if exists\r\n        var documentationValue = ''\r\n        var annotation = element.getElementsByTagName('xs:annotation')[0]\r\n        if (annotation) {\r\n          var documentation = annotation.getElementsByTagName('xs:documentation')[0]\r\n          if (documentation) {\r\n            documentationValue = documentation.innerHTML\r\n          }\r\n        }\r\n        if (element.hasAttribute('minOccurs') && element.getAttribute('minOccurs') == '0') {\r\n          nonMandatoryFields.push({\r\n            name: element.getAttribute('name'),\r\n            type: element.getAttribute('type'),\r\n            path: path,\r\n            documentation: documentationValue,\r\n            orderNumber: i + 1\r\n          })\r\n        } else {\r\n          //nu are minOccurs deci este obligatoriu, dar daca este complexType nu inregistrez, vor fi inregistrate elementele care il compun\r\n          var isComplexType = element.getElementsByTagName('xs:complexType')[0]\r\n          var needsFurtherInvestigation = false\r\n          //if type is in form commons:something then needs further investigation with commons.xsd\r\n          needsFurtherInvestigation = element.getAttribute('type')\r\n            ? element.getAttribute('type').includes('commons:')\r\n            : false\r\n          if (!isComplexType)\r\n            if (!needsFurtherInvestigation) {\r\n              mandatoryFields.push({\r\n                name: element.getAttribute('name'),\r\n                type: element.getAttribute('type'),\r\n                path: path,\r\n                documentation: documentationValue,\r\n                orderNumber: i + 1\r\n              })\r\n            } else {\r\n              recursiveSearchForTypes(\r\n                element.getAttribute('type').split(':')[1],\r\n                i + 1,\r\n                mandatoryFields,\r\n                nonMandatoryFields,\r\n                path\r\n              )\r\n            }\r\n        }\r\n      }\r\n    }\r\n    console.log('mandatoryFields', mandatoryFields)\r\n    console.log('nonMandatoryFields', nonMandatoryFields)\r\n\r\n    displayMandatoryFields(mandatoryFields, nonMandatoryFields)\r\n\r\n    if (document.getElementById('xmlAsTable').getElementsByTagName('tbody')[0])\r\n      setMandatoryAndFieldOrder(\r\n        mandatoryFields,\r\n        nonMandatoryFields,\r\n        document.getElementById('xmlAsTable').getElementsByTagName('tbody')[0]\r\n      )\r\n  }\r\n\r\n  function displayMandatoryFields(mandatoryFields, nonMandatoryFields) {\r\n    var label = document.getElementById('mandatoryFieldsLabel')\r\n    label.innerHTML = 'Obligatorii: ' + mandatoryFields.length\r\n    //get table id=\"mandatoryFieldsTable\" and create mandatory data\r\n    var table = document.getElementById('mandatoryFieldsTable')\r\n    //empty table\r\n    table.innerHTML = ''\r\n    //Create table head\r\n    var thead = table.createTHead()\r\n    var row = thead.insertRow()\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Name'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Type'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Path'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Documentation'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Order Number'\r\n    row.appendChild(th)\r\n\r\n    //create table body\r\n    var tbody = table.createTBody()\r\n    mandatoryFields.forEach((item) => {\r\n      var tr = document.createElement('tr')\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.name\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.type\r\n      //onclick event\r\n      td.onclick = function () {\r\n        showCommonType(\r\n          this.innerHTML.split(':')[1],\r\n          item.orderNumber,\r\n          mandatoryFields,\r\n          nonMandatoryFields,\r\n          item.path\r\n        )\r\n      }\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.path\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.documentation\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.orderNumber\r\n      tr.appendChild(td)\r\n      tbody.appendChild(tr)\r\n    })\r\n\r\n    //label\r\n    var label = document.getElementById('nonMandatoryFieldsLabel')\r\n    label.innerHTML = 'Facultative: ' + nonMandatoryFields.length\r\n    //table id=\"nonMandatoryFieldsTable\"\r\n    var table = document.getElementById('nonMandatoryFieldsTable')\r\n    //empty table\r\n    table.innerHTML = ''\r\n    //Create table head\r\n    var thead = table.createTHead()\r\n    var row = thead.insertRow()\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Name'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Type'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Path'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Documentation'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Order Number'\r\n    row.appendChild(th)\r\n\r\n    //create table body\r\n    var tbody = table.createTBody()\r\n    nonMandatoryFields.forEach((item) => {\r\n      var tr = document.createElement('tr')\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.name\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.type\r\n      //onclick event\r\n      td.onclick = function () {\r\n        showCommonType(\r\n          this.innerHTML.split(':')[1],\r\n          item.orderNumber,\r\n          mandatoryFields,\r\n          nonMandatoryFields,\r\n          item.path\r\n        )\r\n      }\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.path\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.documentation\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.orderNumber\r\n      tr.appendChild(td)\r\n      tbody.appendChild(tr)\r\n    })\r\n  }\r\n\r\n  function setMandatoryAndFieldOrder(mandatoryFields, nonMandatoryFields, table) {\r\n    //in table id=\"xmlAsTable\" fill column \"Mandatory\" with \"Yes\" or \"No\" by path\r\n    var rows = table.getElementsByTagName('tr')\r\n    for (var i = 0; i < rows.length; i++) {\r\n      var row = rows[i]\r\n      var cell = row.getElementsByClassName('xmlPath')[0]\r\n      var path = cell.innerHTML\r\n      mandatoryFields.every((item) => {\r\n        if (item.path == path) {\r\n          cell = row.getElementsByClassName('mandatory')[0]\r\n          //child select\r\n          cell.value = true\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n    }\r\n\r\n    //xmlOrderNumber\r\n    rows = table.getElementsByTagName('tr')\r\n    for (var i = 0; i < rows.length; i++) {\r\n      var row = rows[i]\r\n      var cell = row.getElementsByClassName('xmlPath')[0]\r\n      var path = cell.innerHTML\r\n      mandatoryFields.every((item) => {\r\n        console.log('path', path, 'item.path', item.path)\r\n        //if (item.path == path) {\r\n        //if (path.includes(item.path)) {\r\n        if (path == item.path) {\r\n          cell = row.getElementsByClassName('xmlOrder')[0]\r\n          cell.innerHTML = item.orderNumber\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n\r\n      nonMandatoryFields.every((item) => {\r\n        if (item.path == path) {\r\n          //if (path.includes(item.path)) {\r\n          cell = row.getElementsByClassName('xmlOrder')[0]\r\n          cell.innerHTML = item.orderNumber\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nfunction loadCommonXSD() {\r\n  //1.get file from input id=\"xsdCommonsFile\"\r\n  //2. create dom from file\r\n  var xsdFile = document.getElementById('xsdCommonsFile').files[0]\r\n  if (!xsdFile) {\r\n    alert('Select XSD Commons file')\r\n    return\r\n  }\r\n  console.log('xsdFile', xsdFile)\r\n\r\n  //find elements without minOccurs=\"0\"\r\n  var reader = new FileReader()\r\n  reader.readAsText(xsdFile)\r\n  reader.onload = function (e) {\r\n    var xsd = e.target.result\r\n    var parser = new DOMParser()\r\n    xsdCommonsDom = parser.parseFromString(xsd, 'text/xml')\r\n  }\r\n}\r\n\r\nvar xsdCommonsDom = null\r\nfunction showCommonType(type, orderNumber, mandatoryFields, nonMandatoryFields, path) {\r\n  //commons:PartyType => search for PartyType and get mandatory fields and non mandatory fields\r\n  var thisMandatoryFields = []\r\n  var thisNonMandatoryFields = []\r\n  var searchFor = type\r\n  //search for attributes with name = searchFor\r\n  var response = recursiveSearchForTypes(searchFor, orderNumber, mandatoryFields, nonMandatoryFields, path)\r\n  thisMandatoryFields = response.thisMandatoryFields\r\n  thisNonMandatoryFields = response.thisNonMandatoryFields\r\n\r\n  displayDetails()\r\n\r\n  function displayDetails() {\r\n    //dislay modal with id-\"commonsDigging\" with mandatoryFields and nonMandatoryFields\r\n    //from bulma docs: To activate the modal, just add the is-active modifier on the .modal container.\r\n    var modal = document.getElementById('commonsDigging')\r\n    //add listener to modal close button\r\n    var modalClose = modal.getElementsByClassName('modal-close')[0]\r\n    modalClose.onclick = function () {\r\n      modal.classList.remove('is-active')\r\n    }\r\n    modal.classList.add('is-active')\r\n    //modal-content with data mentioned above\r\n    var modalContent = modal.getElementsByClassName('modal-content')[0]\r\n    //empty modalContent\r\n    modalContent.innerHTML = ''\r\n    //create table in modalContent\r\n    var table = document.createElement('table')\r\n    modalContent.appendChild(table)\r\n    table.classList.add('table')\r\n    table.classList.add('is-striped')\r\n    table.classList.add('is-hoverable')\r\n    table.classList.add('is-fullwidth')\r\n    table.classList.add('is-narrow')\r\n    table.classList.add('is-size-7')\r\n    //create table head\r\n    var thead = table.createTHead()\r\n    var row = thead.insertRow()\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Name'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Type'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Path'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Documentation'\r\n    row.appendChild(th)\r\n    var th = document.createElement('th')\r\n    th.innerHTML = 'Order Number'\r\n    row.appendChild(th)\r\n    //create table body\r\n    var tbody = table.createTBody()\r\n    thisMandatoryFields.forEach((item) => {\r\n      var tr = document.createElement('tr')\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.name\r\n      //color\r\n      td.style.color = 'red'\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.type\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.path\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.documentation\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.orderNumber\r\n      tr.appendChild(td)\r\n      tbody.appendChild(tr)\r\n    })\r\n    thisNonMandatoryFields.forEach((item) => {\r\n      var tr = document.createElement('tr')\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.name\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.type\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.path\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.documentation\r\n      tr.appendChild(td)\r\n      var td = document.createElement('td')\r\n      td.innerHTML = item.orderNumber\r\n      tr.appendChild(td)\r\n      tbody.appendChild(tr)\r\n    })\r\n  }\r\n}\r\n\r\nfunction recursiveSearchForTypes(searchFor, orderNumber, mandatoryFields, nonMandatoryFields, path) {\r\n  if (!xsdCommonsDom) {\r\n    console.log('xsdCommonsDom not ready')\r\n    return\r\n  }\r\n  var thisMandatoryFields = []\r\n  var thisNonMandatoryFields = []\r\n  var mySearchedComplexType\r\n  //search xs:complexType name = searchFor\r\n  //when found, search for all children xs:element with minOccurs=\"0\" and add them to nonMandatoryFields\r\n  //if not minOccurs=\"0\" or even doesn't have minOccurs, add them to mandatoryFields\r\n  var myComplexType = [...xsdCommonsDom.getElementsByTagName('xs:complexType')]\r\n  if (myComplexType.length > 0) {\r\n    mySearchedComplexType = myComplexType.find((item) => {\r\n      return item.getAttribute('name') == searchFor\r\n    })\r\n\r\n    if (!mySearchedComplexType) {\r\n      console.log('mySearchedComplexType not found')\r\n      return { thisMandatoryFields: thisMandatoryFields, thisNonMandatoryFields: thisNonMandatoryFields }\r\n    }\r\n    console.log('searchFor', searchFor, 'mySearchedComplexType', mySearchedComplexType)\r\n    //get all xs:element children\r\n    var myElements = mySearchedComplexType.getElementsByTagName('xs:element')\r\n    var arrMyElements = Array.from(myElements)\r\n    arrMyElements.forEach((item, index) => {\r\n      var parents = []\r\n      var parent = item.parentNode\r\n      //while not mySeachedComplexType\r\n      while (parent.getAttribute('name') != searchFor) {\r\n        parents.push(parent)\r\n        parent = parent.parentNode\r\n      }\r\n      //construct path\r\n      var path1 = ''\r\n      for (var j = parents.length - 1; j >= 0; j--) {\r\n        var parentName = parents[j].getAttribute('name')\r\n        if (parentName) {\r\n          path1 += parentName + '/'\r\n        }\r\n      }\r\n      var keeper = {\r\n        name: item.getAttribute('name'),\r\n        type: item.getAttribute('type'),\r\n        path: path + '/' + path1 + item.getAttribute('name'),\r\n        documentation: '',\r\n        orderNumber: parseFloat(orderNumber) + (index + 1) * 0.001\r\n      }\r\n      if (item.hasAttribute('minOccurs') && item.getAttribute('minOccurs') == '0') {\r\n        nonMandatoryFields.push(keeper)\r\n        thisNonMandatoryFields.push(keeper)\r\n      } else {\r\n        mandatoryFields.push(keeper)\r\n        thisMandatoryFields.push(keeper)\r\n      }\r\n      //try further investigation with commons.xsd by type\r\n      var type = item.getAttribute('type')\r\n      listOfPrimitiveTypes = [\r\n        'xs:string',\r\n        'xs:decimal',\r\n        'xs:integer',\r\n        'xs:boolean',\r\n        'xs:date',\r\n        'xs:time',\r\n        'xs:dateTime',\r\n        'xs:duration',\r\n        'xs:hexBinary',\r\n        'xs:base64Binary',\r\n        'xs:anyURI',\r\n        'xs:QName',\r\n        'xs:NOTATION'\r\n      ]\r\n      if (listOfPrimitiveTypes.indexOf(type) == -1) {\r\n        if (type) {\r\n          var response = recursiveSearchForTypes(\r\n            type,\r\n            keeper.orderNumber,\r\n            mandatoryFields,\r\n            nonMandatoryFields,\r\n            keeper.path\r\n          )\r\n          thisMandatoryFields = thisMandatoryFields.concat(response.thisMandatoryFields)\r\n          thisNonMandatoryFields = thisNonMandatoryFields.concat(response.thisNonMandatoryFields)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  console.log('thisMandatoryFields', thisMandatoryFields, 'thisNonMandatoryFields', thisNonMandatoryFields)\r\n  return { thisMandatoryFields: thisMandatoryFields, thisNonMandatoryFields: thisNonMandatoryFields }\r\n}\r\n\r\n//create function to close bulma modal on escape key\r\n//from bulma docs: To activate the modal, just add the is-active modifier on the .modal container.\r\ndocument.addEventListener('keydown', function (event) {\r\n  var modal = document.getElementById('commonsDigging')\r\n  if (event.key == 'Escape') {\r\n    modal.classList.remove('is-active')\r\n  }\r\n})\r\n\r\n//if user refreshes page, then message alert localStorageRetailer\r\nwindow.onload = function () {\r\n  var params = {}\r\n  params['query'] = {}\r\n  params['query']['sqlQuery'] =\r\n    'select name from trdr where sodtype=13 and trdr=' + localStorage.getItem('trdr_retailer')\r\n  client\r\n    .service('getDataset')\r\n    .find(params)\r\n    .then((res) => {\r\n      if (res.data) {\r\n        //alert(res.data)\r\n        //get id of div id=\"retailerName\"\r\n        var retailerName = document.getElementById('retailerName')\r\n        retailerName.innerHTML = res.data\r\n      }\r\n    })\r\n}\r\n\r\nfunction sendAllFacturi() {\r\n  alert('To be implemented')\r\n}\r\n\r\n//onClick event for id=\"facturiTrimise\" to show only facturi netrimise sau toate facturile\r\n//netrimise means <td class=\"trimis\"> contains <i class=\"fas fa-xl fa-times-circle has-text-danger\">\r\n\r\nfunction toggleFacturiNetrimise() {\r\n  var facturiTrimise = document.getElementById('facturiTrimise')\r\n  var table = document.getElementById('facturiTableBody')\r\n  if (facturiTrimise.checked) {\r\n    //show only rows with cell class=\"trimis\" innerHTML empty if checkbox is checked, else show all rows\r\n    var rows = table.getElementsByTagName('tr')\r\n    for (var i = 0; i < rows.length; i++) {\r\n      var row = rows[i]\r\n      var cell = row.getElementsByClassName('trimis')[0]\r\n      //contains <i class=\"fas fa-xl fa-check-circle has-text-danger\">\r\n      if (cell.innerHTML.includes('fa-check-circle')) {\r\n        row.style.display = 'none'\r\n      }\r\n    }\r\n  } else {\r\n    var rows = table.getElementsByTagName('tr')\r\n    for (var i = 0; i < rows.length; i++) {\r\n      var row = rows[i]\r\n      row.style.display = ''\r\n    }\r\n  }\r\n}\r\n"],"names":["console","log","socket","io","client","feathers","socketClient","socketio","configure","use","service","methods","events","on","data1","loadListaDocumente","localStorageRetailer1","parseInt","localStorage","getItem","err","find","query","TRDR_RETAILER","then","res","table","document","getElementById","data","forEach","item","row","insertRow","cell1","insertCell","cell2","cell3","cell4","cell5","cell6","innerHTML","CCCDOCUMENTES1MAPPINGS","FPRMS","SERIES","INITIALDIRIN","INITIALDIROUT","style","display","className","addEventListener","event","modal","key","classList","remove","window","onload","params","retailerName"],"version":3,"file":"index.a86d2c38.js.map"}